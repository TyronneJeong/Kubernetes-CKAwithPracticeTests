Hello and welcome to this lecture. 
안녕하세요.

In this lecture we will discuss about designing a kubernetes cluster. 
이번 강의에서는 쿠버네티스 클러스터 디자인에 대해 다뤄보겠습니다.

Before you head into designing a cluster.
디자인에 들어가기에 앞서

I must ask the following questions.
저는 다음 질문을 꼭 드리고 싶습니다.

What is the purpose of this cluster?
이 클러스터라는 것의 목적이 무엇일까요?

Is it for learning or development or testing purpose or for hosting production grade applications?
1. 학습을 하거나 개발, 테스트 용도 또는 제품을 호스팅 하는 어플리케이션 일까요?

What is the cloud adoption at your organization?
2. 클라우드 도입은 당신의 회사에서 무엇인가요?

Do you prefer your platform to be managed by a cloud provider or a self hosted?
3. 당신은 당신의 플랫폼이 클라우드 제공자에 의해 관리되는것을 선호하시나요 아니면 직접 호스팅 하는것을 선호 하시나요?

(are you going:~ 할 예쩡이다)
What kind of workloads are you going to run on this cluster?
어떤 종류의 워커로드를 이 클러스터에 실행 할 예정인가요?

How many applications are to be hosted on the Cluster?
클러스터에 얼마나 많은 어플리케이션이 호스팅 되어 있나요?

Few or many?
조금? 많이?

What kind of applications are going to be hosted on the Cluster? Web applications or big data or analytics?
어떤 종류의 어플리케이션이 클러스터에 호스팅 될 예정인가요? 웹? 빅데이터? 애널?

Depending on the kind of application the resource requirements may vary.
어플리케이션의 종류의 따라 자원 요구량은 매우 다릅니다.

What type of network traffic are these applications expecting?
어떤 이런 어플리케이션에 예상되는 네트워크 트래픽 유형이 무엇입니까?

Continuous heavy traffic or burst?
계속 되는 트래픽이 많습니까? 아니면 버스트 입니까?

Well let's try and break down some of these.
좋습니다. 이중 몇가지를 분석해 보겠습니다.

------------------------------------------------------------------------

If you want to deploy a cluster for learning purposes then a solution based on minikube or a single node cluster deployed using kubeadm on local VMs or cloud providers like GCP or AWS should do.
당신이 학습 목적으로 배포를 한다고 하면 1. 솔루션 베이스의 미니큐브나 2. kubeadm 을 이용한 싱글노드 클러스터 on 로컬VM, 3. GCP, AWS 같은 클라우드 제공자를 이용해야 할 것입니다.

We have deployed such a cluster in the beginners course. 
우리는 초보자 과정에서 이러한 클러스터를 배포했습니다.

To deploy a cluster for development and testing purposes, multi node cluster with single master and multiple worker nodes would help.
개발 또는 테스팅 목적으로 클러스터를 배포하기 위해서는  싱글 마스터와 다수의 워커 노드가 함께 있는 멀티노드 클러스터나 멀티 워커 노드가 도움이 될 것입니다.

Again kubeadm is an appropriate tool. Or if on managed cloud environments, then quickly provision a cluster on GCP, AWS or AKS on Azure. 
또한번 kubeadm 은 적당한 도구 입니다. 또는 클라우드 환경에서 관리를 한다면, GCP, AWS 나 AKS on Azure 들이 클러스터를 신속하게 프로비저닝 합니다.

Let’s talk about production level clusters. 
상품 단계의 클러스터를 말해봅시다.

For hosting production grade applications a High Availability Multi node cluster with multiple master nodes is recommended.
상품 등급의 어플리케이션을 호스팅 하기 위해서는
HA 멀티노드(w.멀티마스터노드) 클러스터가 권장됩니다.

We look at more details about High Availability setup with multiple-master nodes later in this section.
좀더 HA 설정-멀티플 마스터 노드 에 대한 자세한 정보는 이 강의 후반에 에서 보겠습니다.

Again this can be setup with kubeadm or GCP or using kops on AWS or other supported platforms.
다시한번 이것도 kubeadm 으로 설정 할 수 있습니다. 또는 GCP 또는 Kosa onAWS 또는 다른 지원 플랫폼으로 할 수 있습니다.

You can have upto 5000 nodes in the cluster, a total of 150k PODs in the cluster, 300,000 containers in total and upto 100 PODs per node. 
당신은 클러스터에 5000개의 노드를 구성 할수 있습니다. 총합 15만개의 POD 를 클러스터에 가질수 있습니다. 30만개의 컨테이너를 가질수 있고 노드당 100개의 POD 를 가질수 있습니다.

Depending on the size of your cluster.
이것은 당신의 클러스터의 사이즈에 따라 달라집니다.

the resource requirement for your nodes varies. CSPs??? like GCP and AWS automatically selects the right sized nodes for you based on the number of nodes in the cluster.
노드에 대한 자원 요구량은 다양합니다. GCP, AWS 는 클러스터에 존재하는 노드의 수에 기초하여 자동으로 올바른 노드 사이즈를 선택 합니다.

This table shows the size of the instances and their resource specifications for a specific number of nodes.
이 테이블은 노드수를 지정하기 위한 인스턴스사이즈와 자원량을 보여 줍니다.
------------------------------------------------------------------------
Node	|GCP			|CPU			|AWS		|
------------------------------------------------------------------------
1-5		N1-standard-1	1  vCPU 3.75GB	M3.medium
6-10	N1-standard-2	2  vCPU 7.5 GB	M3.large
11-100	N1-standard-4	4  vCPU 15  GB	M3.xlarge
101-250	N1-standard-8	8  vCPU 30  GB	M3.2xlarge
251-500	N1-standard-16	16 vCPU 60  GB	C4.4xlarge
500<	N1-standard-32	32 vCPU 120 GB	C4.8xlarge
------------------------------------------------------------------------
If you are deploying on prem nodes then you could probably start with these numbers as base. 
만약 온프레미스 노드에 배포하려 한다면 아마도 이 숫자를 기본으로 시작할 수 있씁니다.

Cloud or Onprem?
클라우드냐 온프렘이냐

We have already discussed that all of these deployment options are available in any environment. 
우리는 이미 이 문제에 대해 다뤘습니다. 모든 배포 옵션은 모든 환경에서 가능 합니다.

For on-prem kubeadm is a very useful tool.
온프레미스 환경에서도 kubeadm 도구는 아주 유용한 도구입니다.

Google Container engine makes provisioning kubernetes clusters on GCP very easy.
구글 컨테이너 엔진은 GCP 에서 쿠버네티스 클러스터를 프로비저닝 하기 매우 쉽게 만들어 져 있습니다.

It comes with one-click cluster upgrade features that makes it very easy to maintain the cluster. 
한번 클릭만으로 클러스터의 특성이 업그레이드 되며 이것은 클러스터 관리가 매우 편리하게 만들어 줍니다.




KOPS is a nice tool to deploy kubernetes cluster on AWS and the Azure Kubernetes Service or AKS helps in managing the hosted kubernetes environment on Azure. 
Kops 는 쿠버네티스 클러스터를 AWS 에 배포하기에 좋은 도구 입니다. 그리고 Azure Kubernetes Servie 또는 AKS 는 Azure 에 호스팅된 쿠버네티스 환경을 관리하는데 도움이 됩니다.

[Kops : AWS  ] - Amazon
[AKS  : Azure] - Microsoft

(rely:의존하다 lean on, depend on)
Depending on the workloads configured, your node and disk configurations will differ. For High Performance workloads rely on SSD Backed Storage. 
워크로드 설정에 따라 노드와 디스크 구성이 다릅니다. 높은 성능의 워크로드는 SSD 스토리지에 따라 달라집니다.

(concurrent:동시성)
For multiple concurrent access consider network based storage. 
다중 동시 접속의 경우 네트워크 기반의 스토리지를 구려 하십시오.

(across:교차하여, 가로질러)
For shared access to volumes across multiple PODs, Consider persistent storage volumes that we discussed in the storage section.
멀티플 POD를 가로지르는 볼륨에 대한 접근을 공유하려면 우리가 스토리지 섹션에서 다루었던 영구 스토리지 볼륨을 고려 하십시오.

Consider defining different classes of storage and allocating the right class to the right applications.
다양한 스토리지 클래스를 정의하는 것을 고려하세요. 그리고 올바른 클래스를 올바른 어플리케이션에 할당 하세요.
※ 스토리지 클래스:디스크 볼륨을 가져와 마운트 시키는 정보를 저장한 곳.

The Nodes forming a kubernetes cluster can be physical or virtual
쿠버네티스를 구성하는 노드(클러스터)는 실제 또는 가상환경으로 구성 할 수 있습니다.

In our case we will be deploying virtual machines on VirtualBox environments has nodes of our cluster.
우리의 케이스에서는 클러스터의 노드가 있는 버츄얼 박스 환경에 VM을 배포 할 것입니다.

You may chose to deploy on physical machines or virtual machines or cloud environments like GCP, AWS, Azure or any other platform of your choice.
물리적 또는 가상의 머신에 배포하는 것을 선택 할 수도 있습니다. 또는 GCP, AWS, Azure 또는 선택가능한 다른 플렛폼에도 가능합니다.

We will be building a cluster with three nodes one master and two worker nodes.
우리의 클러스터는 3개의 노드(1마스터, 2워커노드)로 생성될 것입니다.

Now We know that master nodes are for hosting control plane components like the kube-api server, etcd server and others, while worker nodes for hosting workloads.
이제 우리는 마스터 노드는 워커 노드가 워크로드를 호스팅 하는 동안 API서버, ETCD 서버같은 Control Plane Components 를 호스팅 하기 위한 것이라는 걸 압니다.

However this is not a strict requirement.
하지만 이것은 엄격한 (꼭 지켜야 하는) 요구사항은 아닙니다.

(workloads:number of tasks and obligations that you have to perform or complete within a specific amount of time)

(host:주인역을 맡다)
The master nodes are also considered as nodes and can host workloads.
마스터 노드 또한 일반 노드처럼 고려될수 있습니다. 그리고 워크로드를 호스팅 할 수도 있습니다.

(As a best practice:모범사례로) (dedicate:전념하다)
As a best practice it is recommended to dedicate master nodes for control plane components only specially in a production environment.
모범사례로, 컨트롤 플레인 컴포넌트 전용으로 마스터 노드를 구성하는 것을 특별히 권장 합니다.

(taint:더러움, 오염)
Deployment tools like kubeadm prevent workloads from being hosted on master nodes by adding a taint to the master node.
kubeadm 같은 배포 도구는 마스터 노드가 Taint 추가로 인해 호스팅 되어 버리는 것으로 부터 워크로드를 방지합니다.

You must use 64 bit Linux operating system for nodes.
노드를 위해 리눅스 시스템에서는 64비트 운영체제를 써야 합니다.

(typically:일반적으로)
Another thing to note is that typically you have all the control plane components on the master nodes.
참고할 다른 사항은 일반적으로 모든 컨트롤 플레인 컴포넌트들은 마스터 노드에 존재합니다.

However, in large clusters you may chose to separate the ETCD clusters from the master node to its own cluster nodes.
하지만 대형 클러스터에서는 ETCD 클러스터를 마스터 노드와 분리하여 자체 클러스터 노드로 구성 할 수도 있습니다.

(topologies:망구성방식-컴퓨터 네트워크의 요소들을 물리적으로 연결해놓은 방식)
We will discuss more about the different topologies for that in the upcoming lecture when we talk about high availability setup. 
이 부분에 대해서는 다가오는 HA Setup 강의에서 더 자세히 다루겠습니다.

Well those are some of the considerations for designing a kubernetes cluster.
좋습니다. 이것들은 쿠버네티스 클러스터를 디자인 하는데 약간의 고려사항입니다.

Refer to the links in the references section for more details and some interesting reads. 
좀더 많은 정보와 읽을 거리를 위해 참조섹션에 링크를 참조하세요.






Well that's it for this lecture.

Before you go from our certification exam standpoint there's really nothing much you need to remember from this section.

You don't have to memorize the numbers that we discussed as these are available in the documentation page 

well we'll get into more interesting topics in the upcoming lectures in this section where we will provision an actual cluster from scratch by ourselves.

Well that's it for this lecture.

I'll see you in the next election.