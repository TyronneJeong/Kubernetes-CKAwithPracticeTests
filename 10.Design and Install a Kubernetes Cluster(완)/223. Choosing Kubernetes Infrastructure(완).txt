Hello and welcome to this lecture. 
안녕하세요.

In this lecture we talk about the different choices available for the infrastructure hosting a Kubernetes cluster. 
이번 강의에서는 쿠버네티스 인프라 스트럭처에서 이용가능한 다양한 선택에 대해 이야기 해 보겠습니다.

In the previous lecture we discussed about the various options we have in deploying a kubernetes cluster.
이전 강의에서 우리는 쿠버네티스 클러스터를 배포하는 다양한 옵션에 대해 다루었습니다.

Let's look at it in a bit more detail here.
이부분을 조금 더 자세히 살펴 봅시다.

Kubernetes can be deployed on various systems in different ways.
쿠버네티스는 다양한 방식으로 다양한 시스템에 배포가 가능합니다.

Starting with your laptops, to physical or virtual servers within an organization as well as those in the cloud.
랩탑을 시작으로, 조직의 물리적 또는 가상의 서버와 클라우드 서버 까지.

Depending on your requirements your cloud ecosystem and the kind of applications you wish to deploy
당신의 클라우드 생태계 요구사항과 배포하고자 하는 어플리케이션의 종류에 따라

you may choose one of these solutions. 
이 솔루션들 사이에서 선택 할 수 있습니다. 

On a laptop or a local machine, There are a number of ways to get started.
랩탑 또는 로컬 머신에서 여기 시작하는 몇가지 방법이 있습니다.

First of all on a supported Linux machine. you can get started with installing the binaries manually and setting up a local cluster.
리눅스 머신에서 가장 먼저 할 것은, 바이너리 파일을 수동으로 설치하는걸로 시작할 수 있습니다. 그리고 로컬 클러스터를 셋업 합니다.

(tedious:지루하다)
However that is too tedious especially if you are just getting started.
특히나 막 시작한 경우에는 너무 지루합니다.

So relying on a solution that automates all that will help in setting up a cluster in a matter of minutes.
따라서 몇 분 만에 클러스터를 설정하는데 도움이 되는 모든 것을 자동화 해주는 솔루션에 의존 합니다.

We will look at some of those solutions in a bit. 
우리는 이 솔루션에 대해서도 잠시 뒤 살펴 볼 것입니다.

On Windows on the other hand, you cannot setup kubernetes natively as there are no windows binaries.
다른 한편으로 윈도우즈 에서는 쿠버네티스는 윈도우즈 바이너리가 없이 때문에 쿠버네티스를 네이티브로 설정 할 수 없습니다.

[Hyper-V, VMware, VitrualBox]
You must rely on a virtualization software like Hyper-V or Vmware workstation or VirtualBox 
Hyper-V나 VMWare 워크 스테이션 또는 Vitrual Box 같은 가상 소프트웨어를 이용해야만 합니다.

to create Linux VMs on which you can run kubernetes.
쿠버네티스 설치를 위한 리눅스 VM을 설치하기 위해

There are also solutions available to run kubernetes components as docker containers on windows VMs.
저기에는 WindowsVM 에 도커 컨테이너로 쿠버네티스 컴포넌트를 실행하는데 이용가능한 솔루션 또한 있습니다.

But remember, even then the docker images are Linux based and under the hoods they run on a small Linux OS created by Hyper-V for running Linux docker containers.
하지만 기억하세요. 이렇게 항 경우 도커 이미지는 리눅스 기반에 그리고 그 내부에 리눅스도커 컨테이너를 실행시키기 위해 또다른 스몰 리눅스가 hyper-V에의해 생성된다는 것을.

So what are some of the solutions available to easily get started with kubernetes on a local machine?
그래서 로컬 머신에서 쿠버네티스를 손쉽게 시작 하기 위해 이용가능 한 솔루션은 어떤게 있을까요?

[미니큐브]
Minikube deploys a single node cluster easily. It relies on one of the virtualization software like Oracle Virtualbox to create virtual machines that run the kubernetes cluster components.
미니큐브는 단일 노드 클러스터를 손쉽게 배포 합니다. 미니큐브는 오라클 버츄얼 박스 같은 하나의 가상 소프트웨어에 의존 합니다.

[kubeadm]
We have seen this in the beginners course. The kubeadm tool can be used to deploy a single node or a multi node cluster real quick 
우리는 해당 장면을 비기너즈 코스에서 보았습니다. kubeadm 도구는 단일 싱글 노드 또는 다수의 노드를 클러스터에 재빠르게 배포를 하는데 사용될 수 있습니다. 

before this 
그 이전에 

(provision:공급, 지급량, 마련)
you must provision the required hosts with supported configuration yourself.
지원되는 구성과 함께 필요한 호스트를 직접 마련 해야만 합니다.

[MiniKube, Deploy VMs]vs[kubeADM]
So the different between the first two and kubeadm is that the first two provisions a VM with supported configuration by itself, 
그래서 처음 두개(미니큐브, 가상머신)과 kubeADM 의 차이는 이것 입니다.
처음 두개는 자체적으로 지원되는 구성의 VM으로 프로비저닝 합니다.

whereas kubeadm expects the VMs provisioned already. 
반면 kubeADM 은 이미 VM 프로비젼된 상태를 기대합니다.


☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
At the same time it allows for deploying multi-node clusters, whereas the former doesn’t. 
동일한 시간에 이것은 멀티노드 클러스터 배포를 허락합니다. 반면 형태는 그렇지 않습니다.
☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

Again deploying a kubernetes cluster locally on a laptop is usually for learning, testing and development purposes. 
랩톱의 로컬로 쿠버네티스 클러스터를 다시 배포하는 것은 보통 학습이나 테스팅 개발용 목적입니다.

For production purposes, there are many ways to get started with a kubernetes cluster. Both in a private or a public cloud environment.
제품개발 목적으로는 개인 또는 공공 클라우드 환경 모두 쿠버네티스 클러스터와 함께 다양한 방법으로 시작을 할 수 있습니다. 

(Turnkey:완성인도방식)
I would categorize them as Turnkey solutions or Hosted or managed solutions. 
이들을 [턴키 솔루션]과 [호스티드] 또는 [매니지드] 솔루션으로 분류 할 것입니다.

[턴키솔루션]
Turnkey solutions are where you provision the required VMs and use some kind of tools or scripts to configure kubernetes cluster on them.
턴키 솔루션은 당신이 필요한 VM과 사용할 몇가지 종류의 도구 또는 쿠버네티스 클러스터를 구성하는 스크립트를 제공하는 장소 입니다.

At the end of the day 
you are responsible for maintaining those VMs, and patching them and creating, upgrading??? them etc. 
턴키솔루션에서 당신은 해당 VM 들을 관리할 책임이 있습니다. 그리고 이들을 패칭하고 생성 하고 등등

(mostly:주로)
But cluster management and maintenance are mostly made easy using these tools and scripts.
하지만 클러스터 관리 그리고 유지보수는 주로 해당 도구와 스크립트로 쉽게 만들수 있습니다.)

For example deploying a kubernetes cluster on AWS using the KOPS tool. 
예를 들어 Kops 도구를 활용하여 AWS에 쿠버네티스 클러스터 배포가 있습니다.

[호스티드 솔루션]
Hosted solutions are more like Kubernetes as a service solution where the cluster along with the required VMs are deployed by the provider
호스티드 솔루션은 클러스터가 필수 VM 과 함께 공급자에 의해 배포되는 서비스 솔루션으로 쿠버네티스와 비슷합니다.
공급자 : 필수VM + 클러스터

and kubernetes is configured by them by the provider.
그리고 쿠버네티스는 제공자에 의해 구성 되어 집니다.

The VMs are maintained by the provider.
VM이 제공자에 의해 관리됩니다.

(in a matter of minutes:몇분만에)
For example, Google Container Engine lets you deploy a kubernetes cluster in a matter of minutes without you having to perform any configuration by yourself. 
예를 들어 구글 컨테이너 엔진은 당신이 어떠한 설정을 하지 않아도 몇분만에 쿠버네티스 클러스터를 배포 할 수 있게 해줍니다.




Let us look at some of the Turnkey solutions.
턴키 솔루션을 봅시다.

OpenShift is a popular on-prem kubernetes platform by RedHat. 
오픈쉬프트는 레드헷이 제공하는 유명한 온 프레미스 플랫폼입니다.

(For those of you:그런 분들을 윟)
For those of you who may not be familiar, OpenShift is an open source container application platform and is built on top of kubernetes.
친숙하지 않은 그런 분들을 위해, 오픈 쉬프트는 오픈 소스 컨테이너 어플리케이션 플랫폼 입니다. 그리고 쿠버네티스 위에서 개발 되었습니다.

It provides a set of additional tools and a nice GUI to create and manage kubernetes constructs and easily integrate with CI/CD pipelines etc.
오픈 쉬프트는 추가적인 도구 세트를 제공 합니다. 그리고 쿠버네티스 구조의 생성과 관리가 편리한 GUI 그리고 CI/CD 파이프라인을 이용한 쉬운 통합 등을 제공합니다.

We have an OpenShift for beginners course in our catalog.
우리는 오픈 쉬프트 초급자 과정을이 카테고리에 있습니다.

Check it out if you are interested!
관심 있다면 확인 하세요.

Cloud Foundry Container Runtime is an open-source project from Cloud Foundry that helps in deploying and managing highly available kubernetes clusters using their open-source tool called BOSH.
클라우드 파운더리 컨테이너 런타임은 클라우드 재단으로 부터 시작된 오픈 소스 프로젝트 입니다.
CFCR 은 고가용성 쿠버네티스 클러스터의 배포와 관리를 돕기위해 그들의 오픈소스 도구 BOSH 라는것을 이용합니다.

(leverage:영향력, 목적달성상의 이점, 이점)
if you wish to leverage your existing Vmware environment for kubernetes, then the Vmware Cloud PKS solution is one that should be evaluated.
쿠버네티스용 기존 VMWare 환경을 이점을 원하는 경우(계속활용하려는 경우) VMWare Cloud PKS 솔루션은 고려해야 하는 대상입니다.



[Vagrant]
Vagrant provides a set of useful scripts to deploy a Kubernetes cluster on different cloud service providers.
베이그런트는 다양한 클라우드 서비스 제공에게 쿠버네티스 클러스터를 배포하기 위한 유용한 스크립트를 제공합니다.

All of these solutions makes it easy to deploy and manage a kubernetes cluster privately within your organization.
앞서 설명한 모든 솔루션들은 조직내에서 프라이빗하게 쿠버네티스 클러스터의 배포와 관리를 쉽게 만들어 줍니다.

(in place:제자리에)
You must have a few Virtual Machines with supported configurations in place.
지원되는 구성이 있는 몇개의 가상 머신이 필요합니다. 

These are few of the many kubernetes certified solutions.
이것들은 많은 쿠버네티스 인증 솔루션중 하나입니다.

Well there are many more, so check them out in the kubernetes documentation page. 
더 많은 솔루션 정보는 도큐멘테이션 페이시를 확인해 보시면 됩니다.



[턴키솔루션] | [호스티드 솔루션]
오픈쉬프트		오픈쉬프트 온라인
베이그런트		GCE - Google Container Engine
            AKS - Azure Kubernetes Service
			AEC - Amazon Elastic Container







[호스티드 솔루션]
Let us look at some of the hosted solutions. 
이제 호스티드 솔루션을 살펴 봅시다.

Google Container Engine is a very popular kubernetes as a service offering on Google Cloud Platform. 
GCE 는 구글 플랙폼에서 서비스 제공되는 매우 인기 있는 kubernetes 입니다.

Openshift online is an offering from RedHat where you can gain access to a fully functional kubernetes cluster online.
오픈쉬프트 온라인은 완전한 기능을 갖춘 쿠버네티스 클러스터에 온라인으로 엑세스 할 수 있는 레드헷 제품 입니다.

Azure has Azure Kubernetes Service. 
아쥴은 아쥴 쿠버네티스 서비스를 가지고 있습니다.

And finally Amazon Elastic Container Service for Kubernetes is Amazon’s hosted kubernetes offering. Again, 
그리고 마지막으로 아마존 엘라스틱 컨테이너 서비스 for 쿠버네티스는 아마존에서 호스팅 되는 쿠버네티스 입니다.

these are just some of the solutions there are many more. So what is our choice?
이것들은 그저 몇가지 솔루션입니다. 저기에 더 많이 있습니다. 그래서 무엇을 선택 해야 할까요?

In our case since this is for learning purposes and considering the fact that some of you may not have access to a public cloud account and since most of you mentioned in the poll we sent out that you prefer a local setup with Virtualbox,
우리의 경우 학습이 목적이고 공공 클라우드 계정에 접근하지 못할 수도 있고 투표결과 버츄얼 박스에 로컬 셋업을 선호하는 의견들이 많았기 때문에

we chose to deploy a local kubernetes cluster from scratch on our local system by creating several virtual machines on VirtualBox.
우리는 스크래치를 통해 로컬에 쿠버네티스 클러스터를 배포하기로 정했습니다. (버츄얼 박스로 생성된 가상머신으로)

So our design now has 3 nodes, 1 master, 2 worker, to be deployed on a laptop with Virtual Machines provisioned on VirtualBox.
그래서 우리의 디자인은 이제 3개의 노드로 1 마스터, 2워커노드 입니다. 랩탑에서 배포 되어집니다.

Well that's it for this lecture.

Check out the reference page to read more about many more such solutions.