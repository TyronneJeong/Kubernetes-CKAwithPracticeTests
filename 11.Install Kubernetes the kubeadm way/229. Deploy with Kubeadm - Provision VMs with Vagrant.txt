------------------------------------------------------------------------
## vagrant repository URL
https://github.com/kodekloudhub/certified-kubernetes-administrator-course

## install kubeADM
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
------------------------------------------------------------------------
In this demo, we will see how to provision the VMs required to set up a single master, 2 worker node 
이번 데모에서 우리는 1마스터 노드 2 워커 노드를 설정하는데 필요한 VM를 프로비저닝 하는 방법에 대해 알아 볼 것 입니다.

kubernetes cluster using virtual box and vagrant on our local system.
쿠버네티스 클러스터는 로컬 환경에서 버츄얼 박스와 베이그런트를 이용합니다.

(as a prerequisite:전제조건에 따라)
as a prerequisite You must have virtual box and vagrant installed.
전제조건에 따라 반듯이 버츄얼 박스와 베이그런트가 설치되어 있어야 합니다.

(required for:~에 필요한)
We will use a vagrant file to automate the provisioning of the virtual machines required for the master and worker nodes.
우리는 마스터와 워커 노드에 필요한 가상 머신을 자동으로 프로비저닝하는 베이그런트 파일을 이용할 것입니다.

[베이그런트 : 자동으로 프로비저닝하는걸 도와주는 도구.]

The vagrant file is located in the GitHub repository associated with this course.
베이그런트 파일은 깃 헙 리파지토리에 있습니다.

(followed by:뒤이어)
So we clone this repository first by copying the repository URL and running the git clone command followed by the URL repository.
따라서 가장 먼저 이 리파지 토리를 복사 합니다.
그리고 git clone 명령에 repository URL 을 뒤잇습니다.

>> git clone https://github.com/kodekloudhub/certified-kubernetes-administrator-course.git

Once cloned cd into the cloned directory.
복제가 끝나면 복제된 디렉토리로 이동 합니다.

>> cd certifiec-kubernetes-administrator-course/

Review the vagrant file to make sure it has the right settings.
베이그런트 파일을 검토하여 제대로 셋팅 되어 있는지 확인하십시오.

>> vi Vagrantfile

We see that we have configured the number of Master nodes to one and worker nodes to two.
우리에게 마스터 노드가1개와 워커 노드2개가 설정된것을 볼 수 있습니다.

And the IP network range is 192.168.56.*
그리고 IP 네트워크 레인지는 192.168.56.* 입니다.

This means that when the VMs are created, they are going to get IP addresses within this range.
이 의미는 VM 이 생성되었을떄, VM이 가지는 IP 주소가 저 대역 안이라는 의미입니다.

So that looks good.
네 보기 좋습니다.

We come out of the file and we run the vagrant status command to check the status of the VMs.
이제 이 파일을 나와서 VM의 상태를 체크하기 위해 background status 명령을 실행합니다.

>> vagrant status

And since we have not created them yet, 
우리가 아직까지는 VM들을 생성하지 않았기 땜누에.

they are in a not created state.
이들 상태는 not created 입니다.

But we can see the names of machines that it would create.
하지만 우리는 우리가 만들 머신의 이름을 볼수 있씁니다.

Once we provision, they will be named Kubemaster, Kubenode01 and Kubenode02.
우리가 프로비저닝을 하면, 가상머신들은 큐브마스터 큐브노드01 큐브노드02로 각 이름지어 질 것입니다.

We will now run the vagrant up command to provision the VMs.
이제 우리는 VMs 을 공급하기 위해 베이그런트 업 명령을 실행 할 것입니다.

## VT-x 가상 머신 지원 옵션 활성화 필요
C:\Program Files\Oracle\VirtualBox>VBoxManage.exe modifyvm "ubuntu" --nested-hw-virt on

>> sudo apt install virtualbox
>> vagrant up --provider virtualbox --debug


It uses the Ubuntu Bionic 64 base images.
이것은 우분투64 기본 이미지에 사용합니다.

The base image is pulled and the VMs are being provisioned.
이제 기본 이미지도 추출 되었습니다. 그리고 VM 는 프로비져닝 되었습니다.

Now, depending on your network bandwidth and your hosts resources, this may take some time.
이제 당신의 네트워크 대역폭에 따라 그리고 호스트 히소스에 따라 몇분 정도 소요 될수 있습니다.

So let's wait.
기다려 봅시다.

Now, first, the Kubemaster is provisioned and then the kubenode01 is provisioned.

And finally, kubenode02 gets provisioned.
마침내 노드02까지 프로비져닝 되었습니다.

We now check the status again and see that it's all in our running state 
이제 상태 체크를 다시한번 해봅니다. 그리고 가상 머신의 실행 상태를 확인합니다.

>> vagrant status

to access one of these system, use the vagrant as a search command.
이 시스템에 접근 하기 위해서 vagrant ssh 명령을 사용해야 합니다.

So we run the vagrant ssh kubemaster command to ssh into the master node.
그래서 우리는 마스터 노드에 SSH 접근을 하기 위해 vagrant ssh kubemaster 명령을 실행합니다.

>> vagrant ssh kubemaster

So we are in the master node.
마스터 노드 안으로 들어왔씁니다.

We run just any command to make sure it's working.
마스터 노드가 동작하는지 확인하기 위해 아무 명령이나 실행합니다.

So we were on the uptime command to check if the commands are working.
그래서 우리는 uptime 명령으로 이 명령이 동작하는지 확인합니다.

>> uptime

And then we will now log out of the system 
그리고 시스템을 로그아웃 합니다.

>> logout

and test SSL connectivity to the other nodes, node01
그리고 다른노드들을 향해 SSL 연결을 테스트 합니다. 노드01

And followed by node02
그리고 뒤를 이어 노드02

So they look good.
좋아보입니다.

Now we're all set.
이제 모든것이 셋팅 되었습니다.

And in the next video, we will proceed with bootstrapping a cluster using KubeADM.
이제 다음 비디오에서 우리는 kubeADM 을 이용한 클러스터 부트스트래핑을 진행하겠습니다.