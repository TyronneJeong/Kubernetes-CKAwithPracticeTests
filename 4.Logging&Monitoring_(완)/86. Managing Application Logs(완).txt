--------------------------------------------------------
detached(백그라운드) 모드 실행
>> docker run -d kodekloud/event-simulator
라이브 로그 보기 -f
>> docker logs -f ecf

쿠버컨트롤에서 라이브 로그 보기 -f 옵션
>> kubectl logs -f node01

POD내 다수의 컨테이너가 존재하는 경우 컨테이너 명 찾기
>> kubectl logs webapp-2 -c
--------------------------------------------------------

Hello and welcome to this lecture. 
안녕하세요.

In this lecture we will talk about various Logging mechanisms in kubernetes. 
이번 강의에서는 다양한 로깅 매커니즘에 대해 이야기해 보겠습니다.

Let us start with logging in Docker. 
도커에서의 로깅으로부터 시작합시다.

I run a docker container called event-simulator and all that it does is generate random events simulating a web server.
저는 이벤트 시뮬레이터라는 도커 컨테이너를 실행합니다. 그리고 실행하는 모든 것은 웹서버에 랜덤 이벤트로 시뮬레이팅 됩니다.

These are events streamed to the standard output by the application.
이것은 어플리케이션에 의해 표준 출력되는 스트리밍 이벤트 입니다. 

-------------------------------------------------------------
(detached:떨어져있는)
Now, if I were to run the docker container in the background, in a detached mode using the –d option,
이제, 만약 도커 컨테이너가 -d 옵션을 이용하여 detached 모드로 백그라운드에 실행되었다면??

>> docker run -d kodekloud/event-simulator

I wouldn't see the logs if I wanted to view the logs.
만약 로그를 보고 싶을때 로그를 볼 수 없게 됩니다.

I could use the docker logs command followed by the container ID. 
저는 컨테이너ID 를 사용하여 도커 로그 커맨드를 사용할 수도 있습니다.

The –f option helps us see the live log trail.
-f 옵션은 라이브 로그를 볼수 있도록 우릴 돕습니다.

>> docker logs -f ecf
-------------------------------------------------------------

Now back to Kubernetes. We create a pod with the same docker image using the pod definition file.
쿠버네티스로 돌아것, 우리는 POD정의파일을 이용하여 동일한 도커 이미지로 POD를 생성했습니다.

Once it’s the pod is running, we can view the logs using the kubectl logs command with the pod name.
한번 실행되면, 우리는 kubectl log pod name 의 명령어를 통해 로그를 볼 수 있습니다.

>> kubectl logs -f node01

Use the –f option to stream the logs live just like the docker command.
로그를 라이브로 스트림 받고 싶다면 도커 명령어와 같이 -f 옵션을 사용하세요.

(specific:특정하다, 해당하다)
Now these logs are specific to the container running inside the pod.
이 로그들은 POD가 동작중인 컨테이너에만 해당합니다.

As we learned before, Kubernetes PODs can have multiple docker containers in them.
이전에 배운것처럼, 쿠버네티스 POD 는 다수의 도커 컨테이너를 가질 수 있습니다.

In this case I modify my pod definition file to include an additional container called image-processor.
이 케이스의 경우 저는 저의 POD 정의파일을 수정했습니다. image-processor 라고 불리는 추가적인 컨테이너를 포함하려고.

If you run the kubectl logs command now with the pod name,
만약 kubectl log 명령어를 pod 네임과 함꼐 실행하면

which container’s log would it show? 
어떤 컨테이너의 로그가 출력 될 까요?

If there are multiple containers within a pod.
만약 저 POD 안에 다수의 컨테이너가 존재한다면

You must specify the name of the container explicitly in the command.
명령어 속에 정확한 컨테이너 명을 지정 해야 합니다.

(Otherwise :그렇지않으면)
Otherwise it would fail asking you to specify a name.
그렇지 않으면 이름을 정해달라고 물으며 이 작업은 실패하게 됩니다.

In this case I will specify the name of the first container event-simulator and that prints the relevant log messages.
이번 경우에 저는 첫번쨰 컨테이너 event-simulator 의 이름을 지정 했고, 컴퓨터는 관련 로그 메세지를 출력 했습니다.

(functionality:기능)
Now, that is the simple logging functionality implemented within Kubernetes.
이게 쿠버네티스에서 단순 로깅 기능 구현 입니다.

And that is all that an application developer really needs to know to get started with Kubernetes.
그리고 저것들이 어플리케이션 개발자들이 쿠버네티스를 시작할때 실제 필요한 전부입니다.

And that is all you really need to know as part of the certification program.
그리고 저것들이 당신이 실제 시험에서 알고 싶은 모든 것입니다.

However in the next lecture we will see more about some advanced logging configuration and third party support for logging in Kubernetes.
하지만 우리는 다음 강의에서 조금 더 자세한 로깅 설정과 서드 파티 지원에 대해 알아볼 것입니다.

We also have a nice demo that shows how a popular logging framework is integrated with kubernetes.
또 괜찮은 데모를 가지고 어떻게 보편적인인 로깅 프레임웤이 쿠버네티스 로그를 통합하는지 보여줄 것입니다.

Well that's it for this lecture.

Head over to the coding exercises section and practice working with logs thank you.

