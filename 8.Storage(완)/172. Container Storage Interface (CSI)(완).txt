Let us now look at container storage interface.
우리는 이제 컨테이너 스토리지 인터페이스에 대해 살펴 봅시다

In the past, kubernetes used docker alone as the container runtime engine and all the code to work with, Docker was embedded within the kubernetes source code with other container runtimes coming in, such as rocket(rkt) and cri-o.
과거에 쿠버네티스는 컨테이너 런타임 엔딩으로 도커 단독으로만 사용했습니다. 그리고 모든 코드는 도커로만 작업 했습니다. 도커 는 다른 컨테이너 런타임 엔진들과 쿠버네티스 소스 코드 속에 내장되었었습니다. rkt 이라던가 crio-o 라던가

It was important to open up and extend support to work with different container runtimes and not be dependent on the kubernetes source code.
이것은 다른 컨테이너 런타임즈 들의 개발과 지원 확장에 중요했습니다. 그리고 쿠버네티스 소스 코드에 의존 적이지 않도록 되는 것.

(came to be:탄생하다)
And that's how container runtime interface came to be.
그래서 이렇게 컨테이너 런타임 인터페이스가 탄생하게 되었습니다.

The container runtime interface is a standard that defines how an orchestration solution like kubernetes.
컨테이너 런타임 인터페이스는 오케스트레이션 솔루션 방법의 표준입니다. 쿠버네티스 같은.

it would communicate with container runtimes like Docker.
이것은 도커와 같은 컨테이너 런타임과 소통 할 수 있습니다.

So in the future, if any new container runtime interface is developed, they can simply follow the cri-o standards.
그래서 미래에 어떤 새로운 런타임 인터페이스가 개발된다면, 간단하게 표준을 따를 수 있습니다.

And that new container runtime would work with kubernetes without really having to work with the kubernetes team of developers or touch the kubernetes source code.
그리고 새로운 컨테이너 런타임은 실제 쿠버네티스 개발자 팀과 협력 하거나 쿠버네티스 소스 코드를 건드릴 필요 없이 쿠버네티스와 함께 작동 됩니다.

Similarly, as we saw in the networking lectures, to extend support for different networking solutions,
유사하게. 우리가 네트워킹 과목에서 보았던것 처럼, 다른 네트워킹 솔루션과의 지원을 확장 합니다.

the container networking interface was introduced.
컨테이너 네트워킹 인터페이스는 소개되었습니다.????

Now any new networking vendors could simply develop their plug in based on the CNI standards and make their solution work with kubernetes.
이제 모든 네트워킹 벤더들은 그들의 플러그인을 CNI 표준 기반으로 간단하게 개발할 수 있습니다.  그리고 그들의 솔루션을 쿠버네티스에 동작하게 만들수 있습니다.

And as you can guess, the container storage interface was developed to support multiple storage solutions
그리고 예상했던 대로, 컨테이너 스토리지 인터페이스는 다양한 스토리지 솔루션을 위해 개발되었습니다.

with CSI, you can now write your own drivers for your own storage to work with kubernetes.
CSI 는 쿠버네티스에서 동작하는 당신 소유의 드라이버에 쓰기가 가능 합니다.

Portworx, Amazon EBS, as your desk.
포트웍스, 아마존 EBS, 에즈유얼데스크

DELL EMC Isilon, Powermax Unity, XtremIO, NetApp, Nutanix, HP, Hitachi, pure storage.
등등

Everyone's got their own CSI drivers.
모든 회사들은 다 자신들의 CSI 드라이버를 보유하고 있습니다.

Note that CSI is not a kubernetes specific standard, it is meant to be a universal standard and if implemented, allows any container orchestration tool to work with any storage vendor with a supported plug in.
알아둘게. CSI 는 쿠버네티스 지정 표준이 아닙니다. 컨테이너 스토리티 인터페이스는 유니버셜 스탠다드 입니다. 그리고 구현되면 지원 플러그인을 통해 모든 컨테이너 오케스트레이션 도구에 작업하는게 허용 됩니다.

Currently, kubernetes Cloud Foundry and measures are on board with CSI.
현재 쿠버네티스 클라우드 파운더리는 CSI 를 탑재 하고 있습니다.

So here's what the CSI kind of looks like, it defines a set of RPC is remote procedure calls that will be called by the container orchestrator and these must be implemented by the storage drivers.
그래서 여기 보이는 CSI 종류들이 있습니다. RPC 세트의 정의는 Remote Procedure Calls 입니다. RPC 는 컨테이너 오케스트레이터에 의해 호출 됩니다. 그리고 스토리지 드라이버에 의해 구현되어져야 합니다.

[RPC 는 스토리지 드라이버가 만들어 내는 것]
----------------[CSI 의 기능]----------------
For example, CSI says that when a pod is created and requires a volume, the container orchestrator in this case, kubernetes, should call the create volume RPC and pass a set of details such as the volume name.
예를 들어 CSI는 POD 가 생성되고 볼륨을 요청 할때, 컨테이너 오케스트레이터(쿠버네티스)는 RPC볼륨을 생성 합니다. 그리고 볼륨 네임같은 상세 정보를 전달 합니다.

The storage driver should implement this RPC and handle that request and provision a new volume on the storage area and return the results of the operation.
스토리지 드라이버는 이 RPC(Remote Procedure Calls 원격 프로시져 호출) 를 구현 합니다. 그리고 요청을 핸들링 합니다. 그리고 저장영역에 새로운 볼륨을 프로비저닝 합니다. 그리고 오퍼레이션의 결과를 리턴 합니다.

Similarly, Container Orchestrator should call the delete volume RPC when a volume is to be deleted
비슷하게 컨테이너 오케스트레이터는 RPC에 볼륨 삭제를 호출 합니다. 볼륨이 삭제 되었을때.

and the storage driver should implement the code to decommission the volume from the array when that call is made.
그리고 스토리지 드라이버는 호출이 만들어 졌을때 배열을 통해 볼륨해제 코드를 구현 합니다.

And the specification details exactly what parameters should be sent by the color, what should be received by the solution and what error codes should be exchanged.
그리고 사양에은 색상으로 전송되어야 하는 파아미터가 무엇인지, 솔루션으로 수신 받아야 하는 것은 무엇인지 교환되어야 할 에러 코드는 무엇인지 정확히 설명되어 있습니다.

If you're interested, you can review all these details in the CSI specification on GitHub at this URL.
해당 내용에 흥미가 있다면 CSI 특징 on GitHub URL 을 통해 보실 수 있습니다.

So that's about it for now, about container storage interface.

I'll see you in the next lecture.