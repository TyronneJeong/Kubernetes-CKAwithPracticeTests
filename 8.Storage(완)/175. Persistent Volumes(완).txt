------------------------------------------------------------------
[pod-definition.yaml]
apiVersion: v1
kind: PersistentVolume
metadata:
	name: pv-voll
spec:
	accessModes:
		- ReadWriteOnce
	capacity:
		storage: 1Gi
	hostPath:
		path: /tmp/data
	또는
	awsElasticBlockStore:
		volumeID: <volume-id>
		fsType: ext4
------------------------------------------------------------------
>> kubectl create -f pv-definition.yaml
>> kubectl get persistentvolume
------------------------------------------------------------------

Hello and welcome to this lecture on persistent volumes.

My name is Mumshad Mannambeth 

in the last lecture. We learned about volumes.
지난 강의엥서 우리는 볼륨에 대해 배웠습니다.

Now we will discuss Persistent Volumes in Kubernetes. 
이제 우리는 영구 볼륨에 대해 논의할 것입니다.

When we created volumes in the previous section
이전 강의에서 우리가 볼륨을 생성 했을때,

We configured volumes within the pod definition file 
우리는 볼륨을 pod 정의파일에 구성했습니다.

so every configuration information required to configure storage for the volume goes within the pod definition file.
때문에 스토리지를 구성하기 위해 요청된 모든 설정 정보는 pod 정의파일에 가게 되었습니다.

Now when you have a large environment with a lot of users deploying a lot of pods 
당신이 많은 사용자들이 많은 POD 들을 배포하는 큰 환경을 가지고 있다면

the users would have to configure storage every time for each pod.
유저들은 각 POD 에서 매번 스토리지를 구성 해야만 합니다.

(Whatever storage solution is used:어떤솔루션을 사용하건)
Whatever storage solution is used the users who deploys the pods would have to configure that on all pod definition files in his own environment 
스토리지 솔루션을 사용하건, POD 를 배포하는 사용자는 사용자 소유 환경의 모든 POD 정의파일을 구성 해야만 합니다.

every time it changes to be made.
매번 해당 정보가 매번 변경될 때마다.

The user would have to make them on all of his pods.
사용자는 모든 노드가 해당 정보를 반영토록 해야 합니다.

Instead you would like to manage storage more centrally.
대신에 스토리지를 보다 중앙집권적으로 관리할 수 있습니다.

You would like it to be configured in a way that an administrator can create a large pool of storage
당신은 다음과 같은 방식으로 구성 되기를 원합니다. 관리자는 커다란 저장소 풀을 생성 할 수 있습니다.

and then have users carve out pieces from it has required.
그리곤 사용자가 필요한 조각을 조각하도록 합니다.

That is where persistent volumes can help us.
이것은 영구볼륨이 우리를 돕기위한 부분입니다.

A persistent volume is a cluster wide pool of storage volumes configured by an administrator to be used by users deploying applications on the Cluster.
영구 볼륨은 스토리지 볼륨의 클러스터 와이드 풀 입니다. 관리자가 유저들이 클러스터내 어플리케이션에 배포를 배포를 하기 위해 사용되어지는 스토리지 볼륨 설정입니다.

(claims:주자아핟, 요구하다, 요구할 권리, 배상청구)
The users can now select storage from this pool using persistent volume claims.
사용자는 이제 이 풀의 스토리지를 선택 할 수 있습니다. 영구볼륨클레임을 이용하여서요.

let us now create a persistent volume.
이제 영구 볼륨을 생성해 봅시다.

We start with the base template and update the API version set the kind to PersistentVolume and name it pv-vol1 under the specs section specify the access modes.
우리는 기본 템플릿으로 시작 했습니다. 그리고 API 버전을 업데이트 합니다. KIND 는 PersistenctVolume 으로 그리고 이름은 pv-roll 이라고 합니다. SPEC 섹션 아래에서 엑세스 모드를 지정 합니다.

access mode defines how a volume should be mounted on the hosts whether in a read only mode or read write mode etc. 
엑세스 모드는 어떻게 볼륨이 마운팅 되는지를 정의합니다. 읽기 전용 인지, 읽고 쓰기인지 아니면 기타등등으로

The supported values are ReadOnlyMany, ReadWriteOnes or ReadWriteMany 
지원되는 값은 [ReadOnlyMany] [ReadWriteOnes] [ReadWriteMany] 입니다.
------------------------------------------------------------------
[pod-definition.yaml]
apiVersion: v1
kind: PersistentVolume
metadata:
	name: pv-voll
spec:
	accessModes:
		- ReadWriteOnce
	capacity:
		storage: 1Gi
	hostPath:
		path: /tmp/data
	또는
	awsElasticBlockStore:
		volumeID: <volume-id>
		fsType: ext4
------------------------------------------------------------------
next is the capacity specify the amount of storage to be reserved
다음으로는 능력 입니다. 얼마나 많은 량의 스토리지를 예약할 수 있는지를 지정 합니다.

for this persistent volume which is set to 1 GB here.
영구볼륨의 경우 1GB로 설정 합니다.

Next comes the volume type.
다음으로는 볼륨 타입입니다.

We will start with the host path option that uses storage from the nodes local directory.
우리는 호스트 path 옵션으로 시작 할 것입니다. 이 옵션은 노드의 로컬 디렉토리로부터 스토리지를 사용하는 것 입니다.

Remember this option is not to be used in a production environment.
기억하세요. 이 옵션은 실제 운영환경에서는 사용되지 않습니다.

To create the volume run kubectrl Create command and to list the created volume Run the kubectrl get persistent in volume command 
볼륨을 생성하는 것은 kubectl create 명령을 실행하여 생성합니다. 그리고 생성된 볼륨을 나열 하기 위해서는 아래 명령을 호출 합니다.

>> kubectl create -f pv-definition.yaml
>> kubectl get persistentvolume

replace the host Path option with one of the supported storage solutions as we saw in the previous lecture like AWS elastic blocks store etc 
hostPath 옵션을 하나이상의 지원되는 스토리지 솔루션으로 겨체 합니다. 이전 강의에서 우리가 보았던 AWS 엘라스팃 블록 스토어나 기타등등으로.

well that's it on persistent volumes In this lecture.

in the next lecture we will look at how we use persistent volume claims 

to claim the volume configured with persistent volumes.