In this lecture, we will look at storage classes.
이번 강의에서 우리는 스토리지 클래스에 대해 살펴 보겠습니다.

In the previous lectures we discussed about how to create PVs and then create PVCs to claim that storage and then use the PVCs in the POD definition files as volumes.
이전 강의에서 우리는 PV를 만드는 방법과 PV에 클레임 하기 위한 PVC 생성에 관해 논의했습니다. 그러 다음 POD 파일에 PV를 볼륨으로 정의하여 사용하는 방법에 대해서도 논의했습니다.

In this case, we create a PVC from a Google Cloud persistent disk.
이번 강의에서 우리는 구글 클라우드 영구 디스크에 PVC를 만들것입니다.

The problem here is that before this PV is created, you must have created the disk on Google Cloud.
문제는 이것 입니다. PV를 생성 하기 이전에. 구글 클라우스에 디스크를 만들어야 하는 것 입니다.

Every time an application requires storage, you have to first manually provisioned the disk on Google Cloud and then manually create a persistent volume definition file using the same name as that of the disk that you created.
어플리케이션에 스토리지가 필요 할때마다, 당신은 수동으로 구글 클라우드의 디스크를 프로비저닐 시켜야 합니다. 그런 다음으로 당신이 만든 디스크와 똑같은 이름으로 만든 파일을 이용하여 수동으로 영구 볼륨 정의파일을 생성해야 합니다.

That's called static provisioning volumes.
이것을 정적 프로비저닝 볼륨이라고 합니다.

It would have been nice if the volume gets provisioned automatically when the application requires it,
어플리케이션이 요구할 때 볼륨이 자동으로 프로비저닝 되면 좋았을 것입니다.

and that's where storage classes come in.
그리고 여기서 스토리지 클래스가 들어올 장소입니다.

With storage classes, you can define a provisioner such as Google storage that can automatically provision storage on Google Cloud and attach that to parts when a claim is made.
스토리지 클래스를 이용하면, 구글 스토리지 같은 프로비저닝을 정의할 수 있습니다. 그 프로비져널들은 구글 클라우드 스토리지에 자동으로 프로비져닐 할 수 있습니다. 그리고 클레임이 만들어 질때 파트로 첨부 할 수 있습니다.

That's called dynamic provisioning volumes.
이것을 다이나밋 프로비저닝 볼륨이라고 합니다.

----------------------------------------------------------------------------
[스태틱 프로비저닝] [다이나믹 프로비저닝]
----------------------------------------------------------------------------
You do that by creating a storage class object with the API version set to storage.k8s.io/v1, specify a name and use provisioner as kubernetes.io/gce-pd
스토리지 클래스 오브젝트를 생성해서 이것을 합니다. API 버전은 storage.k8s.io/v1 으로, 네임을 지정하고 provisioner 를 사용합니다. kubernetes.io/gce-pd 로

----------------------------------------------------------------------------
[sc-definition.yaml] -- StorageClass
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
	name: google-storage
provisioner: kubernetes.io/gce-pd
----------------------------------------------------------------------------

So going back to our original state where we have a pod using a pvc for its storage and the pvc is bound to a PV, 
그럼 오리지널 상태로 돌아가 봅시다. 우리가 PVC 를 사용하고 PVC 가 PV 에 바인딩 되던.

we now have a storage class.
우리는 지금 스토리지 클래스를 가지고 있습니다.

So we no longer need the PV definition because the PV and any associated storage is going to be created automatically when the storage class is created.
그래서 더이상 PV 정의가 필요없습니다. 왜냐하면 PV 와 모든 연결된 스토리지는 스토리지 클래스가 생성되면서 부터 자동으로 생성되기 때문입니다. 

For the PVC to use the storage class we defined, we specify the storage class name in the PVC definition.
스토리지 클래스를 사용하기 위한 PVC는 우리가 정의했씁니다. 우리는 특정 스토리지 클래스를 정의합니다. PVC 정의파일에.

That's how the PVC knows which storage class to use 
이것이 어떻게PVC가 어떤 스토리지 클래스를 쓰는지 아는 방법입니다.

next time a PVCs created, the storage class associated with it, uses the defined provisioner to provision a new disk with the required size on GCP 
다음 시간에 PVC 생성되면, 스토리지 클래스를 여기에 엮고, 요청된 크기의 디스크를 프로비저닝 할 제공자를 정의하는데 사용합니다.

and then creates a persistent volume and then binds the PVC to that volume.
그런 다음 영구 볼륨을 생성 합니다. 그리고 PVC를 볼륨에 바인딩 합니다.

So remember that it still creates a PV.
기억하세요. 스토리지 클래스는 여전히 PV를 생성 합니다.

It's just that you don't have to manually create PV anymore.
스토리지 클래스틑 단지 당신이 PV를 더이상 수동으로 만들 필요가 없게 만들어 줍니다.

It's created automatically by the storage class.
PV는 스토리지 클래스에 의해 자동으로 생성 됩니다.

We used the GCE provision are to create a volume on GCP, there are many other provisions as well,
우리가 사용한 GCE 프로비젼은 GCP에 볼륨을 생성 합니다. 다른 많은 프로비져닝 툴도 마찬가지입니다.

such as AWS EBS, Azure file, Azure disk, cephFS, 포드? works, ScaleIO and so on.
등등등이요.

With each of these provisioners, you can pass in additional parameters, such as the type of disk to provision, the replication type, etc., 
이 각 제공자들을 이용할 경우, 당신은 추가적인 파라미터를 전달 할 수 있습니다. 프로비저닝 할 디스크 유형이라던가. 복제 타입. 기타 등등

these parameters are very specific to the provision that you are using for Google Persist Disk.
이런 파라미터들은 당신이 구글 영구 디스크를 사용하는 것등의 프로비저닝 하는 것에 아주 구체적입니다. 

You can specify the type which could be standard or SSD.
당신은 타입을 지정 할 수 있습니다. 스탠다드 / SSD

You can specify the replication mode which could be none original PD.
당신은 복제 모드를 지정 할 수 있습니다. NONE / ORIGINAL-PD

So you see, you can create different storage classes, each using different types of disks, for example,
지금 보이듯이. 당신은 다른 종류의 스토리지 클래스를 생성할 수 있습니다. 각각 다른 유형의 디스크를 사용할수 있습니다. 예를 들어.

a silver storage class with the standard disks, a gold class with SSD drives, and a platinum class with SSD drives and replication.
실버 스토리지 클래스 스탠다드 디스크, 골드 클래스 SSD 드라이버 그리고 플래티넘 클래스 SSD 드라이버 그리고 레플리케이션 식으로. 

And that's why it's called storage class.
그리고 이것이 스토리지 클래스라 불리는 이유 입니다.

You can create different classes of service. 
당신은 서비스 클래스를 다르게 생성 할 수 있씁니다.

next time you create a PVC, you can simply specify the class of storage you need for your volumes.
다음 시간에 PVC를 생성 합니다. 그리고 당신의 볼륨에 필요한 스토리지 클래스를 정의할 수 있습니다.