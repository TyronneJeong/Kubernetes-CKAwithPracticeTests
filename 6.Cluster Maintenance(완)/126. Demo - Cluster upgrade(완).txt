--------------------------------------------------
[Master Node]
최신 업그레이드 가능 버전 리스트업
>> kubeadm version --short
>> kubeadm upgrade plan

1. pod drain 하기
>> kubectl drain controlplane --ignore-daemonsets

2. apt 업그레이드 하기
>> apt update

3-1. kubeadm 업데이트 가능 버전 목록 보기
>> apt-cache madison kubeadm

3-2. kubeadm 버전 업데이트
>> apt install kubeadm=1.20.0-00

>> apt-mark unhold kubeadm && \
>> apt-get update && apt-get install -y kubeadm-1.19.x-00 && \
>> apt-mark hold kubeadm

4. kubeadm 버전 적용 (마스터만 가능)
>> kubeadm upgrade apply v1.20.0

5. kubelet 업그레이드 또는 설치
>> apt install kubelet=1.20.0-00
>> apt-get upgrade kubelet
>> apt-get upgrade kubelet=1.20.0.-00
>>>> kubelet --version

6. 언스케쥴 풀도 언코든 하기
>> sudo systemctl daemon-reload
>> sudo systemctl restart kubelet

[Worker Node]
3-2. kubeadm 버전 업데이트
>> apt install kubeadm=1.20.0-00

>> kubeadm upgrade 안해봄.

5. kubelet 업그레이드 또는 설치
>> apt install kubelet=1.20.0-00
>> sudo systemctl restart kubelet
--------------------------------------------------




In this video, 

I will demonstrate upgrading a kubernetes cluster deployed using kubeadm, 
이 비디로 에서는 kubeadm 을 이용하여 배포된 쿠버네티스 클러스터를 업그레이드 하는 방법을 시연 하겠습니다.

(prerequisite:전제조건)
so for this as a prerequisite, you need a kubernetes deployed using the kubeadm tool and it could be a local set up on your laptop or one on the cloud, or you could be using our labs.
그럼 이것들을 전제조건으로 합니다. 당신은 kubeadm 도구를 사용하여 쿠버네티스를 배포할 필요가 있습니다. 그리고 로컬 렙탑 또는 클라우드에 셋업이 되어 있습니다. 또는 이 데모의 랩을 이용하여 할수도 있습니다.

in this demo I happen to be using a cluster from the Katacoda playground here.
나는 여기 Katacoda 놀이터라는 곳에서 클러스터를 사용하고 있습니다.

So if you just go to Katacoda Answers for kubernetes playground you can instantly open up a lab session.
그래서 만약 당신이 저기 Katacoda Answers 에 가시면 랩 세션에 참여 할 수 있습니다.

a playground which has a master and a worker node, and it's just very easy to practice cluster upgrades.
마스터와 워커 노드가 있는 플레이 그라운드가 있습니다. 그리고 이건 클러스터 업그레이드를 연습하기 아주 쉽습니다.

So on the right here, I have a kubernetes cluster, um, terminal to kubernetes cluster on Katacoda with a master and worker node.
그럼 바로 여기, 쿠버네티스 클러스터가 있습니다. 그리고 마스터와 워커 노드가 있는 Katacoda 클러스터에 터미널을 연결합니다.

The master node, which is the control plane is at the top and the worker node is the terminal. to the worker node below.
컨트롤 플레인이 있는 마스터 노드응 위에
그리고 워커 노드는 터미널입니다. 아래 워커 노드로 가는.

and on the left here I have the kubernetes documentation pages open.
그리고 왼쪽에는 쿠버네티스 도큐멘테이션 페이지가 열려 있습니다.

(if you are not sure:잘 모르겠다면)
Now, if you are not sure how to find this page, just search for kubeadm upgrade in the search bar And the first link is what you are looking for.
만약 이 페이지를 찾는 방법을 잘 모르겠다면. kubeadm upgrade 를 검색 바에서 찾아라. 그리고 첫번째 링크가 당신이 찾는 것입니다.

And by default, it opens the page with the latest instructions on upgrading, which as of now is from 1.19 to one to 1.20.
그리고 기본적으로 현재 1.19에서 1.20으로 업그레이드하는 대한 가장최근 지침으로 나옵니다.

And my cluster is that 1.18.
그리고 저의 클러스터는 현재 1.18

[단계별로 업그레이드 해야 한다.]

So I will choose the instructions for upgrading from one of 1.18 to 1.19 by clicking this link.
그래서 저는 1.18에서 1.19으로 업그레이드 하는 지침을 선택 할 겁니다.

(relevant:관련있는)
So choose the relevant documentation page depending on your requirements.
그럼 당신의 요청에 따른 관련 페이지를 골라 보세요.

Now, once the environment is loaded, I run the launch "launch.sh" script to wait for the cluster to be ready.
이제 환경이 불려졌습니다. 저는 클러스터가 ready 가 될때까지 기다리기 위해 launch.sh 를 실행합니다.

But remember that this is only applicable to a Katacoda, so you might not need this in your if you're using it in another environment.
하지만 이것이 카타코다에서만 적용된다는 것을 기억하세요. 따라서 다른 환경에서 사용하는 경우 이것이 필요하지 않을수도 있습니다.

(프로비저닝:사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해두었다가 필요시 제공하는 서비스.)
(particular:특정)
So this particular step is only relevant to, uh, environments provisioned with Katacoda.
따라서 이 특정 단계는 카타코다로 프로비저닝 된 환경에만 관련이 있습니다.

And so it just waits.
그럼 기다립니다.

It just launch upgrade.sh a cluster and wait for it to come up.
클러스터를 시작하고 올릴때 까지 기다립니다.

So you make sure the cluster is ready and by running the kubectl get nodes command, it shows the control plane is not ready.
당신은 클러스터를 준비상태로 만들수 있고, kubectl get nodes 명령어에 의해. 컨트롤 플레인이 아직 준비가 안됐다는 것이 보입니다.

So let's just wait for it to be ready.
그래서 준비 상태가 될때까지 기다립시다.

And it doesn't even show the node right now.
그리고 지금은 node 로 나오고 있지 않습니다.

So we'll just wait for the the control plane and the node to be in ready state. 
그렇기 때문에 우리는 컨트롤 플레인과 노드가 ready 상태가 될때까지 기다릴 것입니다.

so we could use the watch command with the "kubectl get node" command to wait for both nodes to be ready.
그래서 우리는 확인 명령을 사용할 수 있습니다. kubectl get nodes 명령으로 두 노드가 준비상태가 될떄까지 기다립니다.

So in this setup, I have a single control plane and a single worker node.
이 과정중 저에게는 하나의 싱글 컨트롤 플레인과 싱글 워커 노드가 생깁니다.

OK, so now both nodes are ready.
좋습니다. 지금 두개의 노드가 준비되었습니다.

And you could run any KubeAdam command to verify that kubeadm is installed and that the cluster was set up using kubeadm.
그리고 어떤 종류건 Kubeadm 명령을 이용하여 확인하는 것이 가능합니다. 이 클러스터에 kubeadm 이 설치되었는지, 클러스터가 kubeadm 을 이용하여 설정되었는지.

So I run the kubeadm token list command and it shows a token, so that kind of shows that it used that token to set up the cluster
>> kubeadm token list
명령을 실행하면 이 명령은 클러스터를 셋업 할때 사용되어 진 토큰의 종류를 보여줍니다.

and you could also run the kubectl get pods command with the -a option to list all the pods including those in the kube system namespace.
그리고 또한 kubectl get pods -a 명령어를 통해서 kube-system 네임스페이스에 포함되어있는 모든 POD 들의 목록을 보여줍니다.

And we see that there is the core DNS, the ETCD control plane, and the networking solution is flannel.
그리고 CoreDNS, ETCD 컨트롤 플레인과 네트워킹 솔루션 flannel을 볼 수 있씁니다.

(stick:고수하다)
In this demo, we're going to stick to just upgrading the  capabilities components only and we will not upgrade it Flannel networking solution.
이번 데모에서는 기능 구성요소만 업그레이드 할 것으로 네트워킹 솔루션은 업그레이드 하지 않을 것입니다.

So there are separate instructions for upgrading those.
이건 대상들을 업그레이드 하기 위해서 다른 분리된 지침이 있습니다.

We will just stick to upgrading the control plane as well as the worker nodes.
우리는 컨트롤 플레인과 워커 노드만 업그레이드 하기로 합니다.

So run the kubectl get nodes command to verify the current version of the cluster, 
그럼 kubectl get nodes 명령을 실행하여 현재의 클러스터 버전을 확인합니다.

so it shows as version 1.18.0

But remember that this is a version of the kubelet that running on the node.
하지만 기억하세요. 저것은 노드에서 활동중인 큐블렛의 버전 정보 입니다.

The kubeadm tool will help us see the exact version of all the different components when we run the the plan command.
kubeadm 도구는 plan 명령을 실행 할 때 마다 모든 다른 컴포넌트들의 버전을 확인하는데 도움이 됩니다.
>> kubeadm plan

So in the documentation page here on the left, 
그럼 왼쪽에 있는 도큐멘테이션 페이지에서

(determine:결정하다)
the first step is to determine which version that is it that you want to upgrade to.
첫번째 스텝은 업그레이드 하려는 버전을 결정하는 것입니다.

(exact:정확한)
We know that is 1.19, but we don't know exactly the exact version within 1.19.
우리는 그 버전이 1.19라는걸 압니다. 하지만 1.19안에 정확한 버전 정보는 모릅니다.

So for this, we must run these commands.
이런 경우에 우리는 이 명령어를 실행해야 합니다.

And before you do that, if you are not sure which operating system you're on, 
그리고 그 행동을 하기 전에, 당신이 어떤 종류의 운영체젱 있는지 확실지 않다면

>> cat /etc/*release*

you could run the "cat /etc/*release*" command and it list the contents of the release file.
해당 명령어를 실행하세요. 릴리즈 파일의 컨텐츠를 나열 할 것입니다.

And you will see that in this case it is Ubuntu.
그리고 이번 케이스의 경우 우분투 인것을 확인 할 수 있습니다.

So we'll stick to the Ubuntu commands throughout this demo
그래서 우리는 이 데모를 통틀어 우분투 커맨드를 계속 사용할 것입니다.


>> apt update
>> apt-cache madison kubeadm
>> [업그레이드 가능한 kubeadm 버전 목록으 출력됨]
we run the app commands listed here to see the different versions available for upgrade.
우리는 app 명령어를 실행했습니다. 나열된 것은 업그레이드 가능한 다른 버전들입니다.

So since we are upgrading to 1.19, 
따라서 1.19로 업그레이드 하므로

we will choose one that 1.19.6 version, which happens to be the latest in 1.19
우리는 1.19의 가장 최신 버전인 1.19.6 버전을 선택 할 겁니다.

So just node that down.
그리고 노드를 내립니다.

(cuddle:껴안다)
So the high level process is to upgrade the control plane node and then the upgrade kubelet and you cuddle on those nodes and then upgrade worker nodes.
따라서 하이레벨 프로세스는 컨트롤 플레인 노드를 업그레이드 하는 것입니다. 그런 다음 큐블릿을 업그레이드 합니다. 그리고 해당 노드를 껴안고 워커 노드를 업그레이드 합니다.

1. 컨트롤 플레인 노드
2. 큐블릿
3. 워커 노드

(certain:특정)
So we will follow this procedure, but if you only want to upgrade certain pods, such as the worker node alone, then you can skip this initial section where which is used for upgrading the control plane.
그래서 우린 다음 절차를 따라갈 것입니다. 하지만 당신이 워커 노드만 단독으로 특정 POD만 업그레이드 하고 싶은 경우, 이니셜로 된 섹션은 컨트롤 플레인 업그레이드에서 모두 스킵 할 수 있습니다.

Or if you just want to upgrade the control plane and skip the worker node section, you could do that as well.
또는 워커 노드 섹션을 제외하고 오직 컨트롤 플레인만 업그레이드 하길 원하는 경우라면 마찬 가지로 스킵 할 수 있습니다.

So just so feel free to choose the section that you want that you really want to do.
그러니 마음을 편하게 생각하고 선택하세요. 정말로 원하는 것을 선택하세요.

(proceed:진행하다)
So let's first proceed with upgrading the control plane, 
그럼, 첫번째 컨트롤 플렌의 업그레이드를 진행해 봅시다.
---------------------------------------------------------------

so the first step is to upgrade kubeadm itself on the control plane.
첫번째 스탭은 컨트롤 플레인에 kubeadm 자체를 업그레이드 하는 것입니다.

And for this, we run this set of commands to update and install new versions of kubeadm for our target version, which happens to be 1.19.6.
그리고 이를 위해 우리는 해당 명령어 세트를 실행해야 합니다. 그리고 우리의 대상이 되는 1.19.6 새버전의 kubeadm 을 설치합니다.

So I will copy to a notepad and I just change the version in the command and will execute the command in the terminal.
그래서 저는 이걸 메모장에 복사해두고 명렁어의 버전 부분을 변경할 겁니다. 그리고 터미널에서 해당 명령을 실행 할 겁니다.

We'll wait for that update to finish.
해당 업데이트가 완료 될떄까지 기다립니다.

So the update is finished and now we verify the version of kubeadm, I'm using the kubeadm version command
업데이트가 완료되고 kubeadm 버전을 확인 하기 위해 kubeadm version 커맨드를 입력합니다.
>> kubeadm version

and it seems to be upgraded successfully to 1.19.6
그리고 업그레이드는 1.19.6으로 성공적으로 완료된것 같습니다.

Next, we look at our upgrade plan, the man running the kubeadm  upgrade plan command.
다음으로, 업그레이드 플랜을 살펴 볼 것입니다.

[업그레이드 해야하는 대상목록을 보여줌]
>> sudo kubeadm upgrade plan

It lists the current version of components which are at 1.18.0
이 명령은 1.18로 된 현재 버전의 컴포넌트들을 나열합니다.

and the available versions to upgrade to which is 1.19.6 as desired.
그리고 1.19.6으로 업그레이드 가능 한 목록을 나열합니다.

The next step is to run the "kubeadm upgrade apply" command to upgrade to version 1.19.6
다음으로는 1.19.6으로 업그레이드 하기 위해 kubeadm upgrade apply 명령을 실행하는 것입니다.

So for this, we run the command and then confirm on the prompt.
이를 위해 우리는 커맨드를 실행하고 프롬프트를 확인 합니다.

Now this might take a few minutes, so let's just wait for it to complete, 
이건 수분 가량 걸릴것입니다. 그러니 완료될떄까지 기다립니다.

because this is when it's actually performing the upgrade.
왜냐하면 이것이 실제 업그레이드 하는 작업중이기 때문입니다.

Once completed, we see the message that the cluster was upgraded to 1.19.6 successfully 
완료되면 클러스터가 1.19.6으로 성공적으로 업그레이드 되었다는 메세지를 볼 수 있습니다.

to verify if you run the "kubeadm upgrade plan" command again that we see that there are no more upgrade recommendations.
확인하기 위해 kubeadm upgrade plan 명령을 다시한번 실행해 봅니다.
이 명령으로 더이상 업그레이드 추천하는 목록이 없는걸 확인 하실 수 있습니다.

>> kubeadm upgrade plan

So that confirms that all the components have been upgraded successfully.
이걸로 모든 컴포넌트들의 업그레이드가 성공적으로 완성된것을 확인했습니다.

If you run the "kubectl get nodes" command, now we will see the version to be 1.19.0 Still
kubectl get nodes 명령을 실행해 보면, 1.19.0으로 여전히 보이는걸 확인할 수 있습니다.

this is because what you see here is a version of Kubelet and Kubeadm upgrade Command does not upgrade to Kubelet.
이 이유는 지금 보시는 것이 큐블렛의 버전이기 때문입니다. 그리고 kubeadm upgrade 명령은 큐블렛을 업그레이드 하지는 않습니다.

[kubeadm]
- kubeadm 최신 버전으로 업데이트
- 컨트롤 플레인 컴포넌츠 버전을 특정 버전으로 업데이트
- 워커 노드 업데이트
- 큐블릿 업데이트(수동)

So that's the next step.
이제 다음 단계입니다.

(since:때문에)
Now, since Kueblet is responsible for running pods, we must drain the node before upgrading kubelet.
지금 큐블릿이 POD 를 담당하기 때문에, 큐블렛을 업그레이드 하기 이전에 node를 드레인 시켜야 합니다.

So we run the kubectl drain command to drain the control node, and once done, we proceed with the upgrade commands to upgrade kubelet and the kubectl utility itself.
컨트롤 노드를 드레인 시키기 위해 kubectl drain 명령을 실행했씁니다. 그리고 이것이 완료되면, 큐블렛과 kubectl 유틸리 자체를 업그레이드 하기 위해 업그레이드 명령을 진행 합니다.

>> kubectl drain <nodename>

(So as before:그래서 이전과 같이)
So as before, I copy to a text file the commands and we change the versions to 1.19.6 and then we execute the commands.
텍스트 파일을 복사하고 버전 정보를 1.19.6으로 바꾸고 이것을 실행하면.

Once done, reload the daemon and restart kubelet.
완료가 됩니다. 데몬과 큐블렛을 다시 로드 합니다.

>> sudo systemctl daemon-reload

When we run the "kubectl get nodes" command, we see the control plane is now upgraded to 1.19.6
kubectl get nodes 명령을 실행 할때. 이제 컨트롤 플레인 버전이 1.19.6으로 업그레이드 된걸 볼 수 있습니다.

that the status is "scheduleIndisabled."
마스터 노드의 상태가 스케쥴 불가 입니다.

Now, this is because we drained the node earlier, so we must now uncordon.
해당 상태의 이유는 이전에 node 를 모두 드레인 시켰기 때문입니다. 그래서 이제 다시 uncordon 시켜줘야만 합니다.

>> kubectl uncordon controlplane

And that's what we will do now for this.
이것이 우리가 지금 해야 할 것입니다.

We run the kubectl uncordon command.

We verified the status again, and we see that the node is now ready.
그리고 상태를 다시 확인합니다. 그리고 NODE 가 이제 준비상태인걸 확인합니다.

So we have successfully upgraded the master node.
이렇게 마스터 노드를 성공적으로 업그레이드 했습니다.

Now, the next step is to upgrade the worker nodes.
이제 다음으로 워커 노트를 업그레이드 할 차례입니다.

Now, as before, the first step is to upgrade kubeadm on the worker nodes.
이전과 같이 첫번째는 워커노드의 kubeadm 을 업그레이드 하는 것입니다.

So we run the apt-install commands to upgrade kubeadm to the target version and node that this is to be done on the worker node and that is to be updated.
그리고 apt install 명령을 이용해 kubeadm 을 원하는 버전으로 업그레이드 합니다. 해당 작업이 노드에 완료 되면 업데이트가 완료 된 것입니다.

>> apt-mark unhold kubeadm && \
>> apt-get update && apt-get install -y kubeadm-1.19.x-00 && \
>> apt-mark hold kubeadm


So most of course, most of the commands.

To upgrade worker nodes are done on the worker nodes except the kubectl related command.
kubectl 과 관련된 명령을 제외하고 워커 노드를 업그레이드 하는 것이 완료되었습니다.


----------------------------------------------------
I'll point that out when we reach to that point, but make sure that you are on the appropriate node and when you're running the respective commands.
----------------------------------------------------??

So now that is done, the next step is to upgrade kubelet configuration.
이제 다 되었습ㄴ다. 다음 스탭은 큐블렛 설정을 업그레이드 하는 것입니다.

We run the command to upgrade that configuration, and once done, the next step is to drain the node
우리는 설정을 업그레이드 하기 위해 아래 명령을 실행 합니다. 그리고 완료가 되면 node 를 드레인 시킵니다.

>> sudo kubeadm upgrade node

and this is where a lot of people make mistake.
그리고 이부분은 많은 사람들이 실수 하는 곳입니다.

The drain command is to be run on the control node 
드레인 명령은 컨트롤 노드에서 실행이 됩니다.

because it's a kubectl command.
왜냐하면 이건 kubectl 명령 이기 때문입니다.

If you run it on a worker node, you will get an error like this.
만약 워커 노드에서 이 명령을 실행하면 이 처럼 에러가 발생합니다.

So remember to run it on the control plane node 
그러니 마스터 노드에서 실행한다는 걸 기억하세요.

most of the commands, as I just said, for upgrade,
방금 말한 업그레이드를 위한 대부분의 명령

upgrading or working out a run on the work node, except for the kubectl commands.
워커노드에서 업그레이드 중이거나 작업중인 

to drain and cordon and those are done to be done on the control plane node.
drain 이나 cordon 그리고 저런 명령들은 컨트롤 플레인 노드에서만 실행됩니다.

So once done, the next step is to upgrade.
그래서 해당 작업이 완료되면 다음 스텝은 업그레이드 입니다.

And for this, we run the install commands with the target versions of these packages.
이를 위해 인스톨 명령을 수행해 줍니다.

>> sudo systemctl daemon-reload
>> sudo systemctl restart kublet

And once that is completed, we reload daemon and restart kubelet.
그리고 이 작업이 완료되면, 데몬을 다시 로드하고 큐블릿을 재시작 합니다.

running the kubectl get nodes command.
kubectl get nods 를 실행해보면

confirms the upgrade is successful on the worker node and scheduling is disabled as we haven't and couldn't yet.
워커 노드가 정상 적으로 업그레이드 되어 있고 스케쥴링이 비활성화 되어 있는것을 확인 할 수 있씁니다.

Uh, so let's do that.

And remember, this has to be done on the master node as well, and that's it.
그리고 기억하세요. 이 작업은 마스터 노드에서 수행되어 진다는 것을

We have now successfully completed the upgrade procedure.

Well, head over to the labs and try this for yourself.