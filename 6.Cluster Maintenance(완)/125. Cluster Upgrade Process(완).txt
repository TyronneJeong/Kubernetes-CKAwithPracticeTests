Hello and welcome to this lecture, in this lecture, we discuss about Closter upgrade process in Kubernetes
이번 강의에서는 클러스터 업그레이드 절차와 

In the previous lecture we saw how Kubernetes manages its software releases and how different components have their versions.
이전 강의에서 쿠버네티스가 소프트웨어를 릴리즈하는 방법과 얼마나 다른 버전의 컴포넌트들이 있는지에 대해 알아 보았씁니다.

(aside for now:제처두고)
We will keep dependency on external components like ETCD and CoreDNS aside for now and focus on the core control plane components.
우리는 계속해서 ETCD나 CoreDNS 같은 외부 컴포넌트 의존성 같은것은 제쳐두고 코어 컨트롤 플레인 컴포넌트들에 집중해 보겠습니다.

Is it mandatory for all of these to have the same version?
모두 동일한 버전을 가져야 하는것은 필수 사항 입니까?

No, the components can be at different release versions since the KubeAPI server is the primary component in the control plane
아닙니다. 큐브API서버가 컨트롤 플레인의 기본 컴포넌트가 된 이후로 컴포넌트들은 다른 버전이 될 수 있습니다.

and that is the component that all other components talk to.
그리고 그것이 이야기할 모든 컴포넌트 입니다.

None of the other components should ever be at a version higher than the Kube API server.
다른 컴포넌트들은 큐브 API 서버보다 높은 버전을 가질 수는 없습니다.

The controller manager and scheduler can be at one version lower
컨트롤러 매니저와 스케쥴러는 한 단계 낮은 버전을 가질 수 있습니다.

so If kube API server was at X 
큐브API 서버를 X라고 할때

controller managers and Kube schedulers can be at X minus one 
컨트롤러 매니저와 큐브 스케쥴러는 X-1 이 될수 있습니다.

and the kubelet and kube-proxy components can be at two versions lower, X minus two.
그리고 큐블렛과 큐브 프록시 컴포넌트는 X-2 버전이 될수 있습니다.

So if Kube API server was at one dot ten, 
그래서 큐브API서버는 1.10 이 됩니다.

then the controller manager and scheduler could be at one dot 10 or one dot nine 
그리고 컨트롤러 매니저와 스케쥴러는 1.10 또는 1.9이 됩니다.

and the kubelet and kube-proxy could be at one point eight.
그리고 큐블렛과 큐브 프록시는 1.8도 할 수 있습니다. (1.8,1.9,1.10)

None of them could be at a version higher than the Kube API server 1.11.
어느 누구도 KubeAPI서버보다 높은 버전을 가질수 없습니다. 1.11

Now this is not the case with kubectl.
이것은 kube컨트롤은 예외입니다.

The kubectl utility could be at 1.11 version higher than the API server 1.10, 
큐브 컨트롤러 유틸리는 1.11 버전을 할 수도 있습니다. API 서버 버전 1.10보다 높은

the same version as the API server or at 1.9 version lower than the API server.
그리고 서버와 같은 1.10, 그보다 낮은 1.9도


[kubectl 은 왜 가능 한지에 대한 설명은?]
[버저닝에 차이를 둔 이유는 라이브 업그레이드를 하기 위함이구나..]

Now, this permissable skew in versions allows us to carry out live upgrades.
이제 이런 허용가능한 버전 편차를 통해 우리는 라이브 업그레이드를 할 수 있습니다.

We can upgrade component by component if required.
우리는 컴포넌트 업그레이드를 필요하다면 컴포넌트로 할 수 있습니다.

So when should you upgrade?
그렇다면 언제 업그레이드 해야 할까요?

So you were at 1.10 and kubernetes releases versions 1.11 and 1.12 

at any time Kubernetes support only up to the recent three minor versions.
모든 시간에 쿠버네티스는 오직 최신의 3개의 마이너 버전만 지원합니다.

So with 1.12 being the latest release, kubernetes supports versions 1.12, 1.11 and 1.10.
그래서 1.12가 최근 버전이라면, 1.12, 1.11, 1.10까지만 쿠버네티스가 지원하게 됩니다.

So when 1.13 is released, only versions 1.13, 1.12 and 1.11 are supported 
그래서 1.13이 릴리즈 되면, 오직 1.13, 1.12, 1.11만 지원 가능 해집니다.

before the release of 1.13 would be a good time to upgrade your cluster to the next release.
1.13 이전의 버전은 업그레이드 하기에 좋은 때가 됩니다.

So how do we upgrade?
그럼 어떻게 업그레이드 할까요?

Do we upgrade directly from 1.10 to 1.13?
바로 1.10에서 1.13으로 업그레이드가 가능 한가요?

No, the recommended approach is to upgrade one minor version at a time.
권장방법은 한번에 한버전씩 업그레이드 하는 것이빈다.

version 1.10 to 1.11 and then 1.12 to 1.13.

The upgrade process depends on how your cluster is set up.
업그레이드 프로세스는 클러스터 셋업에 의존 적입니다.

For example, if your cluster is a managed kubernetes cluster deployed on cloud service providers like Google for instance
예를들어 만약 당신의 쿠버네티스 클러스터가 구글같은 클라우스 서비스 제공자에 의해 관리되어지고 있다면?

Google kubernetes engine lets you upgrade your cluster easily with just a few clicks.
구글 쿠버네티스 엔진은 몇번의 클릭만으로 손쉽게 클러스터를 업그레이드 할수 있게 할 겁니다.

If you deployed your cluster using tools like kubeadm, then the tool can help you plan and upgrade the cluster.
아니면 kubeadm 같은 도구를 이용하여 클러스터를 배포 하고자 한다면, 도구가 업그레이드를 도울 수 있습니다.

>> kubectl upgrade plan
>> kubectl upgrade apply

If you deployed your cluster from scratch, then you manually upgrade the different components of the cluster yourself.
만약 당신의 클러스터를 스크래치로 부터 배포 받았다면, 그땐 각 다른 컴포넌트들을 수동으로 업그레이드 해야 합니다.[비권장]

In this lecture, we will look at the options by KubeADM.
이번 강의에서는 KubeADM 을 통한 옵션을 알아볼 것 입니다.

So you have a cluster with master and worker nodes running in production, hosting pods, serving users.
당신은 마스터와 워커노드로 구성된 클러스터를 가지고 있습니다. 운영환경에서 동작중인, POD를 호스팅 하고 고객에 서비스를 제공중인.

The nodes and components are version 1.10
노드와 컴포넌트들은 버전 1.10 입니다.

Upgrading a cluster involves two major steps.
클러스터를 업그레이드 하는 두가지 단계로

First, you upgrade your master nodes and then upgrade the worker nodes while the master is being upgraded.
첫번째 마스터 노드를 업그레이드 한 다음 마스터 노드가 업그레이드 되는 동안 워커 노드를 업그레이드 합니다.

The control plane components such as the API server,Scheduler and controller managers go down briefly.
API서버, 스케쥴러, 컨트롤 매니저 같은 컨트롤 플레인 컴포넌트 들은 잠깐 내려 갑니다

the master going down does not mean work or nodes and applications on the cluster are impacted.
마스터 노드가 내려간다는건 워커노드와 어플리케이션에 영향이 간다는걸 의미하진 않습니다.

All workloads hosted on the worker nodes continue to serve users as normal.
모든 워크로드는 워커 노드에 의해 계속해서 호스팅 됩니다. 유저들이 정상적으로 서비스 받도록

Since the master is done, all management functions are done.
마스터 노드가 완료되면서 부터, 모든 관리 기능이 완료됩니다.

You cannot access the cluster using kubectl or other kubernetes API.
kubectl를 이용하거나 다른 쿠버네티스 API 통해 접근 할수 없게 됩니다.

You cannot deploy new applications or delete or modify existing ones.
기존에 존재하는 것의 새로운 어플리케이션 배포나 삭제 또는 수정이 불가능 해 집니다.

The controller managers don't function either.
또한 컨트롤러 매니저는 마찬가지로 기능하지 않습니다.

If a power was to fail, a new pod won't be automatically created.
파워가 차단되면, 새로운 POD 는 자동으로 생성되지 않습니다.

But as long as the nodes and the pods are up, 
노드와 POD 가 버젼업 되는것 만큼

your applications should be up and users will not be impacted.
당신의 어플리케이션도 버전엽 되어야 합니다. 그리고 사용자에게 영향이 가지 않아야 합니다.

Once the upgrade is complete and the cluster is back up, it should function normally.
업그레이드가 완성되고 클러스터가 백업 되면 이것들은 정상적으로 작동 해야 합니다.

We now have the master and the master components at version 1.11 and the worker nodes at version 1.10.

As we saw earlier, this is a supported configuration.
이전에 본것 처럼, 이것들은 지원되는 설정입니다.

Is now time to upgrade the worker nodes?
이제 워커 노드를 업그레이드 해야 하는 시간인가요.

There are different strategies available to upgrade the worker nodes.
여기에는 워커노드를 업그레이드 하기 위한 다른 전략이 이용가능 합니다.

One is to upgrade all of them at once, but then your pods are down and users are no longer able to access the applications.
첫번째는 모든것을 한번에 업그레이드 하는 것입니다. 하지만 그 경우 POD는 다운되고 유저는 어플리케이션에 접근 가능해 질때 까지 이용이 불가능 해집니다.

Once the upgrade is complete, the nodes are back up, new pods are scheduled and users can resume access.
하나의 업그레이드가 끝이나면, 노드는 백업 됩니다. 새로운 POD 는 스케쥴 되고 사용자는 이용가능해집니다.

That's one strategy that requires downtime.
첫번째 전략은 다운 타임이 필요합니다.

The second strategy is to upgrade one node at a time.
두번째 전략은 한번에 하나의 노드를 업그레이드 하는 것입니다.

So going back to the state where we have our master upgraded and node waiting to be upgraded, 
우리가 마스터 노드를 업그레이드 하고 노드들은 업그레이드를 기다리는 상황으로 돌아가겠습니다.

we first upgrade the first node where the workloads move to the second and third node and users are so far from there.
우리는 처음 첫번째 노드를 업그레이드 합니다. 워크로드가 두번째와 세번째 노드로 이동하고 유저또한 그곳으로 이동하고.

Once the first node is upgraded and back up with an update, the second node where the workloads move to the first and third node.
첫번째 노드가 업그레이드 되면 업그레이드를 포함하여 백업 합니다. 그리고 두번째 노드의 워크로드는 첫번째와 세번째 노드로 이동합니다.

And finally, the third node where the workloads are shared between the first two, until we have all nodes upgraded to a newer version
그리고 마지막으로 세번째 노드의 워크로드는 처음 두 노드에 공유 합니다. 우리 모든 노드가 새버전으로 업그레이드 되는 동안.

we then follow the same procedure to upgrade the nodes from 1.11 to 1.12 and then 1.12 to 1.13.
그런 다음 1.11->1.12->1.13 으로 동일한 절차를 반복합니다.

A third strategy would be to add new nodes to the cluster 
nodes with newer software version.
세번쨰 전략은 클러스터내에 새로운 버전이 담긴 노드를 추가하는 것입니다.

(convenient:편리하다)
This is especially convenient if you're on a cloud environment where you can easily provision new nodes and decommission old ones, 
세번째 방법은 특별히 편리합니다. 당신이 클라우드 환경일때 손쉽게 새 노드를 제공하고 권한을 회수할 수있게 할때.

nodes with the newer software version can be added to the cluster
새로운 버전의 노드 소프트웨어 버전이 클러스터레 추가 될 수 있습니다.

move the workload over to the new.
워크로드를 새로운 버전에 옮기고

And remove the old not.
이전 버전을 삭제 합니다.

[워크로드는 사용자에게 서비스를 제공하는 경로를 말하는 듯]

Until you finally have all new nodes with the new software version.
최종적으로 모든 노드에 새 버전의 소프트웨어가 설치되는 동안

Let us now see how it is done.
해당 작업이 어떻게 완료 되는지 지켜 봅시다.

so we were to upgrade this cluster from 1.11 to 1.13, 
이렇게 해당 클러스터를 1.11에서 1.13으로 업그레이드 했습니다.

Kubeadm has an upgrade command that helps in upgrading clusters with "Kubeadm upgrade plan" command,
kubeadm에는 클러스터를 업그레이하는데 도움이 되는 업그레이드 명령어가 있습니다.
>> kubradm upgrade plan

and it will give you a lot of good information.
kubeadm 명령은 많은 수릐 좋은 정보를 제공할 것입니다.

The current cluster version, the kubeadm tool version, the latestest stable version of kubernetes
현재 클러스터 버전, kubeadm 버전, 쿠버네티스 최정 안정 버전

Then it lists all the control plane components and their versions and what version these can be upgraded to.
컨틀로 플레인 컴포넌트와 그들의 버전 그리고 어떤 버전으로 업그레이드 가능 한지를 나열해 줍니다.

It also tells you that after we upgrade the control plane components, you must manually upgrade the Kubelet versions on each node.
그리고 이건 컨트롤 플레인 컴포넌츠 업그레이드 이후, 각각의 노드마다 꼭 수동 업그레이드 해야 하는 큐블렛 버전도 알려줍니다.

Remember, Kubeadm does not install or upgrade kubelet.
기억하세요. kubeadm 은 큐블렛을 인스톨 하거나 업그레이드 해주지 않습니다.

Finally, it gives you the command to upgrade the cluster.
마지막으로 클러스터를 업그레이드 하는 명령어를 드립니다.

Also note that you must upgrade the kubeadm tool itself before you can upgrade the cluster.
또 kubeadm 툴 자체도 클러스터를 업그레이드 하기 전에 업그레이드 해야 한다는 것도 알아 두십시오.

The kubeadm tool also follows the same software version as kubernetes.
kubeadm 도구는 또한 쿠버네티스와 동일한 소프트웨어 버전을 따라 갑니다.

So we are at 1.11 and we want to go to 1.13.
그래서 우리가 현재 1.11이고 1.13으로 가길 원합니다.

But remember, we can only go one minor version at a time.
하지만 기억하세요. 우리는 한번에 하나의 마이너 버전 업그레이드가 가능 합니다.

So we first go to 1.12, first upgrade the kubeadm tool itself to version 1.12, then upgrade the cluster using the command from the upgrade plan output, kubeadm upgrade, apply it, 
그래서 처음으로 1.12로 업그레이드 한다음. kubeadm 툴도 1.12로 업그레이드 합니다. 그리고 난 다음 명령어를 사용해 클러스터를 업그레이드 합니다.

[kubeadm 버전을 올리고 컨트롤 플레인 버전을 올린다.]
>> apt-get upgrade -y kubeadm=1.12.0-00
>> kubeadm upgrade apply v1.12.0

post the necessary images and upgrade the cluster components once complete
필요한 이미지 게시와 클러스터 업그레이드가 완료 되었씁니다.

your control plane components are now at 1.12.
당신의 컨트롤 플레인 컴포넌트 버전은 지금 1.12 입니다.

If you run the kubectl get nodes command, you will still see the master node at 1.11.
kubectl get nodes 명령어를 실행해보면, 여전히 마스터 노드에 1.11로 표기되는걸 볼 수 있씁니다.

This is because in the output of this command, 
이건은 명령어의 출력 때문입니다.

it is showing the versions of kubelet on each of these nodes registered with the API server 
명령어는 각각의 노드에 등록된 API 서버의 큐블렛 버전을 보여줍니다.

and not the version of the API server itself.
그리고 이건 API 서버 버전 자체가 아닙니다.

So the next step is to upgrade the KubeLets
그래서 다음과 같은 방법으로 큐블렛을 업그레이드 해야 합니다.

remember, depending on your setup, you may or may not have Kubelet running on your master node.
기억하세요. 당신의 셋업에 따라 큐블렛이 마스터 노드에 돌고 있을수도 아닐수도 있습니다.

In this case, the cluster deployed with Kubeadm has Kubelet on the master node, which are used to run the control plane components as pod of the master node.
이번 경우에 kubeadm 과 함께 배포된 클러스터는 마스터노드 에 큐블렛을 포함하고 있습니다. 이것은 컨트롤 플레인 컴포넌트를 실행하는데 사용됩니다. 마치 마스터노드에 POD 처럼



When we set up a component as cluster from scratch later during this course, we do not install it on the master node.
나중이 우리가 스크래치를 통해 클러스터를 구성 할때에는 kubeadm 을 마스터 노드에 설치하지 않을 것입니다.

You will not see the master node in the output of this command in that case.
그 경우에는 이 명령어 출력에 마스터 노드에 큐블렛이 보이지 않을 것입니다.

So the next step is to upgrade kubelet on the master node.
그럼 다음 스텝은 마스터 노드에 있는 큐블렛을 업그레이드 하는 것입니다.

If you have kubelet on them, run the Apt-get upgrade kubelet to command for this.
마스터노드에 큐블렛이 있다면 
>> apt-get upgrade -y kubelet=1.12.0-000
과 같은 커맨드를 실행시키십시오.

Once the package is upgraded, restart the Kubelet service.
패키지가 업그레이드 되면, 큐블릿 서비스를 재시작 하십시오.

Running the kubectl get node command now shows that the master has been upgraded to 1.12.
kubectl get nodes 커맨드를 실행 시키면, 마스터 노드가 1.12 로 업그레이드 되어 있는것이 보입니다.

The worker nodes are still at one 1.11.
워커 노드는 여전히 1.11 버전입니다.

So next, the worker nodes, 
다음은 워커 노드 입니다.

let us start one at a time, we need to first move the workload from the first worker node to the other nodes.
한번에 하나씩 시작 합시다. 우리는 첫번째 워크로드를 다른 노드로 옮길 필요가 있습니다.

The kubectl drain command lets you safely terminate all the pods from a node and reschedules them on the other nodes.
kubectl drain 명령어는 대상 노드에 속한 pod 를 안전하게 종료 시키고, 다른 노드에 재스케쥴 시킵니다.

It also cordons the node and marks it unscheduable.
또한 봉쇄 조치와 함께 POD를 스케쥴을 할수 없도록 마킹합니다.

That way, no new podes are scheduled on it, then upgrade the Kubeadm and kubelet packages on the worker nodes as we did on the master node.
이 방법은 새로운 POD 들이 대상 노드에 스케쥴 되지 못하고 합니다. 그런 다음 kubeadm 도구나 큐블렛 패키지를 이용하여 마스터 노드에 했던것 처럼 워커 노드를 업그레이드 합니다.

Then using the Kubeadm tool upgrade command update the node configuration for the new kubelet version,
그런다음 kubeadm tool upgrade 명령을 이용하여 노드 설정을 업그레이드 합니다.

>> apt-get upgrade -y kubeadm=1.12.0-00
>> apt-get upgrade -y kubelet=1.12.0-00
>> kubeadm upgrade node config --kubelet-version v1.12.0

then restart the kubelet to service.
다음으로 큐블렛 서비스를 재시작 합니다.

The node should now be up with the new software version.
노드는 현재 새 소프트웨어 버전이 되어야 합니다.

However, when we drain the node, we actually marked it  unscheduleable, so we need to unmask it by running the command kubectl uncordon node-1
하지만 우리가 drain 노드를 했을때, 우린 사실 scheduable 로 마킹 했습니다. 때문에 우리는 다음 명령어를 통해 노드에 마스킹을 벗기는 작업을 해야합니다.

>> kubectl undordon node-1

The node is now scheduledable, but remember that it is not necessary that the pods come right back to this node.
노드는 이제 스케쥴 가능 합니다. 하지만 기억 하세요. POD 가 해당 노드로 돌아가는건 필수가 아닙니다.

It is only marked as schedulable only when the pods are deleted from the other node or when new pods are scheduled to really come back to this first node.
이건 단지 스케쥴 가능하다는 마킹 뿐입니다. 오직 다른 노드에 POD 를 삭제하거나 새로운 POD 가 스케쥴 될때에만 실제 첫번째 노드로 돌아갑니다.

Well, it will soon come when we take down the second node to perform the same steps to upgrade it.
좋습니다. 우린 두번째 노드가 업그레이드를 위해 동일한 스탭을 실행 할때, 첫번째 노드가 돌아올 것입니다.

And finally, the third node.
그리고 마지막 노드

We now have all nodes upgraded.
이제 모든 노드가 업그레이드 되었습니다.

Well, that's it for this lecture.

Head over to the practice test where you will practice upgrading and live cluster with applications

running on it without taking the applications down.

Good luck.