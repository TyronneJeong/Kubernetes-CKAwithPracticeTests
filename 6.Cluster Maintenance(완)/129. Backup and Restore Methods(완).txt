------------------------------------------------------------
[ETCD 클러스터 백업하기]
1-1. ETCDCTL_API 버전은 3이여야 한다.
>> etcdctl --version
>> export ETCDCTL_API=3
>> etcdctl snapshot save snapshot.db

1-2. ETCD 데이터 베이스가 TLS 가 활성화 되어 있다면 위 버전 설정시 아래 정보도 같이 설정해줘야 한다.
-- cacert / cert / endpoint / key 설정이 필수다.

[수동으로 명령을 던질때 보안인 키를 포함하는 것이 필수다.]
ETCDCTL_API=3 etcdctl --endpoints=https://[127.0.0.1]:2379 \
--cacert=/etc/kubernetes/pki/etcd/ca.crt \
--cert=/etc/kubernetes/pki/etcd/server.crt \
--key=/etc/kubernetes/pki/etcd/server.key \
snapshot save /opt/snapshot-pre-boot.db


[ETCD 클러스터 복원하기]
## ETCD 클러스터내 서비스 정보가 모두 사라졌다면?
-- 복원을 해야지..
1. API 서버를 정지시킨다.
>> service kube-apiserver stop

2. 저장된 백업파일로 복원 한다. + 백업파일 경로를 지정한다.
>> ETCDCTL_API=3 etcdctl --data-dir /var/lib/etcd-from-backup \
snapshot restore /opt/snapshot-pre-boot.db


>> etcdctl snapshot restore snapshot.db --data-dir /var/lib/etcd-from-backup

3. 백업된 파일 경로를 추가한다.
/etc/kubernetes/manifests/etcd.yaml

>> etcd.service
>>	--data-dir=/var/lib/etcd-from-backup

Q. 강의랑 왜 다르지? 옵션값으로 추가 하는게 아니라 밑에 추가하는 거라 함.
  volumes:
  - hostPath:
      path: /var/lib/etcd-from-backup
      type: DirectoryOrCreate
    name: etcd-data
	
3. 데몬을 재로드하고 서버를 재시작한다. -- ETCD 는 자동 재시작이라 함.
>> sudo systemctl daemon-reload
>> service kube-apiserver start
------------------------------------------------------------

Hello and welcome to this lecture, 

in this lecture, we look at the various back up and restore methodologies.
안녕하세요 이번강의에서는 다양한 백업과 복구 방법론에 대해 이야기해 보겠습니다.

Let's start by looking at what you should consider backing up in a kubernetes cluster.
그럼 쿠버네티스 클러스터에서 백업을 할때 무엇을 고려해야 하는지를 살펴보는 것 부터 시작해 봅시다.

So far, in this course, we have deployed a number of different applications on our kubernetes cluster using deployment pods and service definition files.
지금까지, 이 코스에서 우리는 수많은 어플리케이션을 POD를 배포와 서비스 정의파일을 이용하여 어플리케이션을 배포해 왔습니다.

We know that the ETCD cluster is where all cluster related information is stored, and if your applications are configured with persistent storage, then that is another candidate for backups.
우리는 ETCD 클러스터가 모든 클러스터에 관계된 정보가 저장되어 있다는 것을 압니다. 그리고 만약 당신의 어플리케이션이 영구저장소가 구성되어 있다면, 그건 백업 대상자라는 의미입니다.

(with respect to:관련하여)
with respect to resources that we created in the cluster.
우리가 클러스터에서 생성한 리소스에 관련하여

(At times:때때로) (such as well:마찬가지로)
At times we use the imperative way of creating an object by executing a command such as well, creating a namespace or a secret or config map or at times for exposing applications.
때때로 우리는 오브젝트를 생성하기 위핸 명령어를 사용하는 명령적 방법을 사용합니다. 마찬가지로 네임스페이스 생성이나 시크릿 또는 설정맵 또는 때때로 어플리케이션을 노출 시키기 위해.

And at times, we used the declarative approach by first creating a definition file and then running the kubectl apply command on that file.
그리고 때때로 우리는 정의파일을 처음 생성할때 그리고 kubectl apply 명령을으로 그 파일을 적용할때 선언적 접근법을 사용합니다.

This is the preferred approach if you want to save your configuration, because now you have all the objects required for a single application in the form of object definition files in a single folder.
이것은 당신의 설정 정보를 저장하길 원할때 선호되는 접근법입니다. 왜냐하면 단일 어플리케이션이 필요로 하는 모든 것들이 오브젝트 정의파일로 존재하기 때문입니다.

This can easily be reused at a later time or shared with others.
이것은 이후에 대상을 공유하거나 쉽게 재사용 할 수 있습니다.

Of course, you must have a copy of these files saved at all times.
물론, 항상 이 파일을 복사해 두어야만 합니다.

(practice:연습, 업무, 실시, 환자, 숙련, 책략)
A good practice is to store these on source code repositories.
좋은 방법은 소스코드 리퍼지토리에 이를 저장하는 것입니다.

That way it can be maintained by a team.
이 방법은 팀에 의해 유지관리 됩니다.

The source code repository should be configured with the right backup solutions with managed or public source code repositories like GitHub.
소스코드 리파지토리는 관리된 또는 깃헙 같은 공공 소스코드 리파지토리처럼 올바른 백업 솔루션으로 구성되어야 합니다.

You don't have to worry about this with that.
당신은 이부분에 대해서는 걱정 하지 않으셔도 됩니다.

Even when you lose your entire cluster, you can redeploy your application on the cluster by simply applying these configuration files on them.
가령 당신이 당신 모든 클러스터를 잃는다고 해도, 클러스터내 어플리케이션을 이 설정 파일 적용 하나로 간단하게 재배포 할 수 있씁니다.

While the declarative approach is the preferred approach, it is not necessary that all of your team members stick to those standards.
선언적 접근법은 선호되는 방법입니다. 이를 모든 팀맴버들에게 강요할 필요는 없습니다.

What if someone created an object the imperative way without documenting that information anywhere?
만약 누군가 어디에도 문서작업 없이 명렁적 방법으로 오브젝트를 생성했다면?

So a better approach to backing up resource configuration is to query the kube API server, 
자원설정을 백업 하기 위한 보다 나은 방법은 큐브API 서버에 질의하는 것입니다.

query the kube server using the kuectl or by accessing the API server directly and save all resource configurations for all objects created on the cluster as a copy.

For example, one of the commands that can be used in a backup script is to get all pods and deployments and services in all namespace using the kubectl utilities get all command and extract the output in a Yaml format.
예를 들어 백업에 사용되는 "kubectl get all" 스크립트 명령어 하나로 네임스페이스내 모든 PODS 와 디플로이먼트, 서비스들을 얻을 수 있습니다. 그리고 이것들을 YAML 포맷으로 추출 합니다.

then save that file.
그런 다음 저장을 합니다.

>> kubectl get all --all-namespaces -o yaml > all-deploy-services.yaml

And that's just for a few resource group.
그리고 이는 몇몇 리소스 그룹에만 해당 됩니다.





There are many other resource groups that must be considered.
저기 고려해야할 많은 리소스 그룹이 있습니다.

Of course, you don't have to develop that solutions yourself.
물론 백업 솔루션을 구성 해야할 필요는 없습니다

There are tools like ARK are now called VELERO by HeptIO that can do this for you.
저기 보이는 ARK 라는 도구, 지금은 VELERO 라는 도구가. 당신을 도와줄 것입니다.

It can help in taking backups of your kubernetes cluster using the Kubernetes API.
이 도구가 쿠버네티스 API 를 사용하여 당신의 클러스터를 백업하는걸 도와줄 것입니다.

That is now move on to ETCD.
이제 ETCD 로 이동합니다.

---------------------------------------------------------
The ETCD cluster stores information about the state of our cluster, so information about the cluster itself, 
ETCD 클러스터는 우리의 클러스터의 상태에 관한 정보를 저장하는 저장소 입니다. 그래서 클러스터 자체 정보도 저장되어 있습니다.

the nodes and every other resources created within the cluster are stored here.
노드와 클러스터 안에서 생성된 여타 리소스들은 ETCD 에 저장됩니다.

So instead of backing up resources as before, you may choose to back up ETCD server itself.
그래서 이전과 같이 백업하는 대신에, ETCD 서버 자체를 백업하도록 선택 할 수 있습니다.

As we have seen, the ETCD cluster is hosted on the master nodes while configuring ETCD with specified a location where all the data would be stored.
우리가 본바와 같이 ETCD 클러스터는 모든 데이터가 저장될수 있는 지정된 위치에 구성되어질 동안 마스터 노드에 호스팅 되어집니다.

The data directory.
데이터 디렉토리.

that is the directory that can be configured to be backed up by your backup tool.
데이터 디렉토리는 백업도구를 이용해 백업이 되도록 구성할 수 있는 디렉토리 입니다.

(comes with :함께 온다.)
ETCD also comes with a built in snapshot solution, you can take a snapshot of the ETCD database by using the ETCD control utilities snapshot save command, give the snapshot a name, snapshot.db.
ETCD 역시 스냅샷 솔루션이 함께 개발되어져 있습니다. ETCDctl 유틸리티의 스냅샷 save 명령과 저장된 이름을 통해 ETCD 데이터 베이스를 스냅샷 뜰 수 있습니다.

>> etcdctl snapshot save snapshot.db

A snapshot file is created by the name in the current directory.
스냅샷은 지정된 이름으로 현재 폴더에 생성됩니다.

If you want it to be created in another location, specify the full path.
만약 다른 경로에 저장되길 원한다면 경로 풀패스를 지정합니다.

----------------------------------------------------------------
You can view the status of the backup using the Snapshot Status Command.
snapshot status 명령을 이용하면, 백업파일의 상태를 볼수 있습니다.

>> etcdctl snapshot status snapshot.db

To restore the cluster from this back up at a later point in time.
나중에 이 백업 파일로부터 클러스터를 복원할 때에는

First stop the kubeapi-server-service has the restore process will require you to restart the ETCD cluster and the kube api server depends on it.
먼저 KubeAPI 서버를 정지하면 복원 프로세스에서 ETCD 클러스터를 다시시작합니다. 그리고 KubeAPI 서버는 이에 의존합니다.

>> service kube-apiserver stop

Then run the "etcdctl snapshot restore" command with the path set to the path of the backup file.
그런 다음 백업파일이 저장된 경로와 함께 etcdctl snapshot resotre 명령어를 실행합니다.

>> etcdctl snapshot restore snapshot.db --data-dir /var/lib/etcd-from-backup

when ETCD restore etcd-from-backup, it initializes a new cluster configuration and configures the members of ETCD as new members to a new cluster.
ETCD 가 etcd-from-backup 파일로 복원되면, 클러스터 설정을 초기화 합니다. 그리고 새로운 맴버와 새로운 클러스터로 맴버를 재구성 합니다.

This is to prevent a new member from accidentally joining an existing cluster.
이는 새 구성원이 실수로 기존 클러스터에 합류하는것을 방지해 줍니다.

on running this command. And new data directory is created 
이 명령어의 실행으로 새로운 데이터 디렉토리가 생성됩니다.

in this example at location /var/lib/etcd-from-backup.
이 예제에서는 /var/lib/etcd-from-backup 폴더 입니다.

We then configure the ETCD configuration file to use the new data directory.
그런 다음 ETCD 구성 파일에 새로운 디렉토리를 등록 합니다.

>> etcd.service
>>	--data-dir=/var/lib/etcd-from-backup

Then reload the service daemon and restart ETCD service.
그럼 다음 데몬을 재로드 하고 ETCD 서비스를 재시작 합니다.

Finally, start the kube api server service, your cluster should now be back in the original state.
마지막으로 Kube API 서버를 기동 합니다. 이제 이 클러스터는 오리지널(원본) 상태로 돌아갑니다.

>> service kube-apiserver start

A quick note before I let you go, with all the ETCD commands, remember to specify the certiticate files
종료하기전, ETCD 명령을 사용하여, 인증 파일을 지정하는 것을 기억 하세요.

for authentication, specify the end point to the ETCD cluster and cacert, cert and the key.

>> etcdctl snapshot save snapshot.db
>>	--endpoint=https://127.0.0.1:2379
>>	--cacert=/etc/etcd/ca.crt
>>	--cert=/etc/etcd/etcd-server.crt
>>	--key=/etcc/etcd/etcd-server.key

So we have seen two options, a backup using a ETCD and a backup by querying the kubeAPI server.
우리는 두가지 옵션을 보았습니다. ETCD 를 이용한 백업과 KubeAPI 서버에 질의를 통한 백업

(pros and cons:장단점)
Now, both of these have their pros and cons.
이 양쪽 모두 장단점이 있습니다.

Well, if you're using a managed kubernetes environment, then at times you may not even have access to the ETCD cluster.
만약 쿠버네티스 환경을 사용한다면, ETCD 클러스터에 접근하지 못하는 경우고 있습니다.

In that case, backup by quering the server is probably the better way.
이 경우 서버에 질의를 통한 백업이 아마 더 좋은 방법일겁니다.

Well, that's it for this demo.

Head over to the practice test and practice backing up a CD in a cluster and then restoring from backups.