---------------------------------------------------------------
>> $HOME/.kube/config

rror: unable to read client-cert /etc/kubernetes/pki/users/dev-user/developer-user.crt for dev-user due to open /etc/kubernetes/pki/users/dev-user/developer-user.crt: no such file or directory


>> kubectl config use-context prod-user@production

## 지정 Config파일에서 research 라는 컨텍스트를 사용함. (유저<->클러스터)
>> kubectl config --kubeconfig=/root/my-kube-config use-context research

## Config 파일에서 기본 컨텍스트를 현재 컨텍스트로 변경함
>> kubectl config --kubeconfig=/root/my-kube-config current-context

## default config 파일 변경은 /.kube/config 파일을 교체해야함
>> kubectl config view -raw

------------------------------------------------------------------
[KubeConfig.yaml]
apiVersion: v1
kind: Config
#기본컨텍스트지정
current-context: my-kube-admin@my-kube-playground

# 클러스터 정의 섹션
clusters: 서버 설정
	  cluster:
		certicate-authority: /etc/kubenetes/pki/ca.crt
		server: server my-kube-playground:6443
		
		대신에
		certificate-authority-data : <encoded base64 data of certificate contents>

# 접근 가능한 클러스터와 유저 매핑 섹션
contexts:
	- name: my-kube-admin@my-kube-playground
	  context:
		cluster: my-kube-playground
		user: my-kube-admin
		namespace: finanace <-- 네임스페이스별로 지정가능

#사용자 정의섹션
user: 클라이언트 인증서 설정
	- name: my-kube-admin
	  user:
		client-certificate: admin.crt
		client-key: admin
---------------------------------------------------------------	
		--client-key admin.key
		--client-certificateadmin.crt
		--certificate-authority.ca.crt
---------------------------------------------------------------

Hello and welcome to this lecture in this lecture

We look at KubeConfig in Kubernetes 
안녕하세요 이번 강의에서는 Kube Config 에 대해서 알아 보겠씁니다.

so far we have seen how to generate a certificate for a user.
그동안 사용자를 위해 인증서를 생성하는 방법을 살펴 보았습니다.

We have seen how a client uses the certificate file and key to query the kubernetes Rest API for a list of pods using Curl.
클라이언트가 인증서 파일과 키를 사용하여 쿠버네티스 REST API에 질의를 하는 방법을 보았습니다.

>> curl https://my-kube-playground:6443/api/v1/pods
>> 	--key admin.key
>>	--cert admin.crt
>>	--cacert ca.crt

In this case my cluster is called my-kube-playground,
이번 경우에 저의 클러는 my-kube-playground 라고 불립니다.

so send a CURL request to the address of the kube-api server while passing in the pair of files along with the ca certificate as options.
떄문에 Kube API 서버의 주소로 CURL 요청을 보냅니다. 옵션으로 CA인증서와 함께 파일쌍이 전달 되는 동안 

This is then validated by the API server to authenticate the user.
그런 다음 API 서버에서 유효성 검사를 하여 사용자를 인증 합니다.

Now how do you do that?
그럼 이제 어떻게 합니까?

while using the kubectl command.
kubectl 명령어를 사용하는 동안.

You can specify the same information using the options server, client-key, client-certificate and certificate authority with the kubectl utililty. 
당신은 서버, 클라이언트 키, 클라이언트 인증, 그리고 인증서인증 옵션을 사용하여 동일한 정보를 지정 할 수 있습니다. 

------------------------------------------------------------
>> kubectl get pods
>> 	--server my-kube-playground:6443
>> 	--client-key admin.key
>> 	--client-certificate admin.crt
>> 	--certificate-authority ca.crt
------------------------------------------------------------

(Obviously:확실히)(tedious task:지루한작업)
Obviously typing those in every time is a tedious task. 
확실히 이것들을 매번 입력하는 것은 지루한 작업입니다.

So you move these information to a configuration file called as KubeConfig.
때문에 해당 정보들을 설정 파일로 이동 시킵니다. kubeconfig 라는 파일로

And then specify this file as the kubeconfig option in your command.
그런 다음 이 파일을 kubeconfig 옵션으로 명령에 지정 합니다.


By default the kubectl tool looks for a file named config under a directory "$HOME/.kube/config" directory. 
기본적으로 kubectl 도구는 해당 디렉토리 아래에 있는 설정 파일을 찾습니다.

>> $HOME/.kube/config

(explicitly:명시적으로)
So if you create the KubeConfig file there, you don’t have to specify the path to the file explicitly in the kubectl command.
때문에 저곳에 kubeconfig 파일을 생성한다면 파일 경로를 명시적으로 지정하지 않아도 됩니다. kubectl 명령에

That’s the reason you haven’t been specifying any options for your kubectl commands so far.
저것이 kubectl 명령에 다른 옵션을 지정 하지 않아도 되는 이유입니다.
----------------------------------------------------------------
The kubeconfig file is in a specific format.
kubeconfig 파일은 특정 포맷을 가지고 있습니다.

Let’s take a look at that. 
여기를 한번 봅시다.

The config file has 3 sections. Clusters, Users and Contexts. 
config 파일은 3개의 섹션이 있습니다. 클러스터, 유저, 콘텍스트

[config-클러스터]
Clusters are the various kubernetes clusters that you need access to.
클러스터는 엑세스가 필요한 다양한 쿠버네티스 클러스터 입니다.

So you have multiple clusters for development environment or testing environment or prod or for different organizations or on different cloud providers etc. 
때문에, 개발이나 테스팅 또는 운영 환경 또는 다른 조직을 위해서라거나 또는 다른 클라우드 제공자 등등을 위한 멀티플 클러스터를 가지고 있습니다.

All those go there.
그런것들은 모두 클러스터로 갑니다.

[COnfig-Users]
"users" are the user accounts with which you have access to these clusters.
유저는 해당 클러스터에 접근하는 유저 계정들 입니다.

For example the admin user. A Dev User, a prod user etc. 
예를 들어 어드민 유저, 데브유저, 운영유저 등등

(may:~수도)
These users may have different privileges on different clusters
여기 유저들은 각 다른 클러스터 마다 다른 권한을 가질 수도 있습니다.

finally contexts marry these together context define which user account will be used to access which cluster.
마지막으로 콘텍스트는 이것들을 함께 결합한 콘텍스트 입니다. 어떤 유저 계정이 클러스터에 접근할때 사용되는지를 정의하는 

For example you could create a context named admin at production
예를 들어 당신은 콘텍스트 네임을 admin@production이라고 지을 수 있습니다.

that will use the admin account to access a production cluster.
이 이름은 어드민 계정이 프로덕션 클러스터에 엑세스 하는데 이용될 것입니다.

Or I may want to access the cluster I have setup on Google with the devusers credentials to test deploying the application I built.
또는 제가 만든 어플리케이션의 테스트 배포를 위해 구글에 데브유저 자격증명과 함께 셋업을 해둔 곳에 접근을 원할 수도 있습니다.

remember you're not creating any new users or configuring any kind of user access or authorization in the cluster With this process.
기억하세요. 이 프로세스를 통해 클러스터에 새 사용자를 생성하거나 어떤 종류의 사용자 엑세스 또는 권한 부여도 하지 않는 것을 기억하세요.

[콘텍스트가 하지 않으면?]

you're using existing users with their existing privileges and defining what user you're going to use to access what cluster.
당신은 기존 유저를 권한과 함께 이용합니다. 그리고 당신이 특정 클러스터에 접근하기 위해사용하려고 하는 사용자를 정의합니다.

That way you don’t have to specify the user certificates and server address in each and every kubectl command You run.
이 방법은 사용자 인증과 서버 주소를 각각 kubectl 커맨드를 실행 할때 지정할 필요가 없게 합니다.

So how does it fit into our example.
그럼 어떻게 맞출수 있을까요 우리의 사례와.

The server specification in our command goes into the cluster section the admin users keys and certificates goes into the users section. 
우리의 명령에 있는 서버 인증서는 클러스터 섹션으로 갑니다. 어드민 유저 키와 인증서는 유저 섹션으로 갑니다.

You then create a context that specifies to use the MyKubeAdmin user to access the MyKubePlayground cluster.
그런다음 컨텍스트를 생성합니다. 지정된 유저가 지정 클러스터에 엑세스 가능한 유저로 지정되도록.

Let’s look at a real KubeConfig file now.
그럼 실제 Kube Config 파일을 살펴 봅시다.

The kubeConfig is in a YAML format.
kubeConfig 파일은 YAML 포맷입니다.

It has apiVersion set to v1. The kind is config. And then it has 3 sections as we discussed. 
여기 버전은 v1을 지정합니다. kind 는 config 그리고 우리가 말했던 3가지 섹션이 여기옵니다.

One for clusters, one for contexts and one for users. 
클러스터 하나, 콘텍스트 하나, 유저 하나.

Each of these is in an array format.
이것들 각각 배열 형태 입니다.

That way you can specify multiple clusters.
이 방법으로 멀티플 클러스터를 지정할 수 있습니다.

users or contexts within the same file.
유저와 콘텍스트도 같은 파일에서 멀티플로 지정할 수 있습니다.

Under clusters we add a new item for our kube-playground cluster.
클러스터 아래에 kube-playground 클러스터를 위한 새로운 아이탬을 추가합니다. 

We named it my-kube-playground and specify the server address under the server field.
우리는 my-kube-playground 라고 이름을 짓고 server 필드 아래에 서버 주소를 지정합니다.

It also requires the certificate of the Certificate Authority.
그리고 이건 또한 CA 의 인증서도 필요로 합니다.

We can then add an entry into the users section to specify details of my kube admin user. 
그런 다음 우리는 유저 섹션에 어드민 유저의 상세정보를 추가 할 수 있습니다.

Provide the location of the client’s certificate and key pair.
클라이언트 인증서와 키쌍을 등록합니다.

So we have now defined the cluster and the user to access the cluster.
그래서 우리는 현재 클러스터와 유저가 클러스터에 접근 가능하도록 정의했씁니다.
-----------------------------------------------------------------
(entry:기입, 참가자, 표제어, 들어감, 입장권, 점유)
Next we create an entry under the context section to link the two together.
그 다음으로 우리는 둘을 함께 연결하기 위해 컨텍스트 섹션을 기입할 것입니다. 

we will name the context my kube admin @ my kube playground.
우리는 컨텍스트의 이름을 my kube admin @ my kube playground.라고 붙일 것입니다.

We will then specify the same name we used for a cluster and user.
그리고 클러스터와 유저의 동일한 이름을 지정 할겁니다.

follow the same procedure to add all the clusters you daily access the user credentials you use to access them as well as the context.
당신이 매일 엑세스 하는 모든 클러스터를, 클러스터에 접근하기 위해 사용하는 자격증명들 역시 모두 동일한 방식으로 추가합니다.

once the file is ready.
파일의 준비가 완료되면

remember that you don’t have to create any object like you usually do for other kubernetes objects.
기억하세요. 이 파일 생성으로 쿠버네티스에 여러 오브젝트 생성때 흔히하는 것들을 할 필요가 없습니다.

The file is left as is and is read by the kubectl command and the required values are used.
파일이 이런게 남아 있고 그리고 kubectl 명령어로 읽으면 필요한 값들이 사용되어집니다.
------------------------------------------------------------------

Now, how does kubectl know which context to chose from?
이제, 어떻게 kubectl 은 이 컨텍스트가 누구로 부터 선택 받았는지 어떻게 알까요.

We have defined three contexts here which one should it start with.
우리는 여기 3개의 컨텍스트를 지했습니다. 어떤것과 함께 할까요.

You can specify the default context to use by adding a field current-context to the kubeconfig file.
당신은 기본 컨텍스트를 current-context 필드를 통해 kubeconfig파일에 추가할 수 있습니다.

specify the name of the context you use.
당신이 사용할 컨텍스트의 이름을 지정합니다.

In this case kubectl will always use the context dev-user@google to access the google clusters using the dev-user’s credentials.
이 경우 kubectl 은 항상 구글 클러스터에 엑세스 하기 위해 dev-user@google 컨텍스트의 dev-user’s credentials을 사용합니다.

There are command line options available within kubectl to view and modify the kubeconfig files.
저기에는 kubeconfig 파일을 보고 수정하기 위해 kubectl 명령에 이용가능한 커맨드 라인 옵션이 있습니다.

>> kubectl config set-context --current-context --namespace:<namespace>
로 사용한 기억이 있음. 이게 기본 컨텍스트 스위칭 명령어.

to view the current file being used.
현재 파일을 보기 위해 이걸 사용하세요.

run the kubectl config view command.
>> kubectl config view

It lists the clusters, contexts and users as well as the current-context set. As we discussed earlier,
이것은 클러스터 와 컨텍스트와 사용자, 현재컨텍스트 셋을 나열 해줍니다. 우리가 이전에 말했던것 처럼요.

if you do not specify which kubeconfig file to use, it ends up using the default file located in the folder.
만약 당신이 kubeconfig 파일을 수정 하고 싶지 않다면, 이걸로 종료하고 폴더에 기본 파일을 사용하면 됩니다.

kube in users home directory.
홈에 /.kube/ 디렉토리요.

(Alternatively:대안으로)
Alternatively you can specify a kubeconfig file by passing the kubeconfig option in the command line like this.
대안으로 kubeconfig 옵션을 전달하여 설정을 지정할 수 있습니다.

We will move our custom config to the home directory so this becomes our default config file.
우리는 우리의 커스텀 설정 파일을 홈 디렉토리로 옮길 것입니다. 그래서 우리의 기본 설정 파일로 만들 것입니다.

So how do you update your current context.
그럼 어떻게 우리의 현재 콘텍스트를 갱신할까요.

Say you have been using my-kube-admin user to access my-kube-playground.
당신은 지금 my-kube-admin 사용자를 이용하여 my-kube-playground 에 접속하고 있다고 가정 해 봅시다.

How do you change the context to use prod-user to access the production cluster? 
그럼 어떻게 컨텍스트를 변경 할 까요. prod-user 를 production 클러스터로요.

Run the kubectl config use-context command to change the current-context to the prod-user@production context.
kubectl 명령으로 해당 내용을 변경하십시오.

>> kubectl config use-context prod-user@production

This can be seen in the current context field in the file.
이 명령은 현재 파일내 컨텍스트 필드를 볼수 있게 합니다.

(reflects:반영하다)
So yes. the changes made by kubectl config command actually reflects in the file.
맞습니다. 변경사항은 kubectl config 명령을 이용해 파일에 반영 합니다.

You can make other changes in the file update or delete items in it using other variations of the kubectl config command.
당신은 kubectl config 의 다양한 변형을 이용해 파일 갱신이나 삭제를 할 수 있습니다.

(you get time:시간이 있다)
Check them out when you get time.
시간이 되시면 확인해 보세요.

What about name spaces 
이 네임스페이스가 무엇인가요.

for example Each cluster may be configured with multiple name spaces within it.
예를들어 이 파일내에 각각의 클러스터가 다수의 네임 스페이스로 구성될 수도 있습니다.

(particular:특정한)
Can you configure a context to switch to a particular namespace.
당신은 특정 네임스페이스로 컨텍스트를 스위칭 할 수 있습니까?

Yes! The context section in the kubeconfig file can take additional field called namespace where you can specify a particular namespace.
할수 있습니다. kubeconfig 파일내 컨텍스트 섹션은 당신이 특정 네임 스페이스를 지정 할수 있는 네임스페이스라 불리는 추가적인 필드를 가질 수 있습니다. 

This way when you switch to that context you will automatically be in a specific namespace 
이 방법으로 컨텍스트를 스위칭 했을때, 자동으로 해당 컨텍스트안으로 들어가 지게 됩니다.

finally a word on certificates.
마지막으로 인증서에 대한 한마디.

You have seen path to certificate files mentioned in kubeconfig like this.
당신은 kubeconfig 파일에서 인증서 경로가 언급되는 것을 보셨을 것입니다. 바로 이것처럼.

Well, its better to use the full path like this. 
맞습니다. 이것은 풀 패스를 쓰는것보다 좋습니다.

But remember there is also another way to specify the certificate credentials.
하지만 기억하게요. 저기에는 인증서 자격증명을 지정할 또다른 방법 또한 있습니다.

Let’s look at the first one.
처음것을 봅니다.

for instance where we configure the path to the Certificate Authority.
예를들어, 우리가 CA의 경로를 지정 했던장소.

We have the contents of the ca.crt file on the right. 
ca.crt 파일이 오른쪽에 있습니다. 

Instead of using the certificate-authority field and the path to the file.
certificate-authority 필드 그리고 파일 경로를 사용하는 대신에, 

you may optionally use the certificate-authority-data field and provide the contents of the certificate itself.
certificate-authority-data라는 필드를 옵션으로 사용할 수도 있습니다. 그리고 인증서 자체를 전달 할수도 있습니다.

But not the file as is,
하지만 파일이 아닙니다.

Convert the contents to a base64 encoded format and then pass that in.
ca.crt 의 컨텐츠를 베이스64로 인코딩 한 후 이걸 그대로 붙여 넣습니다.

Similarly if you see a file with the certificates data in the encoded format use the Base64 decode option to decode the certificate.
비슷하게. 당신이 베이스64로 인코딩된 인증서 데이터와 함께 파일을 볼 수 있다면,  베이스64 디코드 옵션을 이용하여 인증서를 디코딩 합니다.

>> cat ca.crt | base64


Well that's it for this lecture.
강의는 여기 까지입니다.

Head over to the practice exercises section.

Practice working with kubeconfig files and troubleshooting issues.