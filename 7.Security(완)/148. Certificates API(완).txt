------------------------------------------------------------------
## CSR 객체생성
>> kubectl apply -f filename.yaml 로 실행

## CSR 상태보기
>> kubectl get csr

## 승인하기
>> kubectl certificate approve akshay

## 거절하기
>> kubectl certificate deny agent-smith

## 요청내역 삭제
>> kubectl delete csr agent-smith

apiVersion: certificates.k8s.io/v1
kind: CertificateSigningRequest
metadata:
  name: akshay
spec:
  groups:
  - system:authenticated
  request: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURSBSRVFVRVNULS0tLS0KTUlJQ1ZqQ0NBVDRDQVFBd0VURVBNQTBHQTFVRUF3d0dZV3R6YUdGNU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRgpBQU9DQVE4QU1JSUJDZ0tDQVFFQXY4azZTTE9HVzcrV3JwUUhITnI2TGFROTJhVmQ1blNLajR6UEhsNUlJYVdlCmJ4RU9JYkNmRkhKKzlIOE1RaS9hbCswcEkwR2xpYnlmTXozL2lGSWF3eGVXNFA3bDJjK1g0L0lqOXZQVC9jU3UKMDAya2ZvV0xUUkpQbWtKaVVuQTRpSGxZNDdmYkpQZDhIRGFuWHM3bnFoenVvTnZLbWhwL2twZUVvaHd5MFRVMAo5bzdvcjJWb1hWZTVyUnNoMms4dzV2TlVPL3BBdEk4VkRydUhCYzRxaHM3MDI1ZTZTUXFDeHUyOHNhTDh1blJQCkR6V2ZsNVpLcTVpdlJNeFQrcUo0UGpBL2pHV2d6QVliL1hDQXRrRVJyNlMwak9XaEw1Q0ErVU1BQmd5a1c5emQKTmlXbnJZUEdqVWh1WjZBeWJ1VzMxMjRqdlFvbndRRUprNEdoayt2SU53SURBUUFCb0FBd0RRWUpLb1pJaHZjTgpBUUVMQlFBRGdnRUJBQi94dDZ2d2EweWZHZFpKZ1k2ZDRUZEFtN2ZiTHRqUE15OHByTi9WZEdxN25oVDNUUE5zCjEwRFFaVGN6T21hTjVTZmpTaVAvaDRZQzQ0QjhFMll5Szg4Z2lDaUVEWDNlaDFYZnB3bnlJMVBDVE1mYys3cWUKMkJZTGJWSitRY040MDU4YituK24wMy9oVkN4L1VRRFhvc2w4Z2hOaHhGck9zRUtuVExiWHRsK29jQ0RtN3I3UwpUYTFkbWtFWCtWUnFJYXFGSDd1dDJveHgxcHdCdnJEeGUvV2cybXNqdHJZUXJ3eDJmQnErQ2Z1dm1sVS9rME4rCml3MEFjbVJsMy9veTdqR3ptMXdqdTJvNG4zSDNKQ25SbE41SnIyQkZTcFVQU3dCL1lUZ1ZobHVMNmwwRERxS3MKNTdYcEYxcjZWdmJmbTRldkhDNnJCSnNiZmI2ZU1KejZPMUU9Ci0tLS0tRU5EIENFUlRJRklDQVRFIFJFUVVFU1QtLS0tLQo=
  signerName: kubernetes.io/kube-apiserver-client
  usages:
  - client auth
------------------------------------------------------------------
Hello and welcome to this lecture in this lecture

We look at how to manage certificates and what the certificate API is in kubernetes.
안녕하세요. 이번 강의에서 우리는 인증서를 관리하는 방법과 인증서 API 가 무엇인지에 대해 알아보겠습니다.

So what have we done so far.
그동안 무엇을 해왔나요?

I as an administrator of the cluster in the process of setting up the whole cluster have set up a CA server and bunch of certificates for various components.
전체 클러스터를 설정하는 과정에서 클러스터의 관리자인 저는 CA서버와 다양한 컴포넌트들을 위한 인증서 묶음을 설정 했습니다.

We then started the services using the right certificates and it's all up and working 
그 다음 우리는 올바른 인증서를 이용해 서비스를 시작 했습니다. 그리고 모든 것이 정상 작동 중입니다.

and the only administrator and user of the cluster and I have my own admin certificate and key.
그리고 오직 클러스터의 관리자와 사용자 그리고 나만이 나만의 관리자 인증서와 키를 가지고 있습니다.

the new admin comes into my team. She needs access to the cluster.
새로운 관리자가 나의 팀으로 오면, 그녀는 클러스터에 접근할 필요가 있습니다.

We need to get her a pair of certificate and key pair for her to access the cluster.
우리는 그녀가 인증서 쌍을 가질 필요가 있습니다. 그리고 그 키쌍은 그녀가 클러스터에 접근 하기 위한것입니다.

She creates her own private key 
그녀는 그녀 소유의 개인키를 생성 했습니다. 

generates a certificate signing request 
CSR 을 생성하고, 

and sends it to me since I'm the only admin.
그걸 저에게 보냈습니다. 제가 아직 관리자 일때.

I then takes the certificate signing request to my CA server, gets it signed by the CA using the CA servers private key and root certificate
그런다음 저는 CSR 을 CA CA서버의 개인키와 루트 인증서를 사용하여 서명할 수 있도록 CA 서버로 가져갔습니다. 

thereby generating a certificate and then sends the certificate back to her.
따라서 인증서를 생성한 다음 인증서를 그녀에게 돌려주었습니다.

She now has her own valid pair of certificate and key that she can use to access to cluster 
그녀는 이제 그녀 소유의 유효한 인증서와 키를 갖게 되었습니다. 이걸로 그녀는 클러스터에 입장하는데 사용 할 수 있습니다.

the certificates have a validated period it ends after a period of time.
인증서는 유효기간이 있습니다. 그 기간이 끝나게 되면

Every time it expires we follow the same process of generating a new CSR and getting it signed by the CA.
만료될때마다 우리는 새로운 CSR을 생성하고 CA 서버로부터 서명을 받을 때랑 동일한 프로세스를 따라합니다.

So we keep rotating the certificate files. So we keep talking about the CA server.
따라서 인증서 파일의 순환을 유지시킵니다. 그래서 우리는 CA 서버와의 통신을 유지시킵니다.

-----------------------------------------------------------------

What is the CA server and where is it located in the Kubernetes setup? 
CA서버는 무엇이고 쿠버네티스 설정 어디에 위치해 있을까요?

The CA It is really just a pair of key and certificate files we have generated.
CA 는 실제 우리가 생성한 키 쌍과 인증서 파일 입니다.

Whoever gains access to these pair of files, can sign any certificate for the kubernetes environment.
이러한 파일 쌍에 엑세스 할 수 있는 사람은 누구든지, 쿠버네티스 환경에 대한 모든 인증서에 서명 할 수 있습니다.

They can create as many users as they want but whatever privileges they want.
그들은 그들이 원하는 만큼 많은 유저를 생성 할 수 있습니다. 하지만 그들이 원하는 권한이 무엇이건 간데.

So these files need to be protected and stored in a safe environment 
때문에 이 파일들은 보호되고 안전한 환경에 저장될 필요가 있습니다.

say we place them on a server that is fully secure.
완전히 안전한 서버에 배치된다고 가정 해 보겠습니다.

Now that server becomes your CA server. The certificate key file is safely stored in that server and only on that server every time you want to sign a certificate you can only do it by logging into that server.
이제 이건 당신의 CA 서버가 되었습니다. 인증키 파일은 서버에 안전하게 저장되어 있씁니다. 그리고 당신이 매번 서명을 원할 때 마다, 당신은 해당 서버에 로그인 해야한 합니다.

(As of now:지금과 같이)
As of now we have the certificates placed on the kubernetes master node itself. 
지금과 같이 우리는 인증서는 쿠버네티스 마스터 노드에 놓았습니다.

So the master node is also our CA server.
그래서 마스터 노드는 또한 우리의 CA 서버입니다.
---------------------------------------------------------------
The kubeadm tool does the same thing.
Kubeadm 도구는 여기서도 같은 것을 합니다.

It creates a CA pair of files and stores that on the master node itself.
Kubeadm 도구는 CA 파일 쌍을 만들고 마스터 노드 자체에 CA 키를 저장 합니다.

So far we have been signing requests manually but as and when the users increase and your team grows
그동안 우리는 요청을 수작업으로 서명 했습니다. 하지만 당신의 팀이 성장해서 유저 수가 많아지면

you need a better automated way to manage the certificates signing requests as well as to rotate certificates when they expire.
좀더 나은 자동화된 방법으로 인증서 발급 요청 관리를 해야 할 필요가 생깁니다. 게다가 인증서들이 만료될때마다 인증서를 순환시킬 때에도요.

Kubernetes has a built-in Certificates API that can do this for you. 
쿠버네티스는 빌트인으로 인증 API 를 가지고 있고 이것은 당신을 위해 많은것들을 할 수 있습니다.

With the Certificates API, you now send a Certificate Signing Request directly to kubernetes through an API call. 
인증서 API 로 당신은 이제 CSR 을 쿠버네티스에 바로 보낼 수 있습니다.

This time, when the administrator
receives a certificate signing request instead of logging onto the master node and signing the certificate by himself.
이번에는 관리자가 마스터 노드에 로그온 하여 스스로 인증서에 서명 하는 대신 인즈서 서명을 받습니다.

he creates a Kubernetes API object called Certificate Signing Request.
그는 CSR 이라 불리는 쿠버네티스 API 오브젝트를 생성합니다.

Once the object is created all certificates any requests can be seen by administrators of the cluster.
오브젝트가 생성되면 모든 요청에 모든 인증서는 클러스터의 관리자가 볼 수 있게 됩니다.

(reviewed:검토)
The request can be reviewed and approved easily using kubectl commands 
kubectl 명령을 사용하여 요청을 쉽게 검토하고 승인할 수 있습니다.

this certificate can then be extracted and shared with the user.
이 인증서는 사용자에게 추출하여 공유될 수 있습니다.

Let’s see how it is done. 
어떻게 된건지 봅 시다.

------------------------------------------------------------------
CA 인증서 승인 자동화 하기
------------------------------------------------------------------

A user first creates a key. Then generates a certificate signing request using the key with her name in it.
유저는 처음 키를 생성합니다. 다음으로 그녀의 이름을과 함께 키를 사용하여 인증서 서명 요청을 생성합니다.

[☆★ 사용자의 KEY 생성 ★☆]
[☆★ 사용자의 KEY 를 이용하여 CSR 생성 ★☆]
[☆★ CSR 에 요청자의 이름을 기입 ★☆]

Then sends the request to the administrator. The administrator takes the key and creates a certificate signing request object.
다음으로 관리자에게 요청을 보냅니다. 관리자는 키를 가져와 인증서 서명 요청 객체를 만듭니다.

[☆★ 관리자는 CSR 요청을 객체로 생성 ★☆]

The CertificateSigningRequest is created like any other kuberenetes object using a manifest file with the usual fields.
CSR 은 다른 쿠버네티스 객체들 처럼 manifests 파일이 일반적인 필드와 함께 생성됩니다.

The kind is CerificateSingingRequest. Under the spec section, specify the groups the user should be part of and list the usages of the account as a list of strings.
KIND 란에는 CerificateSingingRequest 을 적습니다. SPEC 섹션 아래에는 그룹을 지정 합니다. 
------------------------------------------------------------------
[☆★ CSR 요청 객체.yaml ★☆]
[jane-csr.yaml]
apiVersion: certificates.k8s.io/vibeta1
kind: CertificateSigningRequest
metadata:
	name: jane
spec:
	groups:
	- system:authenticated
	usages:
	- digital signature
	- ket encipherment
	- server auth
	request:
------------------------------------------------------------------
the request field is where you specify the certificate signing request sent by the user 
리쉐스트 필드는 사용자가 보낸 CSR 을 지정하는 장소 입니다.

but you don't specify it as plain text.
하지만 이를 플레인 텍스트로 지정 할 수는 없습니다.

instead, it must be encoded using the base64 command then move the encoded text into the request field
대신에 이를 base64 명령를 이용하여 인코딩 해야만 합니다. 그런다음 인코딩된 텍스트를 request 필드에 넣으면 됩니다.

and then submit the request once the object is created.
그런다음 객체가 생성되면 요청을 제출 합니다.

all certificate signing requests can be seen by administrators by running the kubectl get csr command.
모든 CSR 은 관리자가 볼 수 있습니다. kubectl get csr 명령을 통해서.

>> kubectl get csr

Identify the new request and approve the request by running the kubectl certificate approve command.
kubetl certificate approve 명령을 사용해 새로운 요청과 승인을 확인합니다.

>> kubectl cerificate approve jane

Kubernetes signs the certificate using the CA key pairs and generates a certificate for the user.
쿠버네티스 인증서 서명은 CA 키 쌍을 이용합니다. 그리고 사용자를 위해 인증서를 생성합니다.

This certificate can then be extracted and shared with the user 
이 인증서를 추출하고 사용자와 공유할 수 있습니다.

view the certificate by viewing it in a YAML format. 
YAML 포맷으로 인증서를 보기.

The generate certificate is part of the output. But as before it is in a base64 encoded format to decode it.
인증서 생성은 출력물 일부 입니다. 하지만 이전과 마찬가지로 이것은 base64로 인코딩 되어 있습니다. 디코딩 하기 위해.

>> kubectl get csr jan -o yaml

Take the text and use the base 64 utilities decode option.
베이스64 유틸리티 디코드 옵션을 이용해 텍스트를 추출 합시다.

>> echo "ak13wki..." | base64 --decode

This gives the certificate in a plain text format.
이 명령으로 플레인 텍스트 포맷의 인증서가 나타납니다.

This can then be shared with the end user.
이 플레인 텍스트는 최종 사용자에게 공유될 수 있습니다ㅏ.

Now that we have seen how it works 
여기까지 어떻게 동작하는 지를 알아 보았습니다.

let's see who does all of this for us.
누가 우리를 위해 이 일을 하는지 알아봅시다.

If you look at the kubernetes control plane, you see the kube-api server, the scheduler, controller manager, etcd server etc.
만약 쿠버네티스 컨트롤 플레인을 보고 있다면, 당신은 kubeAPI 서버, 스케쥴러, 컨트롤 매니저, ETCD 서버 등을 볼 수 있습니다.

Which of these components is actually responsible for all the certificate related operations 
이 컴포넌트들은 실제 인증서와 연관된 작업들을 담당 하고 있습니다.

(carried out:수행하다)
all the certificate related operations are carried out by the controller manager.
인증과 관련된 모든 작업들은 컨트롤 매니저에 의해 수행 됩니다.

If you look closely at the controller or manager.
컨트롤러 또는 매니저를 자세히 살펴 본다면

you will see that it has controllers in it called as csr-approving,
이것을 컨트롤러가 가지고 있다는 것을 알 수 있습니다. 이것은 CSR-APPROVING 이라고 불립니다.

csr-signing etc that are responsible for carrying out these specific tasks.
CSR 사이닝은 지정된 업무를 옮기는걸 책임집니다.

We know that if anyone has to sign certificates, they need the CA servers root certificate and private key.
우리는 누군가 인증서에 서명해야 하는 경우 CA 서버 루트 인증서와 개인키가 필요하다는 것을 알고 있습니다.

The controller manager service configuration has two options where you can specify this 
컨트롤러 매니저 서비스 설정은 당신이 이걸 설정 하기 위한 두가지 옵션을 가지고 있습니다.
----------------------------------------------------------------
[kube-controller-manager.yaml]
pec:
	containers:
		- command:
			- --cluster-signing-cert-file=/etc/../pki/ca.crt
			- --cluster-signing-key-file=/etc/../pki/ca.key
----------------------------------------------------------------
well that's for this lecture.

Head over to the practice test and play around with the certificates API.

I will see you in the next lecture.