---------------------------------------------------------------
>> kubectl api-resources --namespaced=false
>> kubectl api-resources --namespaced=true
---------------------------------------------------------------
[cluster-admin-role.yaml]
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
	name: cluster-administrator
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list", "get", "create", "delete"]
---------------------------------------------------------------
[cluster-admin-role-binding.yaml]
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
	name: cluster-admin-role-binding
subjects: <-- 엮을 대상들 목록
- kind: User
  name: cluster-admin
  apiGroups: rbac.authorization.k8s.io
roleRef:
  kind: ClusterRole
  name: ckuster-administrator
  apiGroup: rbac.authorization.k8s.io
---------------------------------------------------------------


We discussed about roles and role bindings in the previous lecture.
우리는 이전 강의를 통해 롤과 롤 바인딩에 대해 토론 했습니다.

In this lecture we will talk about cluster roles and cluster roles bindings 
이번 강의에서는 클러스터 Role 과 클러스터 Role Binding 에 대해 이야기 해 보겠씁니다.

when we talked about roles and role bindings.
우리가 롤과 롤 바인딩에 이야기 했을떄.

We said that roles and role bindings are namespaced meaning they are created within namespaces.
롤과 롤 바인딩은 네임스페이스 입니다라고, 이 뜻은 그들이 네임스페이스 안에 생성된다는 의미이다.

If you don't specify in namespace they're created in the default namespace and control access within that namespace alone
만약 당신이 네임스페이스를 지정 하지 않는다면 기본 네임 스페이스에 생성될 것입니다. 그리고 해당 네임스페이스에 단일로 접근 제어가 될 것입니다.

in one of the previous lectures we discussed about name spaces and how it helps in grouping or isolating resources like pods, deployments and services.
하나의 이전 강의 속에 우리는 네임 스페이스와 네임스페이스가 어떻게 자원을 그룹핑 또는 개별로 독립시키는게 도움이 되는지에 대해 토론 했습니다. POD 나 디플로이먼트나 서비스.

But what about other resources like nodes? 
하지만 노드 같은 다른 리소스 들은 어떤가요?

Can you group or isolate nodes within a namespace?
노드를 네임스페이스에서 그룹짓거나 개별로 독립시킬수가 있나요?

Like can you say node 01 is part of the dev namespace.
노드01은 데브 네임스페이스의 일부라고 말할 수가 있습니까?

No, those are cluster wide or cluster scoped resources.
아닙니다. 저 클러스터 와이드 또는 클러스터 스코프 리소스 입니다.

They cannot be associated to any particular namespace.
저들은 어느 특정 네임스페이스에 얽혀 있지 않습니다.

So the resources are categorized as either namespaced or cluster scoped.
때문에 리소스는 네임스페이스 또는 클러스터 스코프로 카테고리화 되어 있습니다. 

Now we have seen a lot of namespaced resources throughout this course. 
우리는 이 강의를 통틀어 많은 네임스페이스 리소스들을 보아왔습니다.

Like pods, replicasets, and jobs, deployments, services, secrets, and in the last lecture we saw 2 new. Roles and Rolebindings.
롤, 롤바인딩, POD, 레플리카셋, 잡, 디플로이먼트, 서비스, 시크릿등등.

These resources are created in the namespace you specify when you create them.
이 리소스들은 네임스페이스 안에서 생성됩니다. 당신이 이들을 생성할때 지정한 네임스페이스에 따라.

If you don't specify a namespace they are created in the default namespace to view them or delete them or update them.
만약 당신이 네임스페이스를 지정하지 않으면 이들을 보고 삭제하고 업데이트 하기 위해 기본 네임프스페이스에 생성됩니다.

you always specify the right namespace. 
항상 올바른 네임스페이스로 지정합니다. 

The cluster scoped resources are those where you don’t specify a namespace.
클러스터 스코프 리소스는 당신이 네임스페이스를 신경 쓰지 않은 리소스 입니다.

when you create them. Like nodes, persistent volumes, persistent clusterroles and clusterrolebinding
당신이 NODE 나 볼륨, 클러스터 롤이나 롤 바인딩등을 생성할때. 

[오브젝트는 네임스페이스에 담기는 것과 그렇지 않은 것들이 있다.]
----------------------------------------------------------------

that we're going to look at In this lecture
저것들은 우리가 이번 강의에서 볼 것들입니다.

certificate signing requests we saw earlier 
CSR은 우리가 이전에 보았습니다.

and namespace objects themselves are of course not namespace.
그리고 네임스페이스 오브젝트 들 자체는 당연히 네임스페이스가 아닙니다.
----------------------------------------------------------------
(comprehensive:포괄적인, 내포적인, 이해력이 있는)
Note that this is not a comprehensive list of resources 
참고하세요. 이것은 전체 리소스 목록이 아니라는 걸 참고 하세요.

to see a full list of namespace and non namespace resources run the kubectl api-resources command with the namespaced option set. 
네임스페이 또는 네임스페이스가 없는 리소스 전체 목록을 보려면 kubectl api-resource 커맨드를 네임스페이스 옵션 세트와 함께 실행하세요.

>> kubectl api-resources --namespaced=false
>> kubectl api-resources --namespaced=true

In the previous lecture we saw how to authorize a user to namespace resources.
이전 강의에서 우리는 유저를 네임스페이스의 리소스에 승인하는 법을 보았습니다.

We used Roles and Rolebindings for that. 
그것들을 위한 롤과 롤 바인딩을 사용했씁니다.

But how do we authorize users to cluster wide resources like nodes or persistent volumes
하지만 어떤게 유저를 노드나 영구 볼륨 같은 클러스터 와이드 리소스 인증 할 수 있을까요.

that is where you use cluster roles and cluster role bindings.
여기가 클러스터 롤과 클러스터 롤 바인딩이 들어갈 자리 입니다.

cluster roles are just like roles except they are for a cluster scoped resources.
클러스터 롤은 롤이랑 똑같습니다. 이게 클러스터 스코프의 리소스 다른 점만 제외하면요.

for example a cluster admin role can be created to provide a cluster administrator permissions to view create or delete nodes in a cluster.
예를 들어 클러스터 어드민 롤은 노드를 쓰고 삭제하기 위한 클러스터 관리자 권한을 생성할 수 있습니다.

Similarly if storage administrator role can be created to authorize a storage admin to create persistent volumes and claims.
스토리지 관리자 롤은 영구 볼륨 생성과 클레임을 하기 위한 스토리지 관리자 권한을 생성 할 수 있습니다.

create a cluster all definition file with the kind cluster roll and specify the rules as we did before 
클러스터 정의파일을 생성하세요. KIND 는 ClusterRoll 그리고 우리가 실행하기 이전에 룰을 정합니다.

in this case. The resources are nodes then create the cluster role.
이 경우에는 Resources 는 "nodes" 가 되겠고, 그 다음 클러스터 롤을 생성합니다.

The next step is to link the user to that cluster role.
다음 단계는 유저를 클러스터 롤에 연결하는 것입니다.

For this we create another object called cluster role binding
이걸 위해 우리는 또 다른 오브젝트를 만들어야 합니다. 클러스터 롤 바인딩이라 불리는.

the role binding object links the user to the role.
롤 바인딩 오브젝트는 유저를 롤과 연결 시킵니다.

We will name it cluster-admin-role-binding. 
우리는 이걸 클러스터 어드민 롤 바인딩이라고 이름짓겠습니다.

The kind is ClusterRoleBinding. 
KIND 는 ClusterRolBinding.
---------------------------------------------------------------
Under subjects we specify the user details.
subjects 아래에 유저 상세를 정의합니다.

cluster admin user in this case 
이 케이스의 경우 CLuster-admin 이 되겠고요.

the role ref section is where we provide the details of the cluster role we created.
roleRef 섹션은 우리가 만든 클러스터 롤의 상세를 제공 하는 곳 입니다.

create the role binding using the kubectl create command
kubectl create 명령을 통해 롤 바인딩을 생성합니다.

one thing to note before I let you go.
이장을 떠나기 전에 하나 알려줄 것은.

we said that cluster roles and bindings are used for clusters of resources.
우리는 클러스터 롤과 바인딩은 클러스터의 자원을 사용하기 위함이라고 말했습니다.

but that is not a hard rule you can create a cluster role for namespace resources as well.
하지만 이것은 강제적인 규칙은 아닙니다. 네임스페이스 리소스 같은 것도 클러스터 롤로 생성 할 수 있습니다.

When you do that the user will have access to these resources across all name spaces.
이것들을 다 하고 나면, 유저는 모든 네임스페이스를 가로 질러 리소스에 접근 할 수 있을 것입니다.

Earlier when we created a role to authorize a user to access pods the user had access to the pods in a particular namespace along.
이전에 우리가 생성 했던 롤은 특정 네임스페이스에서만 엑세스가 가능 합니다.

with cluster rules. When you authorize a user to access the pods the user gets access to all pods across the cluster. 
클러스터 롤과 함께면 사용자를 POD 에 인증 받고자 할때, 유저는 클러스터를 가로질러 모든 POD 에 접근가능한 권한을 얻을 수 있습니다.

Kubernetes creates a number of cluster roles by default.
쿠버네티스는 몇몇의 클러스터 롤은 기본으로 생성하였습니다.

when the cluster is first setup. We will explore those 
클러스터를 처음 셋업 할때, 우리는 이것들을 탐험해 볼 것입니다. 테스트로

in the practice tests coming up.

Good luck.