---------------------------------------------------------------------------------------
image: docker.io/nginx/nginx
       --registry--userAccount--ImageRepository--
---------------------------------------------------------------------------------------
[ngingx-pod.yaml]
apiVersion: v1
kind: Pod
metadata:
	name: ngingx-pod
spec:
	containers:
	- name: nginx
	  image: privare-registry.io/apps/internet-apps.
	imagePullSecrets:		<-- 개인 리파지토리
	- name: regcred			<-- secret 이름
---------------------------------------------------------------------------------------
>> kubectl create secret docker-registry regcred
>> 	--docker-server= private-registry.io
>> 	--docker-username= registry-user
>> 	--docker-password= registry-password
>> 	--docker-email= registry-user@org.com
---------------------------------------------------------------------------------------
In this lecture we will talk about securing images.
이번 강의에서 우리는 이미지 보안에 대해 이야기 해 볼 것입니다.

We will start with the basics of image names and then work our way towards secure image repositories
우리는 이미지 네임의 기본으로 시작 하겠습니다. 그리고 난 뒤 보안 이미지 리퍼지토리에서 우리의 길을 작업 하고

and how to configure your pods to use images from secure repositories 
그리고 시큐어 리파지토리에서 이미지를 사용하기 위해 POD 를 설정하는 방법으로 가겠습니다.

we deployed a number of different kinds of pods hosting different kinds of applications throughout this course like web apps and databases and redis, keras etc.
우리는 이 강의 동안 몇몇 다른 종류의 어플리케이션을 호스팅 하고 있는 POD 를 배포했습니다. 웹 앱 그리고 데이터 베이스 그리고 레디스 등등

Let's start with a simple pod definition file for instance.
간단한 POD 정의파일부터 시작해 봅시다.

Here we have used the nginx image to deploy an nginx container.
여기 nginx 컨테이너에 배포하기 위한 nginx 이미지가 있습니다.

Let's take a closer look at this image.
이 이미지를 자세히 봅시다.

The name is nginx. But what is this image and where is this image pulled from? 
이름은 nginx 입니다. 하지만 이미지 네임은 무엇이고 그 이미지는 어디서 당겨올까요?

This name follows Docker’s image naming convention. 
이름은 도커 이미 네이밍 컨벤션을 따릅니다.

NGINX Here is the image or the repository name.
여기 있는 nginx 는 리파지토리에 이미지 네임입니다.

When you say nginx, its actually nginx/nginx.
nginx 라고 할때 이건 사실 nginx/nginx 입니다.

(stands for:~의 약자)
The first part stands for the user or account name.
첫번째 부분은 사용자 또는 계정명을 나타냅니다.

Like if you created an account on Docker Hub yourself then the user account that you would get is the first part.
당신이 도커 허브에 계정을 스스로 만든 것 처럼 당신이 유저 계정을 얻는 것이 첫번째 부분입니다.

if you don't provide an account name here it assumes it to be the same as the repository name Which in this case is nginx 
만약 계정명을 여기 입력하지 않는 경우, 이 이름은 리파지토리 이름(이번경우에는 nginx)이랑 동일하다고 가정 합니다.

if you were to create your own account and create your own repositories or images under it then you would use a similar pattern now 


당신이 당신 소유의 계정을 생성 했다면 그리고 당신 소유의 리파지토리를 생성 또는 면
당신은 지금과 비슷한 패턴으로 사용할 수 있습니다.

where are these images stored and pulled from since we have not specified the location where these images are to be pulled from.
어디에 이 이미지가 저장되어 있고 우리가 위치를 지정 하지 않았음에도 어디에서 이 이미지를 뽑아오는 것일까요?

it is assumed to be on docker’s default registry – dockerhub. 
이것은 기본적으로 도커의 기본 리파지토리로 가정됩니다. 도커허브

The dns name for which is docker.io.
도커허브를 위한 DNS 네임은 docker.io 입니다.

The registry is where all the images are stored 
레지스트리에는 모든 이미지가 저장되어 있습니다.

whenever you create a new image or update an existing image you push it to the registry and every time anyone deploys this application it is pulled from that registry.
당신이 새로운 이미지를 생성하거나 기존 이미지를 업데이트 할 때마다. 레지스트리에 이 이미지를 등록 합니다. 그리고 누군가 이 어플리케이션을 배포할때 마다 레지스트리에서 이미지를 뽑아 옵니다.

There are many other popular registries as well.
여기에는 마찬가지로 아주 많은 기타 레지스트리들이 존재합니다.

Google’s registry is at gcr.io, where a lot of Kubernetes related images are stored.
구글의 레지스트리는 gcr.io 라는 주소에 있습니다. 여기에는 아주 많은 쿠버네티스 관련 이미지 들이 저장되어 있습니다.

>> gcr.io/kubernetes-e2e-test-images/dns

These are all publicly accessible images that anyone can download and access 
저 주소에는 누구나 다운로드 하고 사용가능한 모든 공개된 엑세서블 이미지들이 있습니다.

when you have applications built in-house that shouldn’t be made available to the public,
당신이 인하우스 구축 어플리케이션이 있을때, 그 프로그램을 공공으로 이용가능하게 만들 수 있습니다.

Hosting an internal private registry may be a good solution.
내부의 개인 레지스트리를 호스링 하는것은 좋은 방법일 수도 있습니다.

Many cloud service providers such as AWS, Azure or GCP provide a private regist for your cloud account by default. 
AWS, Azure, GCP 같은 많은 클라우스 서비스 제공자 들은 당신의 클라우드 계정에 기본적으로 개인적인 레지스트리를 제공합니다.

On any of these solutions be it on Docker hub or googles registry, or your internal private registry,
이런 솔루션 모두 도커 허브나 구글 레지스트리 또는 당신의 내부 개인 레지스트리에 올릴수 있습니다.

You may choose to make a repository private. 
당신은 리파지토리를 개인으로 만드는걸 선택할 수도 있습니다.

so that it can be accessed using a set of credentials 
때문에. 솔루션들은 인증서를 이용하여 접근 할 수 있습니다.

from a Docker perspective to run a container using a private image, you first login to your private-registry Using the docker log in command input your credentials.
도커 입장 컨테이너를 실행시키기 위해 개인 이미지를 사용한다면, 당신은 첫번째로 당신의 개인 레이지스트리에 로그인 해야 합니다. docker login 명령어에 당신의 증명서를 입력해서요.

>> docker login private-registry.io

one successful run the application using the image from the private registry
이게 완료되면 개인 레지스트리에 있는 이미지를 이용하여 어플리케이션을 실행 합니다.

>> docker run private-registry.io/apps/internal-app


Going back to our pod definition file, to use an image from our private registry
POD 정의파일로 돌아와. 개인 레지스트리에 이미지를 사용하기 위해서는

We replace the image name with the full path to the one in the private registry.
개인레지스트리에 있는 것들중 하나로 전체경로와 함께 이미지 네임을 교체해야 합니다. 

But how do we implement the authentication log in part.
하지만 인증서 구현 부분은 어떻게 할까요?

How does Kubernetes get the credentials to access the private registry 
쿠버네티스는 개인 레지스트리에 접근하기 위한 자격증을 어떻게 얻을까요?

within kubernetes We know that the images are pulled and run by the docker runtime on the worker node.
쿠버네티스 안에서는 워커 노드 안에 도커 런타임에 의해 이미지가 추출되고 실행된다는 것을 우리는 압니다.

(untamed:길들이지 않은)
How do you pass the credentials to the docker untamed on the worker node 
어떻게 자격증명을 아직 활성 상태도 아닌 노드에 있는 도커에게 전달 합니까?

for that We first create a secret object with the credentials in it.
이를 위해 우리는 자격증명을 넣은 시크릿 오브젝트를 생성 합니다. 

The secret is of type Docker registry and we name it Regcred 
시크릿은 도커 레스트리 유형중 일부입니다. 그리고 우리는 regcred 라고 이름 붙입니다.
---------------------------------------------------------------------------------------
>> kubectl create secret docker-registry regcred
>> 	--docker-server= private-registry.io
>> 	--docker-username= registry-user
>> 	--docker-password= registry-password
>> 	--docker-email= registry-user@org.com
---------------------------------------------------------------------------------------
Docker registry is a built in secret type that was built for storing Docker credentials.
도커 레지스트리는 시크릿 타입으로 만들어졌습니다. 도커 레지스트리는 도커 인증서를 저장하기 위해 만들어 졌습니다.

We then specify the registry server name the user name to access the registry the password and the email address of the user.
그 다음으로 레지스트리 서버 네임을 지정합니다. 레지스트리에 접근하기 위하 사용자 이름, 패스워드 그리고 이메일 주소등을 지정합니다.

We then specify the secret inside our pod definition file under the image Pull secret section.
그런 다음 우리는 POD 정의파일에 imagePullSecret 섹션에 시크릿 정보를 지정 합니다.

when the pod created kubernetes or the kubelets on the worker node uses the credentials from the secret to pull images 
pod 가 생성될때 또는 큐블렛이 워커 노드에 올라설때 노드는 이미지를 뽑기 위해 시크릿으로 부터 인증서를 사용합니다.

well that's it for this lecture.

Head over to the practice exercises section and practice working with secure images.