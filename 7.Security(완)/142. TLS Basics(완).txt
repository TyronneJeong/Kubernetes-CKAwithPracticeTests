---------------------------------------------------------
[TLS:암호화 보안 프로토콜] - 이론수업
(Transport Layer Security)
---------------------------------------------------------
Hello and welcome to this video on understanding SSL TLS certificates.
안녕하세요. SSL 과 TLS 인증서에 대한 이해 비디오에 오신걸 환영합니다.

In this video we will look at the absolute basics of what TLS certificates are why you need them and how you can configure certificates to secure SSH or web servers.
이 비디오 에서는 TLS인증서가 왜 필요한지 그리고 어떻게 인증서를 SSH 보안 또는 웹서버에 구성하는지에 대한 절대 기초를 볼 것입니다.

A certificate is used to guarantee trust between two parties during a transaction.
인증서는 두 파티간 트랜잭션을 하는 동안 신용을 보장하는데 사용됩니다.

For example, when a user tries to access a web server, TLS certificates ensure that the communication between the user and the server is encrypted and the server is who it says it is.
예를 들어, 사용자가 웹서버에 접근하여 할때, TLS 인증서는 사용자와 유저간의 커뮤니테이션은 암호화 되고 서버가 해당 서버임을 보장합니다. 

Let’s take a look at a scenario. 
시나리오를 살펴 봅시다. 

(credentials:자격증명)
Without secure connectivity, If a user were to access his online banking application the credentials he types in would be sent in a plain text format.
보안 접속 없이 사용자가 그의 온라인 뱅킹 어플리케이션을 접속 한다면, 그가 입력한 자격증명은 플레인 텍스트 형식으로 전송 됩니다.

The hacker sniffing network traffic could easily retrieve the credentials and use it to hack into the user's bank account.
해커는 네트워크 트래픽을 훔쳐 손쉽게 자격증명을 확인 할수 있습니다. 그리고 사용자의 은행 계정을 해킹하는데 이용할 수 있습니다.

(obviously:확실히)
Well that's obviously not safe.
맞습니다. 이건 확실히 안전하지 않습니다.

So you must encrypt the data being transferred using encryption keys the data is encrypted using a key which is basically a set of random numbers and alphabets.
그래서 데이터를 전송할때에는 무작위의 숫자와 알파벳 집합을 기본으로 하는 암호화키를 이용하여 데이터를 필히 암호화 하여야 합니다.

(be recognized:인식할수)
you add the random number to your data and you encrypted into a format that cannot be recognized.
당신의 데이터에 임의의 숫자를 추가합니다 그리고 인식할 수 없는 포맷으로 암호화 합니다.

the data is then sent to the server.
이 데이터를 서버로 보냅니다.

The hacker sniffing the network gets the data but can't do anything with it.
해커는 네트워크를 훔쳐 데이터를 확보 합니다. 하지만 이것으로 아무것도 할 수 없습니다.

However the same is the case with the server receiving the data
하지만 서버가 데이터를 수신받는 다 해도 마찬가지입니다.

it cannot decrypt that data without the key.
데이터는 키가 없이는 복호화를 할수가 없습니다.

So a copy of the key must also be sent to the server 
그래서 복사본의 키는 서버에 보내둡니다.

so that the server can decrypt and read the message.
그래서 서버역시 메세지를 복화화하고 읽을 수 있게 됩니다.

since the key is also sent over the same network.
동일한 네트워크에 키를 보내면서 부터

The attacker can sniff that as well and decrypt that data with it.
공격자는 마찬가지로 훔칠수가 있습니다. 그리고 이를 이용해 데이터를 복호화 할 수도 있습니다.

[대칭키 암호화]

This is known as SYMMETRIC ENCRYPTION.
이것을 대칭키 암호화 라고 합니다.

It is a secure way of encryption but since it uses the same key to encrypt and decrypt the data and since the key has to be exchanged between the sender and the receiver
이것은 암호화 보호 방법입니다. 하지만 데이터를 암복호화하는데 동일한 키를 사용하면서 부터 그리고 보내는자와 받는자 같 키를 교환하면서 부터

there is a risk of a hacker gaining access to the key and decrypting the data and that's where asymmetric encryption comes in.
그들 사이엔 해커가 키를 획득하여 데이터를 복호화해버리는 리스크가 생겼습니다. 이곳이 비대칭 암호화가 필요한 부분입니다.

[비대칭 암호화]

Instead of using a single key to encrypt and decrypt data
데이터 암복호화에 단일 키를 사용하는 대신에.

asymmetric encryption uses a pair of keys a private key and a public key
비대칭 암호화는 두개의 키를 사용합니다. 프라이빗 키와 퍼블릭 키 입니다.

well they are private and public keys.
좋습니다. 이제 피라이빗 키와 퍼블릭 키가 생겼습니다.

But for the sake of this example we will call it a private key and a public lock 
하지만 보다 편리한 예를 들기 위해 우리는 프라이빗 키와 퍼블릭 락이라고 부르도록 하겠습니다.

we will get back to that at the end.
우리는 아까 그 지점으로 돌아가 보겠습니다.

But for now think of it as a key and a lock pair 
하지만 지금은 그것을 키와 자물쇠 쌍으로 생각하십시오.

a key which is only with me. So it's private.
키는 오직 나에게만 있습니다. 이것은 프라이빗 입니다.

A lock that anyone can access. So it's public.
락 누구나 접근할 수 있습니다. 그래서 퍼블릿입니다.

The trick here is if you encrypt or lock the data with your lock you can only open it with the associated key.
여기 트릭은 만약 당신이 암호화 또는 데이터 락을 이용해 락을 건다면. 당신은 오직 연관된 키로만 데이터를 열 수 있습니다.

So your key must always be secure with you and not be shared with anyone else.
그래서 당신의 키는 항상 보호되어야 합니다. 그리고 다른 사람에게 공유되어서는 안됩니다.

It's private.
이것이 프라이빗입니다.

But the lock is public and may be shared with others but they can only lock something with it 
하지만 락은 공공제고 다른이에게 공유될 수도 있습니다. 하지만 그들은 이걸 오직 락을 거는 용도로만 사용할 수 있습니다.

no matter what is locked using the public lock
퍼블릭 락을 이용하여 락이 되더라도 아무런 상관이 없습니다.

it can only be unlocked by your private key 
이건 오직 프라이빗 키로만 언락을 할 수 있습니다.

before we go back to our Web server example.
다시 우리의 웹 서버 예제이전으로 다시 돌아가 보겠습니다.

(use case:사용사례)
let’s look at an even simpler use case of securing SSH access to servers using key pairs. 
키 쌍을 이용하여 서버에 접근하여는 보호된 SSH 사용사례를 살펴 봅시다.

You have a server in your environment that you need access to.
당신의 환경에 당신이 접근하려는 서버가 있습니다.

You don't want to use passwords as they're too risky.
당신은 패스워드를 사용하는 것은 너무 위험 하므로 원치 않습니다.

So you decide to use key pairs.
그래서 당신은 키-쌍을 사용하기로 결정합니다.

you generate a public and private key pair.
당신은 공개키와 개인키 쌍을 제조 했습니다.

You can do this by running the ssh-keygen command.
ssh_keygen 명령어를 통해서 이 작업을 할 수 있습니다.

>> ssh-keygen
created 2 files. [id_rsa, id_rsa.pub]

It creates two files. Id_rsa is the private key and id_rsa.pub is the public key. 
이 명령어로 2개의 파일이 생성됩니다. id_Rsa는 프라이빗 키 입니다. 그리고 id_rsa.pub 은 공개 키 입니다.

Well, not a public key, a public lock. 
좋습니다. 개인키와 공개 락 입니다.

You then secure your server by locking down all access to it, except through a door that is locked using your public lock.
당신은 그런 다음 당신의 서버에 접근 하는 모든 접근을 차단 하여 서버를 보호 합니다. 공개키를 사용하여 암호화된 출입을 제외하고.

It's usually done by adding an entry with your public key into the servers ssh authorized_keys file.
이 작업은 보통 서버에 SSH 인증키 파일속에 공개키 엔트리를 추가함으로써 완료됩니다.

So you see the lock is public and anyone can attempt to break through.
그래서 락은 공개되어 있고 누구나 돌파를 시도 할 수 있습니다.

But as long as no one gets their hands on your private key which is safe with you on your laptop no one can gain access to the server. 
하지만 누구도 당신의 노트안에 당신과 함께 안전하게 있는 개인키를 손에 넣지 않는 한, 서버에 접근 가능 한 사람은 없습니다.

When you try to SSH you specify the location of your private key in your SSH command.
SSH명령어 안에서 프라이빗 키의 위치를 지정하여 SSH 접속을 시도 할때

What if you have other servers in your environment.
당신의 환경에 다른 서버가 있다면 어떻게 될까요?

How do you secure more than one server with your key pair?
하나 이상의 서버가 있다면 당신의 키 쌍으로 어떻게 보호 할까요?

Well, you can create copies of your public lock and place them on as many servers as you want.
좋습니다. 당신은 당신의 공개 키를 복사 할수 있고 당신이 원하는 만큼 많은 서버에 위치 시킬 수 있습니다.

You can use the same private key to SSH into all of your servers securely.
당신의 모든 서버에 SSH 접속을 위해 동일한 개인키를 사용할 수 있습니다.

What if other users need access to your servers.
만약에 다른 사용자들이 당신의 서버에 접근할 필요가 생긴다면?

well they can do the same thing.
그들도 동일한 것을 할 수 있습니다.

They can generate their own public and private key pairs as the only person who has access to those servers.
그들은 그들 소유의 공개 및 개인 키 쌍을 생성할 수 있습니다. 처럼. 오직 한 사람만이 서버에 접근 가능 하도록

You can create an additional door for them and lock it with their public locks 
그들을 위한 추가적인 문을 만들 수 있습니다. 그리고 그들의 공개키로 잠궈버립니다.

>> cat ~/.ssh/authorized_keys
>> ssh-rsa ASD891AS1030ASDJIIENMIMMFKMFKkwiei user01
>> ssh-rsa i38949jdfdidivdvdKPRMIMMFKMFKkwiei user02

copy their public locks to all the servers.
그들의 공개키를 복사하여 모든 서버를 걸어잠급니다.

And now other users can access the servers using their private keys.
그러면 다른 유저들이 그들의 개인키를 이용하여 서버에 접근할 수 있게 됩니다.

Let's go back to our Web server example.
그럼 우리 웹서버 예제로 돌아가 봅시다.
----------------------------------------------------------------

You see the problem we had earlier with symmetric encryption was that the key used to encrypt data had to be sent to the server over the network along with the encrypted data.
이전에 대칭 암호화와 관련된 문제는 데이터를 암호화하는데 사용된 키가 암호화된 데이터와 함께 보내져야 한다는 것에 있습니다.

And so there is a risk of the hacker getting the key to decrypt the data.
그리고 해커가 키를 획득하고 데이터를 복호화하는 위험도 있습니다.

What if we could somehow get the key to the server safely.
만약에 어떻게든 서버의 키를 안전하게 얻을 수 있다면??

Once the key is safely made available to the server the server and client can safely continue communication with each other using symmetric encryption.
서버에서 키를 안전하게 사용할 수 있게 되면 서버와 클라이언트는 대칭 암호화를 사용하여 서로 안전하게 통신을 지속 할 수 있습니다.

[서로 암호화된 데이터를 주고 받아야 하니까 대칭키의 공유가 필요하긴 함.]
- 하지만 대칭키를 해커가 가지게 되면 데이터를 복호화 할 수 있게 됨.
- 때문에 대칭키를 보호할 방법이 필요한데. 이때 비대칭 암호화를 사용함.
- 서버에는 공개와 개인키 쌍을 만들어둠.
- 공개키는 암호화만 가능. 개인키는 복호화가 가능.

to securely transfer the symmetric key from the client to the server, we use Asymmetric Encryption.
클라이언트에서 서버로 대칭 키를 안전하게 전송 하기 위해 비대칭 암호화를 사용합니다.

So,we generate a public and private key pair on the server.
따라서 서버에 공개키와 개인키 쌍을 생성합니다.

We're going to refer to the public lock as public key going forward now that you have got the idea 
이제 아이디어를 얻었음으로 공개 락이라 부르는 공개키를 참조할 것입니다.

that The ssh-keygen command we used earlier creates a pair of keys for SSH purposes.
이 SSH-KEYGEN 커맨드는 SSH 키쌍을 생성하는 용도로 사용했었습니다.

So the format is a bit different.
하지만 포맷이 살짝 다릅니다.

Here we use the openssl command to generate a private and public key pair. 
여기 OPENSSL 명령어를 사용하여 공개 및 개인키를 생성하겠습니다.

>> opensshl genrsa -out my-bank.key 1024
my-bank.key

>> openssl rsa -in my-bank.key -pubout > mybank.pem

And that’s how they look.
그리고 어떤지 한번 보라.

When the user first accesses the web server using https, he gets the public key from the server.
사용자가 https 사용하여 웹 서버에 처음 접속하여 할때, 그는 서버로 부터 공개키를 얻게 됩니다.

[공개키는 암호화만 가능]

Since the hacker is sniffing all traffic that is assumed he too gets a copy of the public key.
해커가 모든 트래픽을 훔치면서 부터 해커 역시 이 공개키의 복사본을 가질 거라고 가정합니다.

We'll see what he can do with it.
우리는 그가 공개키로 무엇을 할수 있는지 지켜 보겠습니다.

The user in fact the user's browser then encrypts the symmetric key using the public key provided by the server.
실제로 사용자자의 브라우저는 서버에서 제공된 공개키를 이용하여 대칭키를 암호화 하였습니다.

The symmetric key is now secure the user then sends this to the server.
대칭키는 현재 사용자를 보호하고 이정보를 서버로 보냅니다.

[대칭키는 사용자가 서버에 전달함 -> 서버는 공개키니까 개인키로 복호화 하여 전달받은 대칭키를 확인함]

The hacker also gets a copy 
해커 또한 복사본을 얻습니다.

the server uses the private key to decrypt the message and retrieve the symmetric key from it.
서버는 개인키를 이용하여 메세지를 복호화 하고 메세지로 부터 대칭키를 조회합니다.

However the hacker does not have the private key to decrypt and retrieve the symmetric key from the message it received 
하지만 해커는 복호화할 개인키를 가지고 있지 않습니다. 그리고 수신받은 메세지로 부터 대칭키를 조회합니다.

[하지만 해커는 복호화가 불가능 함. 하지만 대칭키는 메세지에서 추출 가능함.]

the hacker only has the public key with which he can only lock or encrypt a message and not decrypt the message 
해커는 오직 메세지를 암호화할 수 있는 복호화 하지 못하는 공개키 만을 가지게 됩니다.

the symmetric key is now safely available only to the user and the server
대칭키는 이제 서버와 사용자만이 안전하게 이용가능합니다.

[결국은 사용자가 대칭 암호화의 기준을 서버에 전달하는 것 인듯.]
---------------------------------------------------------------
they can now use the symmetric key to encrypt data and sent to each other.
그들은 이제 데이터를 암호화하는데 대칭키를 사용할수 있습니다. 그리고 서로에게 데이터를 보낼 수 있습니다.

the receiver can use the same symmetric key to decrypt data and retrieve information.
수신기는 동일한 대칭키를 데이터를 복호화 하는데 사용할 수 있씁니다.

The hacker is left with the encrypted messages and public keys with which he can decrypt any data with asymmetric encryption.
해커에세는 암호화된 메세지와 모든 데이터를 비대칭 암호화 할 수 있는 공개키만이 남게 됩니다.

[TLS 다시정리]
1. 비대칭 키-공개/개인 키 를 최초 핸드쉐이크에 주고 받는다.
2. 암호화 텍스트를 주고 받는다. with 공개키
3. 복호화는 서버가 가능하다. 비대칭 키 이므로
4. 패킷 스니핑을 당해도 비대칭 키-공개키 와 암호화 텍스트만 유출 되므로 안심

We have successfully transferred the symmetric keys from the user to the server and what's symmetric encryption we have secured all future communication between them. Perfect.
우리는 성공적으로 대칭키를 전송하였습니다. 유저에서 서버로 그리고 대칭형 암호화로 우리는 그들 사이에 모든 커뮤니케이션을 보호 할 수 있게 되었습니다.

the hacker now looks for new ways to hacking to our account and so he realizes that the only way he can get your credential is by getting you to type it into a form he presents.
해커는 이제 우리의 계정을 해킹할 새로운 방법을 찾습니다. 그리고 마침내 그는 꺠닫습니다. 우리의 자격증을 얻을 유일한 방법은 그가 제공하는 폼에 입력하도록 하는 것이라는 걸

So he creates a Web site that looks exactly like your bank's web site The design is the same.
그래서 그는 웹 사이트를 만들었습니다. 정확히 뱅킹 웹사이트와 동일해 보이는.

The graphics are the same.
그래픽이 동일합니다.

The Web site is a replica of the actual bank's Web site.
그 웹 사이트는 실제 은행 사이트의 복제본 입니다.

He hosts the website on his own server.
그는 그 사이트를 자신의 서버에서 호스트 하고 있습니다.

He wants you to think it's secure too.
그는 이것도 보호되고 있다고 생각하길 원합니다.

So he generates his own set of public and private key pairs and configure them on his web server.
그래서 그는 공개및 개인비 쌍을 생성하고 해커의 웹서버에 구성하게 됩니다.

And finally he somehow manages to tweak your environment or your network to route your requests going to your bank's web site to his servers.
그리고 마침내 어떤방법으로건 당신의 환경 또는 네트워크를 비틀어 은행으로 가는 당신의 요청을 해커의 서버로 전송되도록 만들었습니다.

When you open up your browser and type the website address in 
당신이 브라우저를 열고 웹 사이트 주소를 입력 했을때,

you see a very familiar page the same login page of your bank 
당신은 아주 친숙한 페이지를 봅니다. 동일한 은행 로그인 페이지.

that you're used to seeing.
당신은 보는것에 익숙하다는 것입니다.

So you go ahead and type in the username and password. 
그래서 계속 진행하게 됩니다. 이름을 입력하고 패스워드를 입력하도.

You made sure you typed in HTTPS in the URL to make sure that communication is secure encrypted 
당연히 https 를 url 로 입력했기 때문에 당연하게 커뮤니케이션은 암호화 되어 보호 됩니다.

your browser receives the key you send encrypted symmetric key
당신의 브라우저는 키를 받게 됩니다. 당신은 대칭키를 보냅니다.

and then you send your credentials encrypted with the key and the receiver decrypt the credentials with the same symmetric key.
그런다음 당신은 당신의 암호화된 자격 증명을 키와 함께 전송합니다. 그리고 수신자는 동일한 대칭키를 이용하여 자격증명을 복호화 하게 됩니다.

[해커의 변칙]
- 최초 비대칭 암호화로 대칭키를 주고 받는 핸드쉐이크 과정이 사라지고
- 대칭키로만 소통 하게 만든 다음 복호화를 해버리는 구조

(manner:방법, 태도, 예의, 풍습, 습성)
you've been communicating securely in an encrypted manner but with the hackers server.
당신은 암호화된 방식으로 안전하게 통신했지만, 해커서버와 통신했습니다.

(As soon as : ~하자마자)
As soon as you send in your credentials, you see a dashboard that doesn’t look very much like your bank's dashboard.
당신의 자격증명을 보내자 마자, 당신의 뱅킹 데쉬보드와 크게 다른 데쉬보드를 보게 됩니다.

[대칭키를 해커의 서버와 생성하여 복호화 가능한 데이터를 전송해버림]

---------------------------------------------------------------
그래서
[인증서]
가 등장.

What if you could look at the key you received from the server and see if it is a legitimate key from the real bank server 
만약에 당신이 받은 서버의 키를 볼 수 있다면 어떨까여, 그리고 실제 은행 서버의 합법적인 키인지 확인할 수 있다면 어떨까요?

when the server since the key it does not send the key alone.
서버는 그 이후 키를 단독으로 보내지 않게 되었습니다.

It sends a certificate that has the key in it.
메세지에 키를 포함한 인증서를 보냅니다.

If you take a closer look at the certificate you will see that it is like an actual certificate.
만약 인증서를 자세히 보게 되면, 실제 인증서 와 닮은걸 볼 수 있습니다.

But in a digital format it has information about who the certificate is issued to the public key of that server the location of that server etc. 
하지만 디지털 포맷에는 해당 서버의 공개키로 인증서를 발급한 사람에 대한 정보가 있습니다.

on the right you see the output of an actual certificate
오른쪽에 실제 인증서의 출력을 볼 수 있습니다.

(subject:주체)
every certificate has a name on it the person or subject to whom the certificate is issued to.
모든 인증서는 사람 발급받은 사람 또는 주체가 있습니다.

That is very important as that is the field that helps you validate their identity.
이부분은 그들의 정체를 검증 하여 당신을 도울 수 있는 필드 이므로 매우 중요합니다.

If this is for a web server this must match what the user types in the you are on his browser.
만약 웹서버용인 경우, 이 인증서는 사용자가 브라우저에 입력한 내용과 일치해야 합니다.

If the bank is known by any other names and if they like their users to access their application with the other names as well.
은행은 사용자가 다른 이름으로도 알려져 있고, 다른 이름으로 그들의 어플리케이션에 엑세스 하기를 원하는 경우

then all those names should be specified in the certificate under the subject alternative name section.
그때는 그 모든 이름이 인증서 아래에 교체 가능한 이름 섹션ㅇ ㅔ지정되어 있어야 합니다.

But you see anyone can generate a certificate like this.
하지만 모든 사람은 인증서를 이렇게 만들수 있다는걸 알 수 있습니다.

You could generate one for yourself saying you're Google 
자신이 구글이라고 자기 스스로 생성할 수 있습니다.

------------------------------------------------------------
[TLS 인증]
- 최초 핸드쉐이크 과정에서 난수 교환을 함
	- 브라우저가 사용가능한 암호화 방식과, 난수 조합을 전달(클라이언트 -> 서버)
	- 서버에서 TLS버전과 원하는 암호화 방식과 난수를 전달. 
	- 클라이언트가 서버로 키 교환에 필요한 정보를 제공함.(pre-master secret)
		- 서버가 보낸 랜덤값과 클라이언트가 가지고 있는 랜덤 값을 조합하여 서버에 제공(비대칭-공개키로 암호화)
	- 클라이언트는 대칭키의 시드를 이미 알고 있고, 공개키로 암호화하여 서버로 전송하였으니 서버로 시드 값을 알게된다. 이 pre-master secret 값을 가공하여 master secret을 생성하고 이를 대칭키로 사용한다.
	- 이 과정에 인증서를 요구할 수도 있음.
- 핸드쉐이크가 끝나면 대칭키 알고리즘으로 통신 방법을 전환
------------------------------------------------------------

and that's what the hacker did in this case.
그리고 이 경우 해커가 할 수 있는 것은 무엇이 있을까요?

He generated a certificate saying he is your bank's web site.
그는 당신의 뱅킹 웹 사이즈로 가정되는 인증서를 생성했습니다.

(legit:합법적인)
So how do you look at a certificate and verify if it is legit.
그럼 어떻게 인증서를 보고 이것이 합법적인 것인지 확인하시겠습니까?

That is where the most important part of the certificate comes into play 
이부분은 인증서가 정상적으로 작동하는데에 가장 중요한 부분입니다.

who's signed and issued the certificate.
누가 서명했고 인증서를 발급했는가.
--------------------------------------------------------------
If you generate the certificate then you will have to sign it by yourself.
만약 당신이 인증서를 생성했고 해당 서명을 자신이 직접했다면

That is known as a self signed certificate.
이것을 셀프싸인 인증서 라고 합니다.

Anyone looking at the certificate you generated.
누구나 이 인증서는 당신이 만든것이라는 것을 알 수 있습니다.

Immediately know that it is not a safe certificate because you have signed 
당신이 서명 했기 때문에 즉각적으로 이것은 안전하지 않은 인증서라는 것을 알 수 있습니다.

if you looked at the certificate you received from the hacker closely you would have noticed that it was a fake certificate that was signed by the hacker himself.
해커로 부터 수신 받은 인증서를 자세히 보면, 이것은 가짜 인증서라는 것을 알 수 있습니다. 해당 인증서가 해커 스스로에게 서명 된 것이기에.

(As a matter of fact:사실은)
As a matter of fact your browser does that for you.
당신의 브라우저는 당신을 위해 이렇게 합니다.

(wherein:여기서)
All of the web browsers are built in with a Certificate validation mechanism, wherein the browser checks the certificate received from the server and validates it to make sure it is legitimate.
모든 웹 브라우저는 인증서 검증 매커니즘이 포함되어 개발되어있습니다. 여기서 브라우저는 서버로부터 수신받은 인증서를 확인 합니다. 그리고 검증합니다. 이것이 당연히 합법적으로 생성된 것인지.

if it identifies it to be a fake certificate then it actually warns you. 이것이 가짜 인증서로 밝혀지는 경우 이 사실을 당신에게 알려줍니다.

So then how do you create a legitimate certificate for your web servers that the web browsers will trust.
그럼 우리의 웹서버는 어떻게 웹브라우저가 신용할 합법적인 인증서를 생성할까요.

How do you get your certificates signed by someone with authority.
어떻게 당신의 인증서는 다른이로부터 서명과 권한을 부여 받을까요.

That’s where Certificate Authorities or CAs comes in. 
여기가 CA 가 작동하는 곳 입니다.

They are well known organizations that can sign and validate your certificates for you.
CA가 인증서에 서명하고 유효성을 검사 할 수 있는 걸로 잘 알려진 조직입니다.

Some of the popular ones are Symantec, Digicert, Comodo, GlobalSign etc.
또 다른 유명 업체로는 시만텍, 디지서트, 코모도, 글로벌 사인 등이 있습니다.

The way this works is you generate a certificate signing a request or CSR using the key you generated earlier and the domain name of your Web site.
이것이 작동하는 방식은 이전에 생성한 키와 웹 사이트의 도메인 이름을 사용하여 요청 또는 CSR 에 서명하는 인증서를 생성하는 것입니다.

You can do this again using the open SSL command.
여기서 OPENSSL 명령어를 다시한번 사용할 수 있습니다.

This generates a my-bank.csr file which is the certificate signing request that should be sent to the CA for signing.
이 명령은 CA에게 보내지는 CSR의 my-bank.csr 파일을 생성합니다.

[CSR : Certificate Signing Request]

It looks like this 
이것은 이렇게 생겼습니다.

the certificate authorities verify your details and once checks out.
인증 기관은 당신의 상세정보를 확인 하고 한번 체크 아웃 합니다.

they sign the certificate and send it back to you.
기관은 인증서에 사인 하고 이걸 돌려보내줍니다.

You now have a certificate signed by a CA that the process trust 
당신은 이제 CA로부터 발급 받은 인증서를 가지게 되었습니다. 신용이 작동하는

if hacker tried to get his certificate signed the same way he would fail during the validation phase and his certificate would be rejected by the CA.
만약 해커가 인증서를 얻기 위해 동일한 방법을 시도 한다면, 검증 단계에서 실패할 것입니다. 그리고 그의 인증은 CA로부터 거절 될 것입니다.

So the Web site that he's hosting won't have a valid certificate.
그래서 해커의 웹사이트에는 그가 유효한 인증서가 없게 됩니다.

The CAs use different techniques to make sure that you are the actual owner of that domain.
CA 는 당신이 도메인의 실제 소유주라는걸 확인하는기 위해 다른 기술을 이용합니다.

You now have a certificate signed by CA that the browser is trust.
당신은 현재 브라우저 로부터 신뢰받은 인증서를 가지고 있습니다.

But how do the browsers know that the CA itself was legitimate.
하지만 어떻게 브라우저는 CA 가 학법적인을 알수 있을까요?

For example what if the certificate was signed by a fake CA.
예를들어, 가짜 CA로부터 서명받은 인증서가 있다면.

In this case our certificate was signed by Symantec.
이 경우 시만텍으로 서명받은 인증서가 있습니다.

How would the browser know Symantec is a valid CA and that the certificate was infact signed by Symantec
브라우저는 어떻게 시만택이 유효한 CA 인지 알수 있을까요? 그리고 실제 시만텍으로부터 서명받은것인지 알수 있을까요?

and not by someone who says they are semantec. 
그리고 시만텍이라고 가장하는 사람이 아니라는걸 알수 있을까요?

The CA is themselves have a set of public and private key pairs.
CA는 그들 자체적으로 공개키와 개인키를 가지고 있습니다.

The CA is use their private keys to sign the certificates the public keys of all the CAs are built in to the browsers.
CA들은 그들의 개인비를 이용하여 인증서에 서명 합니다. 모든 CA의 공개키는 브라우저에 심어져 있습니다.

The browser uses the public key of the CA to validate that the certificate was actually signed by the CA themselves.
그 브라우저는 공개키를 이용합니다. CA 를 검증하고 실제 CA 가 사인한 인증서인지 검증하기 위해

You can actually see them in the settings of your web browser, under certificates. 
당신은 실제로 볼 수 있습니다. 웹브아주서 인증서 셋팅을

They are under trusted CAs tab.
신용할수 있는 인증서탭아래에 있습니다.

Now these are public CAs that help us ensure the public websites we visit, like our banks, email etc are legitimate.
이제 CA가 우리를 돕습니다. 공공 웹사이트에 방문 했을때, 해당 사이트가 합법적인지를 보장해줍니다.

However they don't help you validate sites hosted privately say within your organization.
하지만 CA는 당신의 조직안에서 개인적으로 호스팅 되는 사이트의 검증은 도울 수 없습니다.

For example, for accessing your payroll or internal email applications. 
예를 들어 페이롤 또는 내부 이메일 어플리케이션에 엑세스 하기 위해서

For that you can host your own private CAs.
이를 위해서는 당신 소유의 개인 CA 를 호스팅 해야 합니다.

Most of these companies listed here have a private offering of their services. 
대부분의 기업들은 이곳에 그들이 제공하는 서비스 목록을 나열해 둡니다.

A CA server that you can deploy internally within your company.
CA서버는 당신의 회사안에 내부적으로 배포 할 수 있습니다.

You can then have the public key of your internal CA server installed on all your employees browsers and establish secure connectivity within your organization.
그리고 당신은 당신 조직 내부에서 구성된 보안 접속이 설치된 서버를 통해 공개키를 가질 수 있습니다.
-------------------------------------------------------------

so let's summarize real quick.
빠르게 요약해 보겠씁니다.

We have seen why you may want to encrypt messages being sent over a network to encrypt messages.
우리는 네트워크를 통해 전송 될때 왜 메세지를 암호화 하길 원하는지를 보았습니다. 

We use asymmetric encryption with a pair of public and private keys and admin uses a pair of keys to secure SSH connectivity to the servers.
우리는 비대칭 암호화를 사용합니다. 공개 및 개인키로 그리고 관리자는 SSH 연결의 보안을 위해 키 쌍을 이용합니다.

The server uses a pair of keys to secure HTTPS traffic.
서버는 키 쌍을 https 트래픽을 보호하는데 사용합니다.

For this the server first sends a certificate signing request to a CA.
해당 서버는 최초로 인증서에 서명 요청을 CA에 보냅니다.

The CA uses its private key to sign the CSR.
CA는 자신들의 개인키를 이용하여 CSR을 사인합니다.

Remember all users have a copy of the CAs public key.
기억하세요. 모든 사용자는 CA의 공개키 사본을 가지고 있습니다.

The signed certificate is then sent back to the server the server configure is the web application with the signed certificate.
서명된 인증서는 서버로 돌려보내집니다. 서버는 웹어플리케이션을 서명된 인증서를 이용해 구성합니다.

Whenever a user accesses the web application the server first sends the certificate with its public key.
유저가 웹 어플리케이션 서버에 접근할 때마다, 최초로 인증서와 함께 공개키를 전송합니다.

The user or rather the user's browser reads the certificate and uses the CA's public key to validate and retrieve the servers.
유저 또는 사용자 브라우저는 인증서를 읽고 CA공개키를 이용해 검증합니다. 그리고 서버를 조회합니다.

Public key it then generates a symmetric key that it wishes to use going forward for all communication.
공개키는 다음 대칭키를 생성합니다. 앞으로의 모든 커뮤니테이션에 사용되길 원하는

The symmetric key is encrypted using the server as public key and sent back to the server 
대칭키는 서버에서 사용되는 공개키로 암호화 됩니다. 그리고 서버로 보내집니다.

the server uses its private key to decrypt the message and retrieve the symmetric key.
서버는 개인키를 이용하여 메세지를 복호화 합니다. 그리고 대칭키를 조회합니다.

The symmetric key is used for communication going forward 
대칭키는 계속해서 소통하는데 이용됩니다.

so the administrator generates a key pair for securing SSH.
그래서 관리자는 SSH보안을 위한 키 쌍을 생성합니다.

the web server generates a key pair for securing the web site with HTTPS, 
웹서버는 웹사이트를 보호하기 위핸 https 로 키쌍을 생성합니다.

the Certificate Authority generates its own set of key pair to sign certificates.
인증 기관은 그들의 키 쌍으로 인증서에 서명 합니다.

The end user though only generates a single symmetric key.
최종 사용자는 오직 공개키를 생성합니다.

Once he establishes trust with the Web site he uses his username and password to authenticate the Web server 
웹 서버를 구축하면, 사용자의 이름과 패스워드를 이용하여 웹 서버를 인증 합니다.

with the servers key pairs. 
서버의 키 쌍으로

The client was able to validate that the server is who they say they are but the server does not for sure know if the client is who they say they are.
클라이언트는 검증이 가능합니다. 서버가 그들이 말하는 그들인지. 하지만 서버는 클라이언트들이 그들이 주장하는 사람들인지 장담할 수 없습니다.

(impersonating:사칭)
It could be a hacker impersonating a user by somehow gaining access to his credentials 
이것은 해커가 유저를 사칭 할 수 있습니다. 어떻게든 인증서에 접근하여.

not over the network for sure as we have secured it already with TLS. May be some other means. 
우리는 이미 TLS 로 네트워크를 보호하고 있기 때문에. 다른 방법일 것입니다.

Anyway, So what can the server do to validate that the client is who they say they are 
어찌되었건, 클라이언트가 그들이 그들이라는것을 검증하기위해 서버는 무엇을 할 수 있을까요?

for this, as part of the initial trust building exercise.
이를 위해 초기 구축 운동의 일환으로

The server can request a certificate from the client 
서버는 클라이언트로 부터 인증서를 요청할 수 있습니다.

and so the client must generate a pair of keys and a signed certificate from a valid CA 
그리고 클라이언트가 키쌍을 생성하고 CA로부터 인증서에 서명을 받아야만 합니다.

the client then sends the certificate to the server for it to verify that the client is who they say they are.
그런 다음 클라이언트는 인증서를 서버로 보냅니다. 클라이언트가 주장하는 그들이 그들이라는것을 확인하기 위해

Now you must be thinking you have never generated a client's certificate to access a Web site.
이제 생각되어야 합니다. 당신은 웹사이트에 접근하기 위해 생성한적이 없는 클라이언트 인증서를 가지고 있다고.

Well that's because TLS client certificates are not generally implemented on web servers even if they are it's all implemented under the hood.
이것이 TLS 클라이언트 인증서가 웹서버에 보편적으로 구현되지 않은 이유 입니다. 웹서버내에 모든것이 구현되어 있음에도.

So in normal user don't have to generate and manage certificates manually 
그래서 일반적인 유저는 수동으로 인정서를 생성하거나 관리하지 않습니다.

so that was the final piece about client certificates 
이것이 사용자 인증의 마지막 조각이였습니다.

this whole infrastructure including the CA the servers the people and the process of generating distributing and maintaining digital certificates is known as public key infrastructure or PKI 
이 모든 인프라스트럭쳐는 CA 서버를 포함하고 있습니다. 사람과 생성과정, 디지털 키 인프라 스트럭쳐 또는 PKI 라고 부르는 디지털 인증서의 관리.

[PKI 가 이거였군요]
(clear up:정리하다, 청소하다)
finally let me clear up something before you leave.
마지막으로 떠나기전 정리할 것이 있습니다.

I've been using the analogy of a key and lock for private and public keys.
개인키와 공개키를 비유해서 사용했습니다.

(impression:인상을주다)
If I give you the impression that only the lock or the public key can encrypt data then please forgive me as it's not true.
만약 공개키는 데이터를 암호화만 할 수 있다는 인상을 주었다면, 부디 용서해 주세요. 이는 사실이 아닙니다.

These are in fact two related or paired keys.
이들은 실제로 두개의 쌍을 이루는 키 입니다.

You can encrypt data with any one of them and only decrypt data with the other.
당신은 둘중 하나로 암호화하고 다른 하나로는 복호화만 가능 합니다.

You cannot encrypt data with one and decrypt with the same.
이중 하나로는 암호화를 할수가 없습니다. 복호화도 마찬가지입니다.

So you must be careful what you encrypt your data with.
그러니 이것으로 데이터를 암호화 할때 주의를 기울이십시오.

If encrypted data with your private key then remember anyone with your public key which could really be anyone out there will be able to decrypt and read your message.
만약 당신의 개인키를 이용하여 데이터를 암호화 한다면, 당신의 공개키를 가지 모든 사람이 데이터를 복호화 하고 메세지를 읽을 수 있다는걸 기억하세요.

[마지막에 뭔 반전??]
- 키라는건 쌍으로 한쪽은 암호화 한쪽은 복호화만 가능하다.
- 대칭키는 서로 동일한 암복호화 키를 공유하는 것
- 비대칭키 암호화는 한쪽은 암호화만 가능하고 한쪽은 암복호화가 가능한 개인키가 따로 있다는 것
- 개인키를 몰라야 복호화를 못한다는 의미인가?

Finally, a quick note on naming convention. Usually certificates with Public key are named crt or pem extension. So that’s server.crt,
마지막으로 간단하게 네이밍 컨벤션에 대해 알려주자면, 일반적으로 공개키를 이용한 인증서는 crt 또는 pem 확장자를 붙임. 그래서 파일이름이 server.crt 임


server.pem for server certificates or client.crt or client.pem for client certificates. 

And private keys are usually with extension .key, or –key.pem.
그리고 개인키는 일반적으로 .key 확장자를 사용함.

For example server.key or server-key.pem. So just remember private keys have the word ‘key’ in them usually 
예를들어 서버.key 또는 서버키.pem 등임. 그러니 기억하세요. 개인키는 key 라는 단어를 포함한다는 것을.

>> server.crt
>> server-key.pem (개인키)


either as an extension or in the name of the certificate 
확장자 또는 인증서의 이름으로

and one that doesn't have the word key in them is usually a public key or certificate.
그리고 key 라는 단어가 들어가지 않는것들은 보통 공개키 또는 인증서 입니다.


Well that's it for this lecture.

Thank you for watching.

I will see you in the next lecture.