------------------------------------------------------------------
# 서비스 계정을 생성
>> kubectl create serviceaccount dashboard-sa

# deployment 에 서비스계정을 지정 하는 방법
>> POD Spec 아래
serviceAccountName: 속성을 추가하여 지정

>> kubectl get serviceaccount
>> kubectl describe secret <오브젝트명>
>> kubectl exec -it my-kubernetes-dashboard ls /var/run/secrets/kubernetes.io/serviceaccount 
------------------------------------------------------------------
This lecture, we will talk about service accounts and kubernetes, 
이번 강의에서는 서비스 어카운트와 쿠버네티스에 관해 이야기 해 보겠습니다.

so there are two types of accounts on kubernetes
저기에 두가지 유형의 계정이 있습니다.

and there's a user account and a service account.
그것들은 유저 계정이랑 서비스 계정입니다.

As you might already know, the user account is used by humans and service accounts are used by machines.
이미 알수도 있겠지만, 유저 계정은 사람이 사용하는 계정입니다. 그리고 서비스 계정은 기계가 사용하는 계정입니다.

A user account could be for an administrator accessing the cluster to perform administrative tasks 
유저 계정은 관리자 스러운 업무를 수행하기 위한 관리자 권한을 가질 수도 있습니다.

or a developer accessing the cluster to deploy applications, etc..
또는 개발자가 어플리케이션의 배포를 위해 클러스터에 접근 할 수도 있습니다.

A service account could be an account used by an application to interact with the kubernetes cluster.
서비스 계정은 어플리케이션들이 쿠버네티스 클러스터와 상호작용을 하기 위한 계정입니다.

for example, a monitoring application like Prometheus uses a service account to pull the kubernetes API for performance metrics.
예를 들면, 프로메테우스와 같은 모니터링 어플리케이션은 쿠버네티스 API로 성능 메트릭스를 뽑아내기 위해 서비스 계정을 사용합니다.

and automated built tool like jenkins' use service accounts to deploy applications on the kubernetes cluster.
그리고 자동 빌드 툴인 젠킨스는 쿠버네티스 클러스터에 어플리케이션을 배포하기 위해 서비스 계정을 이용합니다.

Let's take an example.
예제를 봅시다.

I've built a simple kubernetes dashboard application named My kubernetes Dashboard.
저는 간단한 마이쿠버데시보드라는 데시 보드 어플리케이션을 만들 었습니다.

It's a simple application built in Python, and all that it does when deployed is retrieve the list of pods on a kubernetes cluster by sending a request to the kubernetes is API and displayed on a Web page.
이것은 파이썬으로 만든 간단한 어플리케이션입니다. 그리고 배포시 작업하는 모든 작업은 요청을 보내 쿠버네티스 클러스터의 POD 목록을 검색하는 것입니다. 그리고 이것을 웹페이지로 출력 합니다.

(In order for:~하기 위해서는)
In order for my application to query the kubernetes API, it has to be authenticated.
나의 어플리케이션이 쿠버네티스 API 에 질의하기 위해서는 어플리케이션이 인증이 되어 있어야 합니다.

For that, we use a service account to create a service account, run the command to kubectl create service account, followed by the account name, which is "dashboard-sa" in this case.
이를 위해 우리는 서비스 계정을 이용하여 서비스 계정을 생성 할 것입니다.

>> kubectl create serviceaccount dashboard-sa

to view the service accounts, run the kubectl get service account command.
서비스 계정들을 보기 위해서는 kubectl get serviceaccount 명령을 실행 합니다.

>> kubectl get serviceaccount

This will list all the service accounts.
이것이 우리의 서비스 계정들입니다.

When the service account is created, it also creates a token automatically, the service account token is what must be used by the external application while authenticating to the kubernetes API.
서비스 계정을 생성했을때. 토큰역시 자동으로 생성됩니다. 서비스 계정 토큰은 외부 어플리케이션이 쿠버네티스 API 에 인증하여 할때 반드시 필요한 것입니다.

The token, however, is stored as a secret object.
하지만 이 토큰은 시크릿 오브젝트에 저장됩니다.

In this case, it's named "dashboard-sa-token-kbbdm"
이 경우에 이 토큰의 이름은 dashboard-sa-token-kbbdm 입니다.

So when a service account is created, it first creates the service account object and then generates a token for the service account.
따라서 서비스 계정이 생성될때, 가장 먼저 서비스 계정 오브젝트가 생성되고 그 다음 서비스 계정을 위한 토큰이 생성됩니다.

It then creates a secret object and stores that token inside the secret object.
이 다음 시크릿 오브젝트가 생성되고 그리고 토큰은 이 시크릿 오브젝트가 저장됩니다
------------------------------------------------------------------
[서비스 어카운트 3단계]
- 1. 서비스 계정 생성
- 2. 서비스 계정의 토큰 생성
- 3. 시크릿 오브젝트 생성
- 4. 시크릿 오브젝트에 서비스 계정 토큰 저장
- 5. 시크릿 오브젝트와 서비스 계정이 연결??
------------------------------------------------------------------
The secret object is then linked to the service account 
시크릿 오브젝트는 다음으로 서비스 어카운트와 연결됩니다.

to view the token, view the secret object by running the command kubectl describe secret.
토큰을 보기위해서 명령어를 사용하여 시크릿 오브젝트를 봅니다.

>> kubectl describe secret <오브젝트명>

(bearer:교군꾼?, 운반인, 지참인, 열매를 맺는 초목)
This token can then be used as an authentication bearer token while making a call to the kubernetes API.
이 토큰은 쿠버네티스 API 에 연락을 하기 위한 인증 토큰으로 사용될 수 있씁니다.

for example, in this simple example, using curl, you could provide the bearer token as an authorization header while making a call to the kubernetes API.
예를 들어, 이 간단한 예제에서, cURL 을 사용하여, KubeAPI 호출을 생성하는 동안 베어러 토큰을 인증 헤더로 제공할 수 있습니다.

in case of my custom dashboard application, copy and paste the token into the tokens field to authenticate the dashboard application.
나의 커스텀 데시보드 어플리케이션의 예에서는,  데시보드 어플리케이션의 인증을 위해 토큰 필드를 복사와 붙여넣기 하였습니다.

So that's how you create a new service account and use it, 
때문에 이것이 새로운 서비스 계정 생성과 사용 방법입니다.

you can create a service account, assign the right permissions using role based access control mechanisms, which is out of scope for this course,
서비스 계정을 생성할 수 있습니다. 이 강좌동안 스코프를 벗어난 RBAC 매커니즘을 이용하여 올바른 권한을 할당 할수 있습니다.

and export your service account tokens and use it to configure your third party application to authenticate to the kubernetes API.
그리고 당신의 서비스 계정 토큰을 당신의 써드파이 어플리케이션이 Kube API 에 승인받기 위해 추출 합니다.

But what if your third party application is hosted on the kubernetes cluster itself?
하지만 만약 당신의 써드파티 어플리케이션이 쿠버네티스 클러스터 자체에 호스팅 되어 있다면?

For example, we can have our custom kubernetes dashboard application or the Prometheus application deployed on the kubernetes cluster itself.
예를 들어, 우리는 자체제작 데시 보드 어플리케이션을 가질 수 있습니다. 또는 프로메테우스 어플리케이션을 쿠버네티스 클러스터 자체에 배포할 수도 있습니다.

In that case, this whole process of exporting the service account token and configuring the third party application to use it can be made simple by automatically mounting the service token secret as a volume inside the pod, hosting the third party application 
이런 경우에는, 이 서비스 계정 토큰을 추출과 전체 프로세스와 써드파티 어플리케이션을 사용하기 위해 단순하게 만들 수 있습니다. POD자동으로 마운트 되는 서비스 토큰으로
------------------------------------------ ????????????????????

that we the token to access the kubernetes API is already placed inside the pod and can be easily read by the application.
저것이 쿠버네티스에 접속하기 위한 토큰은 이미 POD 내부에 있고, 어플리케이션을 통해 쉽게 읽을 수 있습니다.

You don't have to provide it manually.
당신은 이걸 수동으로 제공하지 않아도 됩니다.

If you go back and look at the list of service accounts, 
만약 돌아가서 서비스 계정의 목록을 본다면

you will see that there is a default service account that exists already 
거기에 기본 서비스 계정이 이미 존재한다는 것을 알 수 있습니다.

for every namespace in kubernetes that is a service account named default is automatically created.
쿠버네티스의 모든 네임스페이스 마다 디폴트라고 이름 붙여진 서비스 어카운트가 자동으로 생성되어 있습니다.

Each namespace has its own default service account.
각각의 네임스페이스는 네임스페이스 소유의 서비스 계정을 가지고 있습니다.

Whenever a pod is created, the default service account and its token are automatically mounted to that pod, as a volume mount
POD 가 생성될 때마다, 기본 서비스 계정과 토큰은 볼륨 마운트 처럼 자동으로 POD 에 마운트 됩니다.

for example, we have a simple pod definition file that creates a pod using my custom kubernetes dashboard image.
예를 들어 우리는 데시보드 이미지를 만들때 썻던 간단한 POD 정의파일이 있습니다. 

We haven't specified any secrets or volume mount in the definition file.
우리는 POD 정의파일에 시크릿이나 볼륨 마운트 같은것들을 정의하지 않았습니다.

However, when the pod is created, if you look at the details of the pod by running the kubectl describe pod command.
하지만 POD 가 생성될때, kubectl describe pod 명령을 통해 POD 의 상세정보를 보았다면

>> kubectl describe pod my-kubernetes-dashboard

You see that a volume is automatically created from the secret named default token which is in fact the secret containing the token for this default service account.
시크릿 네임이 default token 이라고 된 볼륨이 자동으로 생성되어진것을 볼 수 있습니다. 이 사실은 시크릿은 기본 서비스 계정을 위해 토큰을 보관하고 있다는 의미입니다.

The secret token is mounted at location /var/run/secrets/kubernetes.io/serviceaccount 
시크릿 토큰이 마운팅 된 주소는 ↑ 입니다.

inside the pod.
POD 의 내부에.

So from inside the pod, if you run the "ls" command to list the contents of the directory, 
때문에 POD의 내부로 부터, 디렉토리의 컨텐츠를 나열하기 위해 "ls" 명령을 실행 했다면.

you will see the secret mounted as three separate files.
스크릿이 마운트된 3개로 분리된 파일들 을 볼 수 있습니다.

>> kubectl exec -it my-kubernetes-dashboard ls /var/run/secrets/kubernetes.io/serviceaccount 

The one with the actual token is the file named token.
실제 토큰이 포함된 하나는 파일 네임이 토큰 입니다.

If you view contents of that file, you will see the token to be used for accessing the kubernetes API.
만약 해당 파일의 콘텐츠를 본다면 토큰이 Kube API 서버에 접근하는데 사용되는 것을 볼 수 있습니다.

Now, remember that the default service account is very much restricted, it only has permission to run basic kubernetes API queries.
기억하세요. 기본 서비스 계정은 아주 제한 적입니다. 이 계정은 오직 기본적인 Kube API 쿼리를 실행하는 권한만 가지고 있습니다.

If you would like to use a different service account, such as the one we just created, 
만약 다른 서비스 계정을 사용하긴 원한다면, 하나 만들어야 합니다.

modify the definition file to include a service account field and specify the name of the new service account.
서비스 계정에 포함된 정의파일을 수정 하고 새로운 서비스 계정의 이름을 지정 하여야 합니다.

Remember, you cannot edit the service account of an existing pod.
기억하세요. 당신은 기존에 존재하는 POD 의 서비스 계정을 수정 할 수 없습니다.

You must delete and recreate the pod.
항상 삭제하고 재 생성해야만 합니다.
------------------------------------------------------------------
[pod-definition.yaml]
apiVersion: v1
kind: Pod
metadata:
	name: my-kubernetes-dashboard
spec:
	containers:
	- name: my-kubernetes-dashboard
	  image: my-kubernetes-dashboard
	serviceAccount: dashboard-sa
------------------------------------------------------------------
However, in case of a deployment, you will be able to edit the service account as any changes to the definition file will automatically trigger a new rollout for the deployment.
하지만 이 디플의 경우, 당신은 정의파일을 변경하여 서비스 계정을 수정 할 수 있습니다. 해당 파일은 자동으로 새롭게 롤아웃 되도록 작동 합니다.

So the deployment will take care of deleting and recreating new pods with the right service account.
따라서 디플로이먼트는 새로운 POD에 올바른 서비스 계정과 함께 삭제와 재생성 됩니다.

When you look at the pod details now, you see that the new service account is being used.
POD 상세를 자세히 보면 새로운 서비스 계정이 사용되고 있는것을 볼 수 있습니다.

So remember, kubernetes is automatically mounts the default service account if you haven't explicitly specified any.
기억하세요. 명시적으로 지정하지 않는 경우 쿠버네티스는 기본 서비스 계정을 자동으로 마운트 합니다.

>> automountServiceAccountToken: false

you may choose not to mount a service account automatically by setting the AutoMountServiceAccountTolken Field to false in the pods spec section.
당신은 pod 정의파일에 spec 섹션에서 AutoMountServiceAccountTolken에 false 를 대입하여서 서비스 계정을 자동으로 선택하지 않게 할 수도 있습니다.

Well, that's it for this lecture.

Head over to the practice exercises section and practice working with service accounts.

We will create new service accounts and configure the custom kubernetess dashboard with the right service account.