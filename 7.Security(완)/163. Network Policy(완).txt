-----------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-pilicy
spec:
  podSelector:
    matchLabels:
      role: db
  policyType:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
  	    name: api-pod
    ports:
    - protocol: TCP
      port: 3306
-----------------------------------------------------------------------------

Hello and welcome to this lecture on network policies.
안녕하세요. 이번 강의는 네트워크 정책 입니다.

So let us first get our networking and security basics right.
따라서, 처음으로 우리의 네트워크를 가져보고 기본적인 보안을 해 봅시다.

And I'm sorry if this is too basic but I just wanted to spend a minute on this to make sure we are all on the same page Before we begin 
이게 너무 기본적이라면 미안합니다. 하지만 시작하기전에 우리 모두 같은 페이지에 있다는걸 확인하기 위해 잠시 시간을 보내고 싶었습니다.

we will start with a simple example of a traffic flowing through a web app and database server.
여기 간단한 예제로부터 시작하겠습니다. 웹앱과 데이터 베이스를 통해 흐르는 트래픽 예제.

[FRONT-END] [APP SERVER]

so you have a web server serving front-end to users an app server serving back-end API and a database server.
프론트 앤드에서 사용자에게 서비스중인 웹 서버가 있습니다. APP 서버는 백엔드 API 와 데이터 베이스를 서비스 하고 있습니다.

The user sent in a request to the web server at port 80 the web server then sent a request to the API server at port 5000 in the back end.
사용자는 포트80에서 웹 서버에 요청을 보낸다음 웹 서버는 백엔드 포트 5000을 통해 API 서버로 요청을 보냅니다.

(fetches:가져오기)
The API server then fetches data from the database server at Port 3306 
API 서버는 그 다음 데이터 베이스로 부터 데이터를 3306포트롤 통해 가져옵니다.

and then sends the data back to the user.
그 다음 데이터를 유저 에게 보내 줍니다.

A very simple setup 
아주 단순한 구성입니다.

(ingress and egress:입구와 출구)
so there are two types of traffic here ingress and egress.
그래서 여기에는 두 가지 유형의 트래픽이 있습니다. 인그레스와 에그레스 입니다.

For example for a web server the incoming traffic from the users is an ingress traffic.
예를 들어, 웹 서버에 사용자로부터 들어오는 트래픽이 인그레스 입구 트래픽 입니다.

and the outgoing request to the app server is a egress traffic and that is denoted by the straight arrow.
그리고 밖으로 나가는 요청. 웹서버에서 -> APP 서버로 는 출구 트래픽 이라고 합니다. 그리고 이건직선 화살표로 표시됩니다.

(originated:시작하다, 비롯되다, 발생하다,유래하다)
When you define ingress and egress remember you're only looking at the direction in which the traffic originated.
입구와 출수를 정의할 때, 기억하세요. 당신은 오직 방향만을 봅니다. 어떤 트래픽이 시작방향인지.

The response back to the user denoted by the dotted lines do not really matter.
점선으로 표시된 사용자에 대한 응답은 실제 중요하진 않습니다.

Similarly in case of the back end API server it receives ingress traffic from the web server on port 5000 and has egress traffic to port 3306 to the database server 
유사하게, 백앤드 API 서버는 웹서버로 부터 5000번 포트를 통해 입구 트래픽을 받습니다. 그리고 3306 포트를 통해 데이터 베이스 출구 트래픽을 생성합니다.

and from the database servers perspective it receives ingress traffic on 3306 from the API server.
그리고 데이터 베이스 서버 입장에서는 이 트래픽은 API 서버로부터 입구 트래픽으로 3306번 포트로 들어옵니다.

If we were to list the rules required to get this working we would have an ingress rule 
만약 이 작업을 수행하는데 필요한 규칙을 나열 하자면. 수신 규칙이 있습니다.

that is required to accept HTTP traffic on port 80 on the web server. 
수신 규칙은 웹서버에서 80번 포트를 통한 http 트래픽을 수용하는데 필요합니다.

An Egress rule to allow traffic from the web server to port 5000 on the API server. 
출구 룰은 트래픽을 허용하는 것입니다. 웹서버에서 API 서버의 5000번 포트로 나가는 것을.

An ingress rule to accept traffic on port 5000 on the API server 
입구 룰은 API 서버의 5000번 포트로 트래픽을 받기위한 룰

and an egress rule to allow traffic to port 3306 on the database server.
출구룰은 3306포트로 데이터 베이스 서버로 부터의 트래픽을 보내기 위한 룰

And finally an ingress rule on the database server to accept traffic on port 3306.
그리고 마지막으로 데이터 베이스 서버의 입구 룰은 3306포트로 트래픽을 수용하기 위한 룰 입니다.

So that's the basic of traffic flow and rules.
이것은 트래픽의 기본적인 흐름과 규칙입니다.

Let us now look at Network Security in Kubernetes.
그럼 이제 쿠버네티스의 네트워크 보안을 살펴 봅시다.

So we have a cluster with a set of nodes hosting a set of pods and services.
우리는 POD 와 서비스를 호스팅 중인 노드 집합과 함께 클러스터가 있습니다.

Each node has an IP address and so does each pod as well as service. 
각각의 노드는 IP 주소가 있습니다. 그리고 각각의 POD 와 서비스로 마찬가지로 있습니다.

(pre-requisite:전제조건)
One of the pre-requisite for networking in kubernetes, 
쿠버네티스 네트워킹의 전제조건중 하나는

is whatever solution you implement, the pods should be able to communicate with each other 
구현하는 솔루션이 무엇이건 POD들을 서로 각자 통신할 수 있어야 합니다.

without having to configure any additional settings like routes.
설정이나 라우터 처럼 추가적인 셋팅 없이.

(spans:걸쳐있다)
For example, in this network solution, all pods are on a virtual private network that spans across the nodes in the kubernetes cluster. 
예를들어, 네트워크 솔루션속에 모든 POD는 가상의 개인 네트워크에 걸친 노드에 있습니다.

And they can all by default reach each other using the IPs or pod names or services configured for that purpose.
그들은 기본적으로 IP 또는 POD 네임 또는 서비스 설정으로 각자 모두 닿을 수 있습니다.

Kubernetes is configured by default with an “All Allow” rule that allows traffic from any pod to any other pod or services with in the cluster. 
쿠버네티스는 기본적으로 설정 합니다. All Allow 규칙으로. 이 규칙은 모든 POD 에서 모든 다른 POD 또는 서비스로 가는 트래픽을 서용합니다.

Let us now bring back our earlier discussion and see how it fits in to kubernetes. 
이전 논의로 거슬러 가 봅시다. 그리고 어떻게 쿠버네티스에 장착하는지 봅시다.

For each component in the application 
어플리케이션에 각 컴포넌트에 대해.

we deploy a POD. One for the front-end web server, for the API server and one for the database.
POD 를 배포 합니다. 하나는 프론트엔드 웹서버로, API 서버를 위해. 그리고 하나는 데이터 베이스를 위해.

We create services to enable communication between the PODs as well as to the end user. 
우리는 서비스를 생성합니다. POD 와 앤드 유저가 서로 소통 가능 하도록

Based on what we discussed in the previous slide, by default all the three PODs can communicate with each other within the kubernetes cluster. 
우리가 이전 슬라이드에서 논의한 것을 기본으로 하여, 기본적으로 모든 3개의 POD 는 쿠버네티스 클러스터 내에서 서로 각자 소통할 수 있습니다.

What if we do not want the front-end web server to be able to communicate with the database server directly 
만약 프론트 엔드 웹서버가 데이터 베이스 서버에 다이렉트로하는 통신을 원하는 않느다면?

say for example your security teams and audits require you to prevent that from happening.
예를 들어 보안팀과 감사에서 이런일이 일어나지 않아야 한다고

That is where you would implement a Network Policy to allow traffic to the db server only from the api server. 
DB서버는 오직 API 서버와만 통신할 수 있도록 네트워크 정책을 구현하는 할 장소 입니다.


A Network policy is another object in the kubernetes namespace Just like PODs, ReplicaSets or Services.
네트워크 정책은 또 다른 오브젝트 입니다. POD 나 레플리카 셋 또는 서비스 같은.

You link a network policy to one or more pods.
당신은 네트워크 정책을 하나 또는 그 이상의 POD 들과 연결 할 수 있습니다.

You can define rules within the network policy.
또 네트워크 정책 안에서 규칙을 정의할 수 있씁니다.

In this case I would say, only allow Ingress Traffic from the API Pod on Port 3306.
이번 경우, 오직 입수 트래픽은 API POD 3306 포트 에만 허용한다

Once this policy is created, it blocks all other traffic to the Pod and only allows traffic that matches the specified rule.
한번 정책이 생성되면, 모든 트래픽을 POD 와 허용된 트래픽에 일치하는 지정된 룰만 승인 합니다. 

Again, this is only applicable to the Pod on which the network policy is applied.
다시한번 이것은 오직 네트워크 정책이 적용된 POD에 적용하는 것만 가능 합니다.

So how do you apply or link a network policy to a pod.
그래서 어떻게 POD 에 네트워크 정책을 연결 하고 적용하고 있을까요?

We use the same technique that was used before to link ReplicaSets or Services to Pods. Labels and Selectors.
우리는 레플리카 셋 또는 서비스와 POD 가 사용했던 동일한 기술을 사용합니다. 레이블과 셀렉터 입니다.

We label the Pod and use the same labels on the pod selector field in the network policy. 
우리는 POD 에 레이블링을 하고 동일한 레이블을 네트워크 정책의 POD 셀렉터 필드에 사용합니다.

And then we build our rule 
그런 다음 우리의 규칙을 빌드 합니다.

(whether:~이든)
under policy types specify whether the rule is to allow ingress or egress traffic or both.
규칙이 입구 또는 출구 트래픽에 허용할지 아니면 둘다 적용할지등을 정책 유형 아래 지정 합니다.

In our case we only want to allow ingress traffic to the db-pod. So we add Ingress.
우리의 경우에는 우리는 오직 DB-POD 로의 입구 트래픽만 허용하길 원합니다. 그래서 우리는 입구를 추가합니다.

Next, we specify the ingress rule, that allows traffic from the API pod. 
다음으로 우리는 API Pod 로 부터 트래픽을 허용하는 입구 룰을 지정 합니다. 

And you specify the api pod, again using labels and selectors.
그리고 API POD 를 지정 합니다. 다시한번 레이블과 셀렉터를 이용합니다.

And finally the port to allow traffic on, which is 3306.
그리고 마지막으로 트래픽을 허용할 포트를 3306으로

Let us put all that together.
이 모든것을 함께 넣어 봅시다.
-----------------------------------------------------------------------------
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-pilicy
spec:
  podSelector:
    matchLabels:
      role: db
  policyType:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
  	    name: api-pod
    ports:
    - protocol: TCP
      port: 3306
-----------------------------------------------------------------------------

We start with a blank object definition file and as usual we have apiVersion, kind, metadata and spec. 
우리는 빈 정의파일로부터 시작합니다. 그리고 일반적으로 가지는 apiversion, kind metadata, spec 으로 시작합니다.

The apiVersion is networking.k8s.io/v1, the kind is NetworkPolicy. 
apiVersion 은 networking.k8s.io/v1입니다. Kind 는 NetworkPolicy

We will name the policy db-policy. 
이름은 db-policy 로 할 것입니다.

And then under the spec section, we will first move the pod selector to apply this policy to the db pod. 
그리고 Spec 섹션 아래, 정책을 DB POD 에 적용시키기 위해 POD  SELECTOR 를 옮겨 넣습니다.

Then we will move the rule we created in the previous slide under it 
그다음 이전 슬라이드에서 그 아래 작성했던 규칙들을 옮겨 적습니다.

and that's it.
그리고 이게 다 입니다.

We have our first network policy ready. 
우리의 첫번째 네트워크 정책이 준비되었습니다.

Run the kubectl create command to create the policy. 

>> kubectl create -f policy-definition.yaml

Remember that Network Policies are enforced by the Network Solution implemented on the Kubernetes Cluster. And not all network solutions support network policies.
기억하세요. 네트워크 정책은 쿠버네티스 클러스터내에 구현된 네트워크 솔루션에 의해 시행 됩니다. 그리고 모든 네트워크 솔루션은 네트워크 정책을 지원하지는 않습니다.

A few of them that are supported are kube-router, Calico, Romana and Weave-net.
지원되는 몇가지 솔루션은 큐브라우터, 칼리코, 로마나, 위브 넷입니다.

If you used Flannel as the networking solution, it does not support network policies as of this recording. 
만약 Flannel 을 네트워크 솔루션으로 이용한 경우, 이 솔루션은 강의내용 처럼 네트워크 정책을 지원 하지 않습니다.

Always refer to the network solution’s documentation to see support for network policies.
항상 네트워크 솔루션 도큐멘테이션을 참고 하여, 네트워크 정책 지원을 확인 하십시오.

Also remember even in a cluster configured with a solution that does not support network policies 
또 클러스터가 네트워크 정책을 지원하지 않는 솔루션으로 구성되어졌다 하더라고 기억 하십시오.

you can still create the policies but they will just not be enforced.
여전히 정책을 생성 할 수 있습니다만, 그저 시행 되지 않는 다는 것을.

You will not get an error message saying the network solution does not support network policies.
네트워크 솔루션이 네트워크 정책을 따르지 않는다해도 에러 메세지를 얻을 수도 없습니다. 

Well, that’s it for this lecture. 

Walk through the documentation and head over to coding challenges

to practice network policies.