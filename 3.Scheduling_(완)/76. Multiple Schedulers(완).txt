--------------------------------------------------------
[기본 scheduler 파일을 복사 하여 사용한다.]
>> cp kube-scheduler.yaml my-scheduler.yaml
spec:
      serviceAccountName: my-scheduler
      containers:
      - command:
        - /usr/local/bin/kube-scheduler
        - --address=0.0.0.0
        - --leader-elect=false
        - --scheduler-name=my-scheduler
        image: gcr.io/my-gcp-project/my-kube-scheduler:1.0


[POD 에 설정하는 방법]
apiVersion: v1
kind: Pod
metadata:
  name: annotation-second-scheduler
  labels:
    name: multischeduler-example
spec:
  schedulerName: my-scheduler
  containers:
  - name: pod-with-second-annotation-container
    image: k8s.gcr.io/pause:2.0
--------------------------------------------------------





Hello and welcome to this lecture. In this lecture

we look at the different ways of manually scheduling a POD on a node.
이번장에서는 수동 스케쥴링의 다른 방법에 대해 다뤄보겠습니다.

We will also look at how to view scheduler related events. 
스케쥴러에 엮인 이벤트를 보는 법에 대해서도 다뤄보겠씁니다.

We have seen how the default-scheduler works in a kubernetes environment in the previous lectures.
우리는 이전 강의에서 쿠버네티스 환경에서 일하는 기본 스케쥴러를 알고 있습니다.

(evenly:고르게, 짝수가 되게, 양쪽이 같아지게) (as well as:뿐만아니라)
It has an algorithm that distributes pods across nodes evenly as well as takes into consideration the various conditions we specify through taints & tolerations and node affinity etc. 
이 스케쥴러는 알고리즘을 가지고 있씁니다. POD를 노드에 고르게 배분하는 것 뿐만 아니라. TAINTS 와 톨러런스 그리고 노드 선호도등에 대한 다양한 상태에 대해서도 고려하는 알고리즘을 가지고 있씁니다.

But what if none of these satisfies your needs?
만약 당신이 원하는 것들이 정의되어 있지 않다면?

Say you have a specific application that requires its components to be placed on nodes after performing some additional checks.
당신이 추가적인 체킹 이후 컴포넌트가 노드에 올려지기를 원하는 어느 특정 어플리케이션을 가지고 있다고 가정 합시다.

So you decide to have your own scheduling algorithm to place pods on nodes? 
그럼 당신은 POD 를 NODE 에 올리기 위해 당신만의 스케쥴링 알고리즘을 가지려고 하지 않겠습니까?

So that you can add your own custom conditions and checks in it. 
이것이, 당신 소유의 커스텀 컨디션과 체크를 가질수 있는 것 입니다.

Kubernetes is highly extensible.
쿠버네티스는 확장성이 뛰어 납니다.

You can write your own kubernetes scheduler program, package it and deploy it as the default scheduler or as an additional scheduler in the kubernetes cluster. 
당신은 당신만의 스케쥴 프로그램을 작성할 수 있습니다. 패키징 한 후 기본 스케쥴러나 추가적인 스케쥴러로 배포 할 수도 있습니다.

That way all of the other applications can go through the default scheduler,
다른 모든 어플리케이션도 기본 스케쥴러로 통과할 수 있는 방법입니다.

however one specific application can use your custom scheduler. Your kubernetes cluster can have multiple schedulers at the same time.
하지만 하나의 특정 어플리케이션에 커스텀 스케쥴러를 지정 할 수 있습니다. 동일 시간대에 다수의 스케쥴러를 가질수도 있습니다.

(instruct:지시하다)
When creating a POD or a Deployment. you can instruct kubernetes to have the POD scheduled by a specific scheduler.
POD또는 Deployment가 생성될 때. 특정 스케쥴러에서 POD 를 예약하도록 지시 할 수 있습니다.


Earlier we saw how to deploy the kube-scheduler.
이전에 스케쥴러 배포하는 방법을 보았습니다. ?????????????????????????????

We download the kube-scheduler binary and run it as a service with a set of options.
스케쥴러 바이너리 파일을 다운로드 받은 후 옵션 설정과 함께 서비스를 실행 시킵니다.

One of the option is scheduler name. If not specified It assumes in name of default scheduler.
옵션중 하나는 스케쥴러 이름입니다. 만약 지정 하지 않는다면 기본 스케쥴러라고 가정 하게 됩니다.

This kube-scheduler is the default scheduler. 
이 kube-scheduler 가 기본 스케쥴러 입니다.

To deploy an additional scheduler,
추가적인 스케쥴러를 배포하는 것은

You can use the same kube-scheduler binary or use one that you might have built for yourself, which makes more sense.
동일한 바이너리 파일 

In this case we are going to use the same binary to deploy the additional scheduler.
이 케이스의 경우 우리는 동일한 바이너리 파일을 사용하고 추가적인 스케쥴러로 배포 합니다.

This time we set the scheduler name to a custom name.
지금은 커스텀 네임으로 스케쥴러 이름을 붙여 줍니다. 

This is important to differentiate the two schedulers and this is the name that we will be specifying in the pod definition file later on.
이것은 두 다른 스케쥴러에게 중요합니다. 그리고 우리가 POD 정의파일에서 지정해야 할 이름입니다.

Let’s take a look at how it works with the kubeadm tool. 
그럼 kubeadm 도구에서 어떻게 작동하는지 살펴 봅시다.

The kubeadm tool deploys the scheduler as a POD.
kubeadm 도구는 스케쥴러는 POD 처럼 배포합니다.


[static-pod 설정하는 곳과 같은 위치에 스케쥴러도 있다.]
그러고 보니 apiserver, control-plane, etcd 도 있었던듯
>> etc/kebernetes/manifests/kube-scheduler.yaml

You can find the definition file it uses under the manifests folder. 
manifests 폴더 아래에서 사용되고 있는 정의파일을 찾을 수 있습니다.

I have removed all the other details from the file 
저는 파일내 다른 모든 상세정보들은 삭제했습니다.

so we can focus on the key parts.
그럼 이제 우린 KEY 파츠에 집중 할 수 있습니다.

(associated:관련된)
The command section has the command and associated options to start the scheduler.
커맨드 섹션에는 명령어들이 있습니다. 그리고 스케쥴러가 시작하는것과 관련된 옵션들이 있습니다.

We can create a custom scheduler by making a copy of the same file, and by changing the name of the scheduler.
우리는 동일파일을 복사하고 스케쥴러의 이름을 변경하여 커스텀 스케쥴러를 만들수 있습니다. 

We set the name of the pod to my-custom-scheduler and we add a new option to the scheduler command to set a custom name for the scheduler.
POD의 이름을 지정합니다. "my-custom-scheduler" 그리고 스케쥴러 커맨드 칸에 커스텀 네임을 설정 하기 위해 새로운 옵션을 추가합니다. 

Finally an important option to look here is the leader-elect option. 
마지막으로 중요한 옵션이 여기 있습니다. 리더 뽑기 옵션 입니다.

The leader-elect option is used when you have multiple copies of the scheduler running on different master nodes, 
리더 뽑기 옵션은 서로 다른 마스터 노드에서 동작중인 다수의 스케쥴러를 가지고 있을때 사용됩니다.

in a High Availability setup where you have multiple master nodes with the kube-scheduler process running on both of them.
다수의 마스터 노드를 가지고 있는 고가용성 설정에서 쿠버 스케쥴러 프로세스가 양쪽 모두에서 동작하도록 하는데 사용됩니다.


If multiple copies of the same scheduler are running on different nodes 
만약 다수의 동일 스케쥴러가 각기 다른 노드에서 작동 중이라면, 

only one can be active at a time.
오직 하나의 스케쥴러 만이 같은 시간대에 활성화 할 수 있습니다.

That’s where the leader-elect option helps in choosing a leader who will lead scheduling activities. 
저 리더 투표 옵션이 스케쥴링 활성화 순서는 주도하는 리더를 선택하는데에 도움이 됩니다.

We will discuss more about HA setup in another section, 
고가용성 설정에 대해서는 이후 다른 강의에서 자세히 다루겠습니다. 

(point out:지적하다)
but for now I wanted to point out that, to get multiple schedulers working you must either set the leader-elect option to false,
하지만 이건 지적 하고 싶었습니다. 다수의 스케쥴러가 작동하는게 하기위해서는 당신은 리더 투표 옵션을 꼭 false 로 지정해야 한다는 걸.

in case where you don’t have multiple masters. 
이 케이스의 경우 당신은 마스터 스케쥴러가 존재하지 않습니다.

In case you do have multiple masters, 
이 경우 당신이 멀티플 마스터를 가지고 있다면

you can pass in an additional parameter to set a lock object name.
당신은 lock 오브젝트 네임을 지정하기 위해 파라미터 설정을 통과 할 수 있습니다.(마스터가 하니까)

This is to differentiate the new custom scheduler from the default during the leader election process.
이부분이 리더 선출 과정에서 새로운 커스텀 스케쥴러를 기본값과 구별하기 위한 차이점 입니다.

Once done, create the pod using the kubectl create command. Run the kubectl get pods command in the kube-system namespace and look for the new custom scheduler.
하나가 완료되면, kubectl create 명령어로 pod 를 생성하세요. kubectl get pods 명령을 실행하시고 새로운 커스텀 스케쥴러를 찾아보세요.

Make sure its in a running state. The next step is to configure a new POD or a deployment to use the new scheduler.
당연하세요 러닝 스테이트 일 것입니다. 다른 단계는 새로운 POD 또는 Deploymeny에서 새 스케쥴러를 사용하기 위한 설정하는 것입니다.

In the Pod specification file add a new field called schedulerName and specify the name of the new scheduler.
POD정의파일에서 schedulerName라고 불리는 필드를 추가하고 새로운 스케쥴러의 이름을 지정합니다.

This way when the pod is created, the right scheduler picks it up to schedule. 
그러고 나면 POD 는 생성될 것입니다. 올바른 스케쥴러는 스케쥴하기위해 선택할 것입니다.

Create the pod using the kubectl create command. If the scheduler was not configured correctly, then the pod will continue to remain in a Pending state. 
kubectl create 명령어를 이용하여 pod 를 생성합니다. 만약 스케쥴러가 제대로 설정되어 있지 않다면 pod 는 pending 상태로 남게 됩니다.

If everything is good, then the pod will be in a Running state.
모든게 좋다면 pod 는 running 상태로 동작 할 것입니다.

So how do you know which scheduler picked it up? 
그렇다면 어떤 스케쥴러가 POD 를 선택했는지 어떻게 알 수 있나요?

View the events using the kubectl get events command.
kubectl get events 명령어를 통해 확인하시면 됩니다.
>> kubectl get events

This lists all the events in the current namespace.
이 명령어는 현재 네임스페이스에서의 모든 이벤트를 출력해줍니다.

Look for the Scheduled events. 
스케쥴된 이벤트들을 보세요.

(As you can see:보면 알수 있듯이)
As you can see the source of the event is the custom scheduler we created.
보시면 알수 있듯이. 이벤트의 소스는 우리가 만든 커스텀 스케쥴러 입니다.

And the message says successfully assigned default/nginx image.
그리고 메세지는 성공적으로 할당되었다고 말합니다.

To view the logs of the scheduler,
스케쥴러의 로그를 보는 것은

view the logs of the pod using the kubectl logs command.
kubectl log 명령어를 통해서 pod의 로그를 보세요.

Specify the name of the scheduler

the current namespace.

Well that's it for this lecture.

Head over to the practice exercises and practice deploying multiple schedulers.

I will see you in the next lecture.