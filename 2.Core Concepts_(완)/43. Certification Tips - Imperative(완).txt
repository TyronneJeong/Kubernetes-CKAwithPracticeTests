Certification Tips - Imperative Commands with Kubectl
시험 팁 - 명령형 커맨드 w kubectl

(considerable:많은, 중요한, 적지않은)
While you would be working mostly the declarative way - using definition files, imperative commands can help in getting one time tasks done quickly, as well as(~뿐만아니라) generate a definition template easily. This would help save considerable(많은) amount of time during your exams.
작업하는 동안 대부분 선언적 방식으로 작업하는 동안 - 정의파일을 사용하는것, 명령적 커맨드는 일회성으로 빨리 적용하는데 도움이 됩니다. 뿐만 아니라 정의 템플릿을 손쉽게 만들 수 있습니다. 이건 시험 시간 동안 많은 시간을 절약하는데 도움이 됩니다.

Before we begin, familiarize with the two options that can come in handy while working with the below commands:
시작하기 이전에, 두가지 옵션과 친해지십시오.

[드라이 런 여기서 찾음] (whether:~이든)
--dry-run: By default as soon as the command is run, the resource will be created. If you simply want to test your command , use the --dry-run=client option. This will not create the resource, instead, tell you whether the resource can be created and if your command is right.

기본적으로 명령이 실행되자 마자, 리소스는 생성됩니다. 만약 당신이 테스트 할 용도로만 사용한다면 --dry-run=client 옵션을 사용하세요. 이건 리소스를 생성하지 않습니다. 대신에, 리소스가 생성될수 있는지 명령어가 맞는지는 알려줍니다.

[-o yaml 출력부]
-o yaml: This will output the resource definition in YAML format on screen.
이 옵션은 리소스 정의를 YAML 포맷으로 출력시켜줍니다.


Use the above two in combination to generate a resource definition file quickly, that you can then modify and create resources as required, instead of creating the files from scratch.
이 두 옵션을 조합해서 사용하면, 스크래치를 통해 파일을 생성하는 대신에 당신의 필요한 자원을 생성하고 수정할수 있게 자원정의파일을 손쉽게 만들수 있습니다.

>> kubectl run redis --image=redis --dry-run -o yaml > test.yaml



POD
Create an NGINX Pod

kubectl run nginx --image=nginx



Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)

** kubectl run nginx --image=nginx --dry-run=client -o yaml



Deployment
Create a deployment

** kubectl create deployment --image=nginx nginx



Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

** kubectl create deployment --image=nginx nginx --dry-run=client -o yaml



Generate Deployment with 4 Replicas

** kubectl create deployment nginx --image=nginx --replicas=4



You can also scale a deployment using the kubectl scale command.

** kubectl scale deployment nginx --replicas=4



Another way to do this is to save the YAML definition to a file and modify
이것들 하기 위한 또다른 방법은 YAML정의파일을 저장하고 수정하는 것입니다.

*** kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml



You can then update the YAML file with the replicas or any other field before creating the deployment.



Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

** kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml


kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml




(This will automatically use the pod's labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml 

(This will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as(~으로) an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service)
이 경우 셀렉터로 pod 레이블을 사용할 수 없지만 대신에 셀렉터가 app=redis 라고 가정할 수는 있음.  셀렉터를 옵션으로 전달 할 수가 없습니다.
그래서 이건 잘 작동하지 않습니다. 당신의 POD 가 다른 레이블 셋에 있다면요.
그래서 서비스 생성이전에 파일을 생성하고 셀렉터 부분을 변경해야합니다.


Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:


[서비스 생성은 expose로]
** kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)
노드 포트도 마찬가지고 파일 생성이후 노드포트를 수정하고 생성해야합니다.

Or

** kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods labels as selectors)

Both the above commands have their own challenges. While one of it cannot accept a selector the other cannot accept a node port.
이 두 가지 커맨드는 모두 한계가 있습니다. 하나는 셀렉터를 지정할수 없고 다른 하나는 노드포트를 지정할 수 없습니다.

I would recommend going with the kubectl expose command. 
저는 kubectl expose 커맨드로 가는걸 추천드립니다.

If you need to specify a node port, generate a definition file using the same command and manually input the nodeport before creating the service.
만약 특별한 노드포트가 필요하다면, 동일한 명령어로 정의파일을 생성하고 수동으로 노드포트를 입력하면 됩니다.


Reference:
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands

https://kubernetes.io/docs/reference/kubectl/conventions/