Hello and welcome to this lecture.

My name is Mumshad Mannambeth. 

In this lecture we will discuss about Kubernetes Services.
이번강의에서는 쿠버네티스 서비스에 대해 다뤄볼 것입니다.

Kubernetes Services enable communication between various components within and outside of the application.
쿠버네티스 서비스는 어플리케이션 내외로 다양한 컴포넌트들과 소통이 가능합니다.


Kubernetes services helps us connect applications together with other applications or users.
쿠버네티스 서비스는 우리를 다른 서비스나 유저와 연결하게 도와줍니다.


For example our application has groups of pods running various sections such as a group for serving front end load to users and other group for running back end processes and a third group connecting to an external data source.
예를들어 우리의 어플리케이션은 
프론트엔드에 서빙중인 그룹, 백엔드에서 동작중인 다른 그룹 그리고 외부데이터에 연결중인 3의그룹 처럼
작동중인 다양한 섹션의 POD그룹을 가지고 있습니다.

(connectivity:연결성)
It is services that enable connectivity between these groups of pods services enable the front end
이것은 POD 서비스 그룹과 프론트엔드에 연결이 가능한 서비스 입니다.

application to be made available to end users it helps communication between back end and front end pods
엔드유저를 위해 만들어진 어플리케이션은 백엔드와 프론트엔드 pod를 연결하는것을 돕습니다.

(establishing:설립)
and helps in establishing connectivity to an external data source.
그리고 외부 데이터 소스에 연결을 구성하는것을 돕습니다.

Thus services enable loose coupling between micro services in our application.
이런 서비스들은 우리의 어플리케이션속에 마이크로 서비스와 느슨한 커플링이 가능합니다. 

let's take a look at one use case of services.
그럼 서비스의 한 유즈케이스를 살펴 봅시다.

(so far:지금까지)
So far we talked about how pods communicate with each other through internal networking.
지금까지 내부 네트워킹속에서 POD 는 어떻게 각각의 컴포넌트들과 소통이 가능한지 다뤄보았습니다.


[네트워크의 다른 측면]
(aspect:측면)
Let's look at some other aspects of networking In this lecture.
그럼 이번강의에서는 네트워크의 다른 측면을 살펴봅시다.

let's start with external communication.
외부 통신에서 부터 시작합시다.

So we deployed our pod having a web application running on it.
우리는 웹어플리케이션이 실행중인 POD 를 배포했습니다.

(as:접속사, 같이, 이므로, 와 같이, 함에 따라)
How do we as an external user access the web page 
외부의 사용자가 웹 페이지에 엑세스 하는것과 같은것을 어떻게 할까요? 

first of all let us look at the existing setup.
우선 처음으로 기존에 존재하는 셋업을 살펴봅시다.

The Kubernetes Node has an IP address and that is 192.168.1.2. 
쿠버네티스 노드는 IP주소를 가지고 있습니다. 그리고 그건 192.168.1.2 입니다.


My laptop is on the same network as well.
나의 랩탑은 마찬가지로 같은 네트워크 안에 있습니다.

so it has an IP address 192.168.1.10.
그래서 렙탑의 IP 는 192.168.1.10 을 가집니다.

The internal POD network is in the range 10.244.0.0 and the POD has an IP 10.244.0.2.
내부의 POD 네트워크는 대역폭 안에 있습니다. 10.244.0.0 과 10.244.0.2

(Clearly:분명히, 확실히)
Clearly, I cannot ping or access the POD at address 10.244.0.2 as its in a separate network.
확실히 ping 을 날리거나 10.244.0.2의 주소로 pod 에 엑세스 할수 없습니다. 마치 네트워크가 분리되어 있는 것 처럼.

So what are the options to see the webpage? 
그렇다면, 웹페이지를 보기위한 옵션은 무엇이 있을까요?

First, if we were to SSH into the kubernetes node at 192.168.1.2, 
첫번째로, 쿠버네티스 노드에 SSH로 연결하는 경우

from the node, we would be able to access the POD’s webpage by doing a curl or if the node has a GUI, we could fire up a browser and see the webpage in a browser following the address http://10.244.0.2.
(cURL:사용자URL 커맨드를 통해 서버와 데이터를 주고 받을 수 있다.)
노드에서는 우리는 cURL를 수행하거나 또는 노드가 GUI를 가지고 있고 우리가 브라우저를 켜고 다음 주소로 들어가 볼수만 있다면 POD 웹페에지에 접근 할수 있습니다.

[그림설명]
-랩탑의 IP는 192.168.1.10 이고 노드 IP 는 192.168.1.2이다.
-노드 속에 포함된 POD 의 IP 대역은 10.244.0.0~ 0.2 까지다.
-렙탑은 직접적으로 POD 에 ping 이나 접근이 불가능 하다.
-POD 는 웹 어플리케이션이다.
- 노드 내부에서는 POD 로의 접근이 가능하다. cURL 을 사용하거나 http 주소를 통해서.


But this is from inside
하지만 이건 내부접근입니다.

the kubernetes Node and that’s not what I really want. 
쿠버네티스 노드와 그 내부에서 웹브라우저 접근은 내가 원하는 것이 아닙니다.

I want to be able to access the web server from my own laptop without having to SSH into the node and simply by accessing the IP of the kubernetes node.
(SSH:라는게 밖에 방화벽 서버에서 서비스를 호출하는 방식을 말하는 건가?)
(제 랩탑에서 SSH 없이 노드에 접근하는 것과 쿠버네티스노드의 IP를 간단한 연결을 통해)
웹 서버(POD)에 통한 접근이 가능해지는 것입니다.

(through:~통해, 통과하여)
So we need something in the middle to help us map requests to the node from our laptop through the node to the POD running the web container.
그러기 위해서는 이 사이에 웹컨테이너가 동작중인 POD의 노드를 통과하여 우리의 랩탑으로의 요청을 연결시켜줄 무언가가 필요합니다.

This is where the kubernetes service comes into play.
여기가 쿠버네티스 서비스가 등장할 장소 입니다.

The kubernetes service is an object just like PODs, Replicaset or Deployments that we worked with before.
쿠버네티스 서비스는 POD나 레플리카셋, 디플로이먼트들과 유사한 객체입니다. 

One of its use case is to listen to a port on the Node and forward requests on that port to a port on the POD running the web application.
쿠버네티스 서비스의 용례중 하나는. 노드로 부터 요청을 기다리거나 웹어플리케이션이 동작하는 POD의 포트로 요청을 전달하는 것입니다.

This type of service is known as a NodePort service because the service listens to a port on the Node and forwards requests to PODs.
이런 서비스를 우린 노드포트서비스라고 부릅니다. 왜냐하면 실제 이 서비스는 포트를 리스닝 하고 있거나 요청을 POD 에 전달하기 때문입니다.

There are other kinds of services available which we will now discuss.
이것들은 우리가 논의하려는것들과는 다른 종류의 서비스입니다.


The first one is what we discussed already.
첫번째 것은 우린 이미 다뤘습니다.

NodePort were the service makes an internal POD accessible on a Port on the Node.
노드 포트 서비스는 내부의 POD 가 노드의 포트를 통해 접근 가능하도록 만드는 서비스 였습니다.
[POD -> 노드포트:8080 을 통해 10.244 로 접근함.]

The second is cluster IP.
두번째 것은 클러스터 IP 입니다.

And in this case the service creates a virtual IP inside the cluster to enable communication between different services such as a set of front end servers to a set of back end servers.
그리고 이 서비스의 경우, 프론트앤드와 백엔드 서버와 같이 서로 다른 서비스간 소통이 가능해지도록 가상의 IP를 클러스터 내부에 생성합니다.

(provision:공급)
The third type is a LoadBalancer, were it provisions a load balancer for our service in supported cloud providers.
세번째는 로드 밸런스 입니다. 이것은 클라우드 프로바이더로 부터 우리의 서비스를 부하를 줄이는것 제공합니다.


A good example of that would be to distribute load across the different web servers in your front end tier.
로드밸런서 서비스의 좋은 예시는 프론트 앤드 티어에서 서로 다른 웹 서버를 가로 질러 부하를 배분하는 것입니다.

We will now look at each of these in a bit more detail along with some demos.
우린 몇몇 데모를 통해 각각 좀 더 자세한 세부사항에 대해 살펴볼 것입니다.

In this lecture we will discuss about the NodePort Kubernetes Service.
이번 강의에서는 노드포트 쿠버네티스 서비스에 대해서 알아볼것입니다.

Getting back to NodePort, Few slides back.
몇 슬라이드를 돌아 노드포트로 돌아갑니다.

We discussed about external access to the application.
우린 어플리케이션의 외부접근에 대해 논의해보겠씁니다.

We said that a Service can help us by mapping a port on the Node to a port on the POD.
우리는 서비스는 노드와 POD 의 포트를 매핑하는것을 도와준다고 말했씁니다.

Let’s take a closer look at the service.
이 서비스를 좀 더 자세히 봅시다.

If you look at it. there are three ports involved.
여기 보시면, 여기 3개의 포트가 할당되어있습니다.

The port on the POD were the actual web server is running is 80. And it is referred to as the targetPort because that is were the service forwards the requests to. 
POD에 할당되 포트는 실제 웹서버가 동작하고 있고 이건 80번 포트입니다. 그리고 타겟 포트로 불려지고 있습니다. 왜냐하면 요청을 전달하는 서비스 이기 때문입니다.

[서비스랑 POD 가 동일한 80포트를 열어놓고 통신한다.]

The second port is the port on the service itself 
이 두번째 포트는 서비스 스스로를 참조하기 위한 포트입니다.

it is simply referred to as the port.
이건 단순히 포트같은게 참조됩니다.

(term:용어) (viewpoint:견해, 지점, 보이는 지점)
Remember these terms are from the viewpoint of the service.
이 용어는 이 서비스의 관점에서의 용어임을 기억하세요.

The service is in fact like a virtual server inside the node. 
이 서비스는 사실, 노드내부에 존재하는 가상서버 입니다.

☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
[노드와 POD 는 보통 1:1 관계이니. POD 랑 통신하는 서비스는 1개가 존재]
- 실제 웹 어플리케이션이 동작하는 POD 상의 포트 = 타겟포트
- 외부에서 접근가능한 서비스가 항상 주시하는 포트들 = 노드 포트
- 서비스에는 웹어플리케이션이 동작하는 응답가능한 IP 주소가 서비스에는 있을 것이다. = 클러스터IP
☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

inside the cluster. It has its own IP address and that IP address is called the cluster IP of the service.
클러스터 내부에. 가상서비는 IP주소를 가집니다. 
그 가상서버의 주소를 서비스의 클러스터IP라고 부릅니다.

And finally we have the port on the node itself which we use to access the web server externally and
최종적으로, 우린 외부에서 웹서버로 접근 하는데 사용되는 노드 스스로를 가리키는 포트를 가지고 있습니다.

that is known as the node port.
이걸 노드 포트라고 부릅니다.

As you can see it is 30008.
보시는것 처럼 포트는 30008 입니다.

That is because NodePorts can only be in a valid range which by default is from 30000 to 32767.
이것이 노드포트가 30000~32767까지 레인지를 기본으로 가지는 이유입니다.

Lets now look at how to create the service.
이제 이 서비스를 어떻게 생성하는지 알아봅시다.


Just like how we created a Deployment, ReplicaSet or Pod, in the past we will use a definition file to create a service 
과거에 디플로이먼트 레플리카셋 POD 를 만들었던 방법처럼, 서비스 생성을 위해 definition 파일을 사용할 예정입니다.

the high level structure of the file remains the same as before we have the API version kind Metadata and specs sections
파일의 상위 개념은 이전과 동일합니다.
apiVersion, kind, metadata, spec 섹션이 있습니다.

the API version is going to be V1.
api 버전은 v1 을 합니다

The kind is of course service 
kind 는 당연하게도 service

the metadata will have a name and that will be the name of the service.
metadata 에서는 name 이 있고 서비스 네임을 적을 겁니다.

It can have labels, but we don't need that for now.
이건 labels 아래에 있는 지금 당장 하지는 않을 겁니다.

Next we have spec and as always this is the most crucial part of the file and that is where we will be defining the actual services And this is the part of a definition file that differs between different objects.
그리고 spec 이 있습니다.
그리고 다음으로 항상 이것이 파일에서 가장 중요한 부분이고 실제 서비스를 정의하는 곳이며, 여기가 다른 오브젝트들과 다른 부분이 정의된 파트입니다.

in the spec section of a service.
서비스의 스펙 섹션에서는

We have type and ports. the type refers to the type of service we are creating.
type 과 ports 가 있습니다.
type 은 우리가 생성한 서비스의 유형을 말합니다.

[서비스 3대장 : 클러스터IP, 노드포트, 로드밸런서]
- 서비스가 노드내부에서 불려지는 포트
- 외부에서 접근하기 위해 감시해야하는 포트
- 들어오는 부하는 분산시켜야 하는 서비스

As discussed before it could be cluster IP, node port or load balancer.
이전에 논의한바와 같이. 이부분은 클러스터 IP,노드 포트도는 로드밸런서가 될 수 있습니다.

In this case since we are creating a node port we will set it has nodeport.
이 경우에는 노드 포트를 생성할때 부터 우리는 노드 포트를 설정할 예정이였다.

The next part of a spec is ports.
다음 스펙 파트는 ports입니다.

This is where we input information regarding what we discussed on the left side of the screen.
이것은 화면 왼쪽에 그림으로 설명한 것에 관한 정보를 입력하는 장소 입니다.
[요청전달:80, 외부에서접근가능한 포트:30000~32767]

[외부에서 접근하는 노드포트 -> 타겟포트로 연결지러주는 작업]


The first type of port is the target port which we will set to 80 
첫번째 포트의 유형은 타겟 포트 이고 80으로 셋팅 하겠씁니다.

the next one is simply port which is a port on the service object and we will set that to 80 as well.
다음은 서비스 오브젝트의 포트 입니다. 이 역시 80으로 하겠습니다.


The third is NodePort which we will set to 30008 or any number in the valid range.
다음 3번째가 노드포트입니다. 이것은 30008이나 다른 유효한 범위내의 숫자를 지정합니다.

Remember that out of these the only mandatory field is port 
이중 유일한 필수 입력값은 포트 임을 기억하세요.

if we don't provide a target port.
만약 타겟 포트를 제공하지 않으면

It is assumed to be the same as port.
동일한 포트로 가정됩니다.

and if you don’t provide a nodePort a free port in the valid range between 30000 and 32767 is automatically allocated.
그리고 노드 포트를 제공하지 않으면, 유효 범위내에 빈 포트가 자동으로 할당 됩니다.

Also note that ports is an array.
또 포트는 배열임을 노트하세요.

So no the dash under the port section that indicate the first element in the array.
그래서 포트섹션아래에 '-'마크를 안붙이는 것은 첫번째 항목을 가리키는 것입니다.

You can have multiple such port mappings within a single service. 
하나의 서비스에 다수의 포트 매핑을 가질 수 있습니다.

So we have all the information in
이렇게 우린 모든 정보를 다 입력했지만

but something is really missing.
뭔가 놓친 것이 있습니다.

There is nothing here in the definition file that connects the service to the pod.
POD 에 연결할 서비스를 정의하는 것이 정의파일내에 없습니다.


We have simply specified the target port but we didn't mention the target port on which pod.
우린 간략하게 타겟 포트는 정의했습니다만, 어떤 POD 의 타겟 포트인지는 말하지 않았습니다.

There could be 100s of other PODs with web services running on port 80.
저기에 80포트로 동작중인 웹 서비스의 100개의 다른 POD이 있을 수 있고,

So how do we do that 
그렇다면 우린어떻게 해야 할까요.

as we did with the replica sets previously.
이전에 레플리카 셋에서 했던 것 처럼

and a technique that you will see very often in kubernetes. 
쿠버네티스에서 종종 자주 볼 수 있었던 기술중에

we will use labels and selectors to link these together.
레이블과 셀렉터를 서로 연결 시키는데 사용하는것을 볼 수 있습니다.

We know that the POD was created with a label.
우린 POD 가 레이블과 함께 생성된것을 알고 있습니다.

We need to bring that label into the service definition file 
서비스 정의파일의 레이블로 옮겨갈 필요가 있습니다.

so we have a new property in the spec section
그리고 이 스펙 섹션에 새 속성을 정의합니다.

and that is called selector.
그리고 셀렉터라 부릅니다.

Just like in a replica set and deployment definition files.
레플리카셋과 디플로이먼트 정의파일들 처럼

under the selector provide a list of labels to identify the pod 
셀렉터는 POD를 식별하기 위해 레이블 목록을 목록을 제공합니다.

for this Refer to the pod definition file used to create the pod.
이 경우, pod 생성을 위핸 만들어진 정의파일을 참조합니다.

Pull the labels from the pod definition file and place it under the selector section.
POD 정의파일에서 레이블을 뽑고, 이것을 셀렉터 섹션 아래에 위치 시킵니다.

This links the service to the pod.
이로써 서비스를 POD 에 연결시킵니다.

Once done create the service using the kubectlcreate command and input the service-definition file
kubectl create 명령어과 정의파일 입력을 통해 서비스를 한번 생성하고

and there you have the service created. 
그리고 그곳에 서비스를 생성합니다.

To see the created service, run the "kubectl get services" command that list the service the cluster IP and the map port.
생성된 서비스를 보는 건, 서비스와 클러스터IP와 포트 매핑을 리스트하는 kubectl get services 명령어를 실행합니다.

The type is node port as we created and the port on the node is set to 30008 
그 유형은 우리가 만들고 노드에 올린 포트가 30008번 포트인 노드포트 입니다.

because that's the port that we specified in the definition file.
해당 포트가 우리가 정의파일로 특정지은 포트이기 때문입니다.

We can now use this port to access the web service using curl or a web browser.
이제 curl 이나 웹브라우저를 통해 이 포트를 웹 서비스에 접근하는 용도로 사용할 수 있습니다.


So curl to 192.168.1.2 which is the IP of the node and then use the port 30008 to access the web server
그럼 curl 192.168.1.2(노드IP) 를 실행합니다.
그리고 30008포트를 사용해 봅시다.
>> 192.168.1.1:30008


so far we talked about a service mapped to a single pod.
여기까지 단일 POD 와 서비스를 연결하는 것에 이야기 했습니다.

But that's not the case all the time.
하지만 이게 발생가능한 모든 케이스는 아닙니다.

what do you do when you have multiple PODs? 
다수의 POD를 가지게 된 때에는 무엇을 하겠습니까

In a production environment You have multiple instances of your web application running for high availability and load balancing purposes 
운영환경에서, 고가용성과 로드밸런싱을 위해 웹어플리케이션 인스턴스를 멀티로 가집니다.

in this case. We have multiple similar pods running our web application 
다수의 비슷한 POD 가 웹 어플리케이션을 구동 시키고 있습니다.

they all have the same labels with a key app and set to a value of my app
그들 모두 키앱이라는 레이블을 같이 가지고 있습니다. 그리고 myapp이라 셋 해씁니다.

the same label is used as a selector during the creation of the service.
동일 레이블은 서비스를 생성하는 동안에 셀렉터로 사용됩니다.

So when the service is created.
그리고 서비스가 완성되면,

it looks for a matching pod with the label and finds three of them. 레이블에 매칭되는 POD 를 찾습니다. 그리고 그것들 3개를 찾습니다.
[그림상 동일 레이블이 3개임, 인스턴스 복제가 일어난듯?? POD 당 한개씩]

The service then automatically selects all the three pods as endpoints to forward the external requests coming from the user.
이 서비스는 그리곤 자동으로 3개의 POD를 외부 사용자의 요청을 전달하기 위한 엔드포인트로 선택 합니다.

You don't have to do any additional configuration to make this happen.
여기까지 발생한 일들을 만들기 위해 추가적인 설정을 할 필요는 없습니다.

And if you're wondering what algorithm it uses to balance the load across the three different pods.
그리고 어떤 알고리즘이 3개의 다른 POD 의 로드밸런싱을 위해 사용되는지 알고 싶다면.

it uses a random algorithm.
이건 랜덤 알고리즘이 사용됩니다.

does the service acts as a built in load balancer to distribute load across different pods 
서로 다른 POD 사이에 부하를 줄이기 위한 로드밸런서가 내장되어 있는것 처럼 행동 합니까?


and finally let us look at what happens when the pods are distributed across multiple nodes.
그리고 최종적으로 POD가 다수의 node 로 분산되어질때 어떤일이 일어나는지 확인해 봅시다.

In this case we have the web application on pods on separate nodes in the cluster.
이 경우 우린 클러스터내 분리된 노드들의 POD 에 웹 어플리케이션을 올렸습니다.

When we create a service without us having to do any additional configuration 
우리가 추가적인 설정 없이 서비스를 생성했을 때면

(spans:닿다, 걸치다, 뼘, 날개 폭)
kubernetes automatically creates a service that spans across all the nodes in the cluster and maps the target port to the same node port on all the nodes in the cluster 
쿠버네티스는 자동으로 클러스터내 모든 노드들에게 접근하여 동일 노드포트를 타겟 포트로 매핑 합니다. 


this way you can access your application using the IP of any node in the cluster and using the same port number which in this case is 30008 
이 방법으로 당신은 클러스터내 모든 노드들의 IP나 이번 경우에서 처럼 30008번 동일 포트넘버를 사용하여 어플리케이션에 접근할 수 있씁니다.

as you can see using the IP of any of these nodes.
모든 노드에 IP를 사용하는 것을 볼 수도 있습니다.

And I'm trying to curl to the same port and the same port is made available on all the nodes part of the cluster.
그리고 curl 명령어를 동일 포트에 시도했습니다. 그리고 클러스터내 모든 노드들의 같은 포트들은 사용가능해 졌습니다.



명령어로 노드포트 생성하는 법
(pod 는 run 으로 생성, 서비스는 expose 로 생성)
>> kubectl expose deployment simple-webapp-deployment --name=webapp-service --target-port=8080 --type=NodePort --porty=8080 --dry-run=client -o yaml > filename.yaml

>> kubectl apply -f filename.yaml

To summarize in any case
요약하자면, 모든 경우에
(whether:~이든)
whether it be a single pod on a single node multiple pods on a single node or multiple pods on multiple nodes 
싱글POD 이건 싱글NODE 이건 멀티플 POD in 싱글NODE 또는 멀티플 POD on 멀티플 NODE 이건

the service is created exactly the same without you having to do any additional steps during the service creation 
서비스는 당신이 서비스를 생성하는 동안 어떤 추가적인 스탭을 함과 관계 없이 동일 하게 생성되어집니다.

when pods are removed or added. 
POD 가 지워지거나 추가되더라도

The service is automatically updated making its highly flexible and adaptive
서비스는 레이블만 같으면 아주 높은 수준으로 플렉서블 하고 적응적으로 자동으로 업데이트 해줍니다.

(typically:일반적으로) (will not : ~ 할 필요가 없다.)
once created You won't typically have to make any additional configuration changes
일단 생성되면, 일반적으로 다른 추가적인 구성을 변경할 필요가 없습니다.


that's it for this lecture and I will see you in the next lecture.