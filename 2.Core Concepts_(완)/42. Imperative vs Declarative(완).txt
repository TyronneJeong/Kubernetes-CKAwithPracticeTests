* imperative : 명령적
* declarative : 선언적
* approache : 접근, 접근법, 진입, 닥치다, 가까이 가다, 접근시키다.

In this lecture, we will discuss about imperative and declarative approaches in Kubernetes
이번 강의에서는 명령적 그리고 선언적 접근법에 대해서 다뤄 보겠습니다.

towards the end of this lecture.
이 강의 후반을 향할때

We will talk about some tips that you can use in the exam.
시험에서 사용가능한 몇몇 팁에 대해서도 말해볼까 합니다.




(So far:지금까지)
So far, we have seen different ways of creating and managing objects in Kubernetes.
지금까지 우리는 오브젝트를 생성하고 관리하는 다양한 방법을 살펴보았습니다.

(as well as:게다가, ~뿐만 아니라)
We created objects directly by running commands, as well as using object configuration files.
우리는 커맨드를 직접 실행하는 것 뿐만 아니라 configulation 파일을 사용하여 오브젝트를 생성했습니다.

Now, in the infrastructure as code world, there are different approaches in managing the infrastructure
코드월드 같은 인프라 스트럭쳐에서는 인프라스트럭 관리에 대한 다른 접근방식이 있습니다.

and they are classified into imperative and declarative approaches.
그리고 그것들은 선언적 접근법과 명령적 접근법으로 분류되었습니다.

Let's understand this with an analogy, 
이를 비유를 통해 이해해보도록 합시다.

let's say you want to visit a friend's house located at St. B
말해봅시다.
당신이 방문하길 원하는 스트리트 B에 위치한 친구의 집을 말해봅시다.

(instruction:명령, 지침)
and the past you would hire a taxi and give Step-By-Step instructions to the driver on how to reach the destination.
과거 당신은 택시를 빌렸고 택시 드라이버에게 단계별 명령을 내렸습니다. 어떻게 목적지에 도달하는지를 

like take right to Street B, then take left to go to Street C, and then take another left and then right to go to Street D and stop at the house 
B스트리트에서 오른쪽으로 가세요., C스트릿에서 왼쪽으로 가세요 그리고 저 집 앞에 서 주세요.처럼.

specifying what to do and how to do.
무엇을 할지 어떻게 할지를 지정합니다.

More importantly is the imperative approach.
여기서 더 중요한 것은 명령적 접근 입니다.

On the other hand, today when you book a cab, say through Uber, you just specify the final destination,
다른 한편으로, 오늘날 택시를 예약할 때, 투버를 통해 당신은 최종 목적지만 정하면 됩니다.

like drive to Tom's house.
탐즈 하우스 처럼요.

And this is the declarative approach.
그리고 이게 선언적 접근법입니다.

In this case, we are not giving Step-By-Step instructions.
이 경우, 우리는 스탭 바이 스탭으로 명령을 하지 않습니다.

(Instead:대신에)
Instead, we're just specifying the final destination.
대신에 우린 최종 목적지만 정합니다.

We're declaring the final destination.
우리는 최종 목적지만 선언합니다.



(figures out:알아내다)
And the system figures out the right path to reach the destination, 
그럼 시스템은 목적지에 도착할 바른 길을 알아냅니다. 

specifying(지정) what to do, not how to do, is the declarative approach.
무엇을 하고 무엇을 하면 안될지를 지정하는 것 이것은 선언적 접근법입니다.

☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
So what's that got to do with what we are learning 
그럼, 이것은 우리가 배우는 것과 무슨 상관이 있을까요?
☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

in the infrastructure as code world
코드월드 같은 인프라스트럭쳐에서는


[명령적 접근]

(provision:규정, 마련, 식량, 지급량, 식량을 공급하다)
An example of an imperative approach of 
명령적 접근법의 예로
provisioning infrastructure would be a set of instructions right step by step, such as provisioning a VM, named a Web server, installing the nginx software on it, editing configuration file to use Port AT&T and setting the path to Web files, downloading source code of repositories from GIT and finally starting the nginx server.
프로비저닝 인프라스트럭쳐는 단계별 명령어 집합이 될 것입니다.
"프로비저닝 VM, 웹서버 이름짓기, 그 서버에 ngingx설치하기, 그리고 AT&T 포트를 사용하기 위해 설정파일 수정하기 그리고 웹파일의 경로 지정, GIT 리파지에서 소스코드 다운로드 하기 최종적으로 bginx 서버 시작하기."


So here we are saying what is required and also how to get things done.
때문에, 여기서 우리는 무엇이 필요한지 그리고 어떻게 해야하는지를 말하고 있습니다.

In the declarative approach we declare our requirements.
선언적 접근법에서는 우리는 요청사항을 선언합니다.

For instance, all we say is that we need a VM by the name Web server with the nginx software on it with a port AT&T and the path to the web files defined and where the source code of the application is stored.
예를들면, 우리가 말하는 모든 것은 "AT&T 포트와 함께 nginx 소프트웨어가 탑재된 웹서버가 있는 VM이 필요하다 그리고 웹 파일들의 경로를 지정하고 소스 코드 파일은 어디에 저장되어있는지."

And everything that's needed to be done to get this infrastructure in place is done by the system or the software.
그리고 해당 인프라스트럭쳐가 가지는 완료되기를 필요로 하는 모든 것 은 시스템 또는 소프트웨어로 완성 됩니다.

You don't have to provide step by step instructions.
단계적 명령을 할 필요가 없습니다.

orchestration tools like Ansible Puppet or Chef or terraform fall into this category.
오케스트레이션 툴, 앤시블이나 퍼펫, 또는 쉐프, 테라폼등이 이 카테고리에 들어 갑니다.

-----------------------------------------------------------------
[명령적 접근법]
And the imperative approach, 
그리고 명렁적 접근법은

what happens if the first time only half of the steps were executed?
첫번째 수행에서 절반만 작동한 경우 무슨 일이 발생합니까??

What happens if you provide the same set of instructions again to complete the remaining steps 
남은 스탭을 완료시키기 위해, 동일한 명령어 셋을 또 제공하는 경우 어떤일이 생깁니까. ?

to handle such situations
이와 같은 상황을 처리하기 위해

There will be many additional steps involved, such as checks 
to see if something already exists and taking an action based on the results of that check.
만약 이미 무언가 이미 존재하거나 점검결과 필요한 행동을 해야 할일을 알기 위해 수많은 스텝들이 포함될 것입니다. 

[provisioning:사용자의 요구에 맞게 시스템 자원을 할당, 배치, 배포해두었다가. 필요시 시스템을 즉시사용가능한 상태로 만들어 주는 것을 말한다. - 프로 비져닝]

For instance, while provisioning VM, what would happen if a VM by the name Web server already exists?
예를들어 EVM이 프로비져닝 되는동안, 웹서버가 이미 존재하고 있다면 무엇이 일어날까요?

The same goes with creating a database or importing data.
동일한 일이 데이터 베이스를 생성하거나 데이터를 임포트 할때에도 생긴다.

(since:접속사, 이래, 이므로, 한지, 한때부터)
should it fail or should it continue since the VM is already there?
이건 실패로 처리해야 할까? 아니면 계속 진행을 해도 될까? VM이 이미 거기 있었던 때부터.

What if we decide to upgrade the version of software to say nginx 1.18 in the future,
만약 우리가 미래에 소프트웨어 버전을 업그레이드 하기로 결정했다면?

it should be as simple as updating the version of nginx in the configuration file and the system should take care of the rest.
이것은 설정파일속 nginx 버전을 업데이트 하는것 처럼 간단해야합니다. 그리고 시스템은 나머지 작업을 모두 처리해줘야 합니다.

[사용자는 버전 명만 적고, 나머지는 시스템이 알아서 처리한다는 뜻] 파라미터라이즈.
(Ideally:이상적으로)
Ideally, the system should be intelligent enough to know what has already been done and apply the necessary changes.
이상적으로 시스템은 어떤것이 이미 완료된 것으고 어떤것을 필수로 변경 적용해야할지를 알 정도로 충분히 똑똑해야합니다.

Only that's the declarative way of doing things.
이것이 무언가 할때의 선언적 방법입니다.





In the Kubernetes world, the imperative way of managing infrastructure is using commands like the 
쿠버네티스 환경에서 인프라 스트럭쳐를 명령적 방법은 아래 커맨드는 사용하는 것입니다.

1. Kubectl run --image=nginx nginx
2. kubectl create deploymeny --image=nginx nginx
3. kubectl expose deploymeny nginx --port 80
4. kubectl edit deployment nginx
5. kubectl scale deployment nginx --replicas=5
6. kubectl set image deploymeny nginx nginx=nginx:1.18
7. kubectl creat -f ngingx.yaml
8. kubectl replace -f nginx.yaml
9. kubectl delete -f nginx.yaml

All of these are imperative approaches to managing objects and capabilities.
이 모든 것들이 오브젝트와 캐파빌리티 관리를의 명령적 접근법입니다.

We are saying exactly how to bring the infrastructure to our needs by creating, updating or deleting objects.
생성과 업데이트 딜리트 오브젝트를 통해 어떻게 우리의 필요에 맞게 인프라스트럭쳐를 가져오는지를 우리는 정확하게 말하고 있습니다.

------------------------------------------------------------------
(would be:~입니다)
The declarative approach would be to create a set of files that defines the expected state of the applications and services on a continuous cluster.
선언적 접근법은 어플리케이션과 서비스에 기대되는 상태를 정의한 파일을 만드는 것입니다.

And with a single kubectl apply command 
(should be:되어야 합니다)
Kubernetes should be able to read the configuration files and decide by itself what needs to be done to bring the infrastructure to the expected state.
그리고 단한번의 kubectl apply 커맨드를 통해, 쿠버네티스는 파일을 읽고 스스로 결정 할 수 있어야 합니다. 어떤게 인프라스트럭쳐에 전달되길 원하는지

So in the declarative approach, you will run the "kubectl apply" command for creating, updating or deleting an object.
그래서 선언적 접근법에서는, 생성과 수정 삭제의 적용을 위해 kubectl apply 커맨드를 실행해야 합니다.

(figure out:알아내다)
The Apply command will look at the existing configuration and figure out what changes need to be made to the system.
Apply 커맨드는 기존의 설정을 살펴보고 시스템을 만들기 위해 무엇의 변경이 필요한지 알아냅니다.

------------------------------------------------------------------

So let's look at these in a bit more detail now within the imperative approach.
그럼 명령적 접근법에 대해 조금 더 자세히 알아봅시다.

There are two ways.
여기 두가지 방법이 있습니다.

The first is using imperative commands such as the run, create or expose commands to create new objects
첫번째는 명령적 커맨드는 사용하는 것입니다. run 이나 createm expose, create object 등

and the added scale and setcommands to update existing objects.
그리고 scale 을 더하고, set 커맨드로 기존 오브젝트를 갱신하는 것 들입니다.

Now, these commands help in quickly creating or modifying objects as we don't have to deal with YAML files and these are helpful during the certification exams.
이런 명령어들은 우리가 YAML 파일을 가질 필요없이 오브젝트들을 손쉽게 생성하고 수정하는데 도움이 됩니다.
그리고 이건 시험에서 도움이 됩니다.

However, they are limited in functionality and will require forming long and complex commands for advanced use cases such as creating a multi container pod or deployment.
하지만 명령적 커맨드는 기능적인 한계와 고급기능의 사용을 위해서는 길고 복잡한 형식을 필요로 합니다.
such as 멀티플 컨테이너의 POD 또는 디플로이먼트등.

Secondly, these commands are run once and forgotten.
그리고 두번째로 이 커맨드들은 일회성이서 잊혀집니다.

They are only available in the history of the user who ran these commands.
이 커맨드는 명령을 실행했던 사람의 히스토리에서만 사용가능합니다.

So it's hard for another person to figure out how these objects were created.
때문에 또다른 사용자들은 이 오브젝트가 어떻게 생성되었는지 알아내는데 어려움을 겪습니다.

So it is hard to keep track of.
때문에 명령 커맨드는 추적하는것도 힘듭니다.

And so it's difficult to work with these commands in large or complex environments.
그리고 명령식 접근으로는 크고 복잡한 환경에서 작업하기 어렵습니다.

And that's where managing objects with the object configuration files can help.
그리고 저곳이 오브젝트 설정 파일로 관리를 도울 수 있도록 하는 곳입니다.

(manifest:메타정보를 정의한 파일)
Creating object definition files or configuration files or manifest files as it's also called, can help us write down exactly what we need the object to look like in a Yamal format and use the kubectl to create command to create the object.
오브젝트 정의파일 또는 설정 파일 또는 manifest 등등으로 불려지는 것을 만드는 것은 
YAML 포맷으로 우리가 원하는 것을 정확하게 써내려갈수 있도록 돕습니다. 그리고 kubectl create 커맨드를 통해 오브젝트를 생성합니다.


We now have the YAML file with us always, and it can be saved in a code repository like git.
이제 우린 YAML 파일을 가지고 있습니다. 그리고 이건 git 같은 코드 리파지토리 같은곳에 저장 될 수 있씁니다.

We can put together a change review and approval process around these files 
우린 해당 파일의 변경사항 리뷰와 승인 프로세스를 함께 부여 할 수 있습니다.

so that a change made is reviewed and approved before it is applied to a production environment. 
그래서, 운영환경에 적용되기 전 그 변경사항은 리뷰되고 승인 받을 수 있습니다.

In the future. If it changes to be made, for instance, editing the image name to another version, 
미래에 만약 이미지병을 다른 버전으로 변경하는 등의 변경사항이만들어 지면

there are different ways to go about it.
거기엔 그것과 관련한 다른 방법이 있습니다.

One way is to use the kubectl edit command and specify the object name.
하나의 방법은 kubectl edit 커맨드를 사용하여 오브젝트를 지정하는 것입니다.

So when this command is run, it opens a Yamal definition file similar to the one you used to create the object.
그렇게 해서, 커맨드가 실행될때, 당신이 오브젝트를 생성할 때 사용했던 것과 유사한 YAML 파일을 엽니다.

But with some additional fields, such as the status fields that you see here, which are used to store the status of the pod.
그러나 여기에 표시되는 상태필드와 같은 일부 추가필드들은 포드의 상태를 저장하는데 사용됩니다.

This is not the file you used to create the object.
이건 당신이 오브젝트를 생성할때 사용했던 파일이 아닙니다.

This is a similar pod definition file within the kubernetes memory.
이건 쿠버네티스 메모리에 저장된 유사한 POD 정의파일입니다.

You can make changes to this file and save and quit and those changes will be applied to the life object.
당신은 이 파일을 변경할 수 있습니다. 그리고 저장하고 종료하고 해당 변경사항은 살아있는 오브젝트에 적용될 것입니다.

However, node that there is a difference between the live object and the definition file that you have locally.
하지만 노드 당신이 로컬에 가지고 있는 정의파일과 실행 동작중인 오브젝트사이에는 차이점이 있습니다.


The change you made using the kubectl edit command is not really recorded anywhere.
kubectl edit 커맨드로 만들 변경점은 어디에도 저장되지 않습니다.

After the change is applied, you're only left with your local definition file, which in fact has the old image name in it.
변경사항이 적용되고 나면, 수정 항목은 이전 이미지 네임이 담긴 로컬 정의파일만 남게됩니다.

(may:할수 있다) (unaware:알지못하는)
In the future, say, you or a team may decide to make a change to this object, unaware that a change was made using the edit command when the new change is applied, the previous change to the image is lost.
미래에 당신 혹은 팀이 이 오브젝트를 수정하려할 수도 있습니다.
새로운 변경사항이 적용되었을때 edit 커맨드로 새로운 변경사항을 적용했던 것을 알지 못한다면, 이전의 변경 사항 이미지는 잃어버립니다.

So you can use the kubectl edit command.
그래서 당신은 kubetl edit 커맨드를 사용할 수 있습니다.

(rely:의존하다)
If you are making a change and you're sure that you're not going to rely on the object configuration file in the future.
만약 변경사항을 만들고 미래에 오브젝트 설정파일을 사용하지 않을 것이라는게 확실하다면

But a better approach to that is to first edit the local version of the object configuration file with the required changes
하지만 그보다 나은 접근법은 첫번째로 변경요청사항을 로컬 버전의 오브젝트설정파일을 수정하는 것입니다.

(that is by updating :업데이트 하는 것입니다.)
and that is by updating the image name here and then running the kubectl replace command to update the object.
그리고 여기에 이미지 이름을 업데이트 하는 것 입니다. 그런 다음 kubectl replace 명령을 통해 오브젝트를 갱신합니다.

[kubectl edit 는 저장이 안되지만 kubectl replace 는 교체가 된다.]
- 하지만 kubectl replace 는 파일을 인자로 받지 않나?

(This way going forward : 앞으로 이런 식으로)
This way, going forward, the changes made are recorded and can be tracked as part of the change review process.
이런식으로 계속하면, 변경사항은 변경사항 리뷰 프로세스에의해 기록되고 추적가능해집니다.

[변경사항 리뷰 프로세스는 GIT 이 하는 건가?]

So at times you may want to completely delete and recreate objects in such cases, you may run the same command but with the force option like this.
당신이 오브젝트를 완전히 삭제하고 재생성하고 싶은 때에는 동일한 커맨드는 사용할 수 있습니다. 다만 여기에 force 옵션을 아래와 같이 추가해야 합니다.

>> kubectl replace --force -f ngingx.yaml

Now, this is still the imperative approach because you're still instructed kubernetes.
지금 이것은 여전히 명령적 접근법입니다. 왜냐하면 여전히 쿠버네티스에 명령을 내리고 있기 때문입니다.

how to create or update these objects.
어떻게 오브젝트를 생성하거나 업데이트 할까요.

first, you run the kubectl create command, to create the object, and then you run the replace command to replace the object or delete command or delete the object.
첫번째로, 오브젝트 생성을 위해 kubectl create 커맨드를 실행합니다. 그리고 교체를 위해 replace 명령을 사용하고 삭제를 위해 delete 명령을 사용합니다.

And what if you run the create command? If the object already exists
그리고 만약 create 명령을 내렸는데 오브젝트가 이미 존재한다면 어떻게 될까요?

now, then it would fail with an error that says the pod already exists.
이것이 에러로 실패하고 나면 pod 가 이미 존재하고 있다고 말할겁니다.

When you update an object, you should always make sure that the object exists first before running the replace command.
오브젝트를 업데이트 할 떄, replace 커맨드를 실행하기 전에 오브젝트가 존재하는지 먼저 살펴봐야 합니다.

If an object does not exist, the replace command failed with an error message.
만약 오브젝트가 존재하고 있지 않다면, replace 명령어는 에러 메세지와 함께 실패할 것입니다.

(taxing:부담스러운) (you as an administrator:관리자로써)
(aware:알고있는) (perform:행동하다, 이행하다, 공연하다, 작동하다)
So the imperative approach is very taxing for you as an administrator, as you must always be aware of the current configurations and perform checks to make sure that things are in place before making a change.
명령적 접근법은 관리자로서 당신에게 매우 부담 스럽습니다. 그리고 항상 현재 설정을 알고 있어야 하고 변경사항을 생성하기 이전에 오브젝트가 위치에 있는지 확인하는 일들을 행해야 합니다.

------------------------------------------------------------------
The declarative approach is where you used the same object configuration files that we've been working on
선언적 접근법은 우리가 작업해오던 동일한 오브젝트 설정 파일이 사용되는 곳 입니다.

(instead of:제외하고)
but instead of the creator, every replace commands, we used to apply command to manage objects.
하지만 create 명령을 제외하고 오브젝트를 관리하기 위해 replace 커맨드를 우리는 apply커맨드로 사용합니다.

[replcae 는 수동 업데이트, apply 는 자동 업데이트]

The kubectl apply command is intelligent enough to create an object if it doesn't already exist.
kubectl apply 커맨드는 오브젝트가 존재하지 않을때 이를 생성할 정도로 충분히 지능 적입니다.


(as you would usually:평소처럼)
If there are multiple object configuration files, as you would usually, then you may specify a directory as the path instead of a single file.
만약 저기 다수의 오브젝트 설정 파일이 있으면, 평소처럼 싱글파일을 대신해 디렉토리를 지정할 것입니다.

That way all the objects are created at once.
다수의 파일을 한번에 생성하는 방법으로

Now, when changes are to be made, we simply update the object configuration file and run the apply command again.
변경사항이 생성되면, 우린 간단히 오브젝트 설정파일을 갱신하고 apply 를 실행합니다.

And this time it knows that the object exists and so it only updates the object with the new changes.
그리고 이번에는 apply 명령이 오브젝트가 기존에 존재하는 것을 알고 새로운 변경 사항을 업데이트 하기만 합니다.

So it never really throws an error that says the object already exists or the updates cannot be applied
이건 실제 오브젝트가 존재한다거나 변경사항을 적용할 수 없다는 에러를 지나치는 것은 아닙니다. 

and will always figure out and the right approach to updating the object.
그리고 이건 항상 오브젝트를 업데이트 하는 올바른 접근법을 알아냅니다.

(whether:~이든)
So going forward, any changes made on the application, whether they're updating images or fields of existing configuration files or adding new configuration files all together for new objects
계속 나아가서, 모든 변경사항은 어플리케이션에서 만들어 집니다. 이미지는 업데이트 하건, 설정파일에 존재하는 필드건, 새로운 오브젝트의 새 설정파일을 추가를 하건 

(rest:휴식, 안정, [잔여], 쉼표)
all they do is simply update our local directory with the changes and then apply command, take care of the rest.
그들이 하는 모든 것은 단순히 로컬 디렉토리를 업데이트 하는 것입니다. 변경하고 apply 커맨드를 수행하고 나머지를 처리하는 것입니다.

So we will discuss more about how the command works exactly in the backend in the next lecture.
우린 정확히 이 커맨드가 백엔드에서 어떻게 동작하는지는 다음 강의에서 논하겠습니다.

For now, let me give you some tips as part of the exam.
지금은 시험에 적용가능한 몇가지 팁을 드리겠습니다.

So from an exam perspective, you could use the imperative approach to save time as much as possible.
시험의 관점에서, 가능한 많은 시간을 절약하기 위해 명령적 접근을 사용할수 있습니다.

For example, if the question is to just create a path or a deployment with a given image, then one of these imperative commands can help you achieve that quickly.
예를 들어, 경로를 생성하거나 디플로이먼트를 생성하는 질문이라면, 이런 명령적 커맨드가 손쉽게 달성하는데 도움이 될 것입니다.

So it's important to practice the imperative commands.
그래서 명령적 커맨드를 연습하는 것은 중요합니다.

If you need to edit a property of an existing object, then using the edit command, um, maybe the quickest way.
만약 기존 존재하는 오브젝트의 속성을 변경할 필요가 있을때에
edit 명령을 사용하세요. 이게 가장 빠른 방법일겁니다.

Right.


(preferred:~하는 쪽이 좋다, 취하다, ~에게 우선권을 주차, 제출하다, 제기하다)
If you have a complex requirement for, say, for example, that requires multiple container's environment variables, commands in containers, etc., then using an object configuration file to create object would be preferred.
만약 복잡한 요청을 받는다면, 멀티플 컨테이너 환경과 변수, 커맨드에서의 명령 등등 그때에는 오브젝트 설정파일을 생성하는 쪽이 좋습니다.

This way.

If you see that you made a mistake, you can easily update the file and apply it again.
만약 실수를 발견했다면, 손쉽게 파일을 수정하고 업데이트 할 수 있씁니다.

And using the kubetl apply command in that case would be a better option.
그리고 kubectl apply 커맨드를 사용하는 것이 좀 더 좋은 옵션이 됩니다.

(familiarized:친하게 지내다)
So for more details on the different approaches to managing a cluster, get yourself familiarized with the community's documentation pages and in the upcoming lab exercises, try to use imperative approach in solving questions.
클러스터를 관리하기 위해 서로 다른 접근법의 좀더 많은 상세 사항은 직접 더 알아 보습시오. 커뮤니티의 도큐멘테이션 페이지에서 문제를 풀기위해 명령적 접근법을 시도하면서 다가오는 다음 연습문제와 친해지십시오. 

Well, I will see you in the next lecture.