------------------------------------------------------------------------


------------------------------------------------------------------------
Hello and welcome to this lecture.
안녕하세요.

In this lecture, we will discuss about service networking.
이번 강의에서는 서비스 네트워킹에 대해 다뤄보겠씁니다.

In the previous lectures, we talked about pod networking, how bridge networks are created within each node and how pods get a namespace created for them and how interfaces are attached to those namespaces and how pods get an IP address assigned to them within the subnet assigned for that node.
이전 강의에서 우리는 POD 네트워킹에 대해 이야기 했습니다. 어떻게 브릿지 네트워크가 노드들 사이에 생성되는지 그리고 어떻게 POD 가 이 노드들을 위해 네임스페이스를 생성하는지 그리고 어떻게 이 네임스페이스들을 연결 하는지. 어떻게 POD 가 서브넷에서 IP 주소를 부여 받는지를 이야기 했습니다.

☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★
And we also sort through roads or other overlay techniques.
그리고 우리는 길 또는 다른 오버레이 테크닉을 통해 정렬 합니다.
☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★

We can get the pods in different nodes to talk to each other, forming a large virtual network where all pods can reach each other.
우리는 다른 노드에 있는 POD와도 소통 할 수 있습니다. 모든 포드가 서로 연결 할 수 있는 대규모 가상 네트워크를 형성 합니다.

Now you would rarely configure your pods to communicate directly with each other.
이제 당신도 당신의 POD 를 다른 POD 로 직접 통신 할 수 있습니다.

If you want to pod to access services hosted on another pod, you would always use a service.
만약 당신의 POD 가 다른 POD 에서 호스팅 중인 서비스에 엑세스 하기를 원한다면, 서비스를 항상 이용해야 합니다.

Let's quickly recap the different kinds of services.
그럼 다른 종류의 서비스들을 빠르게 요약 해 봅시다.

To make the orange pod accessible to the blue pod, we create an orange service.
오렌지 POD 을 블루 POD 에 접근 가능 하게 만들려면 우리는 오렌지 서비스를 만들어야 합니다.

The orange service gets an IP address and a name assigned to it.
오렌지 서비스는 IP 과 이름이 부여 되어있습니다.

The blue pod can now access the orange pod through the Orange Services IP or its name.
블루POD 는 오렌지 서비스를 통해 오렌지 POD 에 접근 할 수 있습니다.

[name resolution]

We'll talk about name resolution in the upcoming lectures.
우리는 다음 강의에서 이름확인에 대해 이야기 할 것입니다.

For now, let's just focus on IP addresses.
지금은 IP 주소에 관해서만 집중 합시다.

The blue and orange pods are on the same node.
블루와 오렌지 POD 는 동일한 노드입니다.

What about access from the other pods On other nodes
다른 노드에 있는 다른 POD 로부터 접근해 온다면 어떨까요?

(irrespective:상관없이)
when a service is created, it is accessible from all pods on the cluster, irrespective of what nodes the pods are on.
서비스가 생성되어 있다면 클러스터내 모든 POD 들이 접근 가능 합니다. 어떤 노드의 POD 인지 상관없이요.

While a pod is hosted on a node as service is hosted across the cluster, it is not bound to a specific node.
서비스가 클러스터 전체에 호스팅 되기 때문에 POD 가 노드에 호스팅 되는 동안 특정 노드에 바인딩 되지 않습니다.

But remember, the service is only accessible from within the cluster.
하지만 기억하세요. 서비스는 오직 클러스터 내에서만 접근 가능 합니다.

This type of service is known as cluster IP.
이런 유형의 서비스를 클러스터 IP 라고 합니다.

If the orange pod was hosting a database application that is to be only accessed from within the cluster,
만약 오렌지 POD 가 데이터 베이스 어플리케이션을 호스팅 한다면 이것은 클러스터 내에서만 엑세스 되어야 합니다.

then this type of service works just fine.
그리고 이런 유형의 서비스는 제대로 동작 합니다.

Say, for instance, the purple pod was hosting a web application to make the application on the pod accessible Outside the cluster, 
예를들어, 보라색 POD 가 클러스터 외부에서 포드의 어플리케이션에 엑세스 할 수 있도롤 웹 어플리케이션을 호스팅 하고 있다고 가정 해 보겠습니다.

we create another service of type node port 
우리는 또 다른 타입의 서비스를 생성 합니다. 노드 포트

this service also gets an IP address assigned to it and works just like cluster IP, as in all the other pods can access the service using its IP.
이런 서비스는 IP 주소가 할당 되어 있습니다.모든 다른 POD 들이 IP 를 사용하여 접근 가능 함에 따라 그리고 클러스터 IP 처럼 작동 합니다. 

But in addition, it also exposes the application on a port on all nodes in the cluster 
하지만 더하자면, 이 POD 는 클러스터내 노드에 포트로 공개되어 있습니다.

that we external users or applications have access to the service.
외부 사용자 또는 어플리케이션은 서비스를 통해 접근 하는 것입니다.

So that's the topic of our discussion for this lecture.
그러니 해당 주제를 이번 강의에서 다뤄보겠씁니다.







Our focus is more on services and less on pods.
우리의 포커는 좀 더 서비스에 옮기고 POD 에서는 덜어냅니다.

How are the services getting these IP addresses and how were they made available across all the nodes in the cluster?
서비스는 어떻게 IP 주소를 를 받을수 있을까요? 그리고 어떻게 클러스터내 모든 노드들에게서 이용가능 해질까요?

How is the service made available to external users through a port on each node?
어떻게 서비스가 각 노드의 포트를 통해 외부 사용자가 사용가능토록 만들어 질까요?

Who is doing that and how and where do we see it?
누가 이일을 하며 어떻게 그리고 어디서 우리는 이 작업을 볼 수 있을까요?

So let's get started.
시작해 봅시다.

Let's start on a clean slate.

We have a three node cluster, no pods or services yet.
우리는 3개의 노드 클러스터가 있습니다. POD 또는 서비스는 아직 없습니다.

We know that every kubernetes node runs a kubelet process which is responsible for creating pods.
모든 쿠버네티스 노드는 POD 생성을 책임지는 큐블렛 프로세스를 실행중이라는걸 우리는 압니다.

Each kubelet to service on each node watches the changes in the cluster through the API server, and every time a new pod is to be created, it creates the pod on the nodes.
각 큐블렛은 클러스터 내에서 API 서버를 통해 각 노드에서의 변화를 확인하는 서비스를 합니다. 그리고 매 시간 새로운 POD 가 생성될때 마다. NODE 에서 POD 를 생성 합니다.

It then invokes the CNI plug in to configure networking for that pod.
이것이 끝나면 각 POD 마다 네트워킹 설정을 하기 위래 CNI 플러그인을 부릅니다.

Similarly, each node runs another component known as kube-proxy.
유사하게. 각 노드들은 큐브프록시라고 부르는 또다른 컴포넌드들을 실행하고 있습니다.

kube-proxy watchers The changes in the cluster kube API server and every time a new service is to be created, kube-proxy gets into action.
큐브 프록시는 클러스터 kube API 서버 내 변화를 감시 합니다. 그리고 새로운 서비스가 생성될때마다 큐브 프록시도 실행됩니다.

Unlike pods, services are not created on each node or assigned to each node.
POD 와는 달리 서비스는 각 노드 마다 생성되지 않습니다.

Services are a cluster wide concept.
서비스는 클러스터 차원의 개념입니다.

They exist across all the nodes in the cluster.
서비스는 클러스터내 모든 노드들에 존재합니다.

As a matter of fact, they don't exist at all.
사실은 그들 어디에도 존재하지 않습니다.

There is no server or service really listening on the IP of the service.
서비스들은 서버나 IP로 실제 수신하는 서비스가 없습니다.

We have seen that pods have containers and 
우리는 POD 가 컨테이너를 가진것을 보았씁니다.

containers have namespaces with interfaces and IPs assigned to those interfaces 
컨테이너는 네트워크 네임스페이스를 가지고 있고, IP 와 저 인터페이스가 할당 되어 있습니다.

with services Nothing like that exists.


There are no processes or name spaces or interfaces for a service.
저기에 서비스를 위한 네임스페이스와 프로세스, 인터페이스등은 존재하지 않습니다.

It's just a virtual object.
이것은 단순한 가상 오브젝트 입니다.


[서비스는 가상 오브젝트 이다]

Then how do they get an IP address and how are we able to access the application on the pod through service?
그리고 어떻게 서비스들이 IP 주소를 갖고 서비스를 통해 POD 에서 실행중인 어플리케이션에 접근 가능하게 만들어 주는지?

When we create a service object in kubernetes, it is assigned an IP address from a predefined range.
우리가 서비스 오브젝트를 생성 했을때. 이미 정의된 영역에서 IP 주소가 할당 되었습니다.

The kube-proxy components running on each node gets that IP address and creates forwarding rules on each node in the cluster, 
큐브프록시 컴포넌트는 각 노드에서 동작 합니다. 각노드마다 IP주소와 포워딩 룰을 확보하는 것.

saying any traffic coming to this IP, the IP of the service should go to the IP of the pod.
모든 트래픽이 이 IP 로 온다고 가정 해 봅시다. 이 서비스의 IP POD 의 IP 로 향해야 합니다.

Once that is in place.
이것이 한번 위치하면

Whenever a pod tries to reach the IP of the service, it is forwarded to the pod IP address, 
POD 가 서비스 IP 에 접근하려 할 때마다, POD IP 주소로 전달됩니다.

which is accessible from any node in the cluster.
클러스터의 모든 노드에서 엑세스 할 수 있습니다.

Now, remember, it's not just the IP.
기억하세요. 이것은 IP 뿐만이 아닙니다.

It's an IP and port combination.
IP 와 Port 의 콤비네이션 입니다.

Whenever services are created or deleted, the kube-proxy component creates or delete these rules.
서비스가 생성되거나 삭제될때 큐브 프록시 컴포넌트는 이 규칙을 생성하거나 삭제합니다.

So how are these rules created?
그럼 어떻게 규칙을 생성할까요?

kube-proxy support different ways, such as userspace, where kube-proxy listen on a port 
큐브 프록시는 다른 방법을 따릅니다. userspace 같은.. 큐브프록시가 수신받는 포트에는

for each service and proxies connections to the pods by creating IPv6 rules 
각 서비스와 IPv6로 정의된 POD로의 프록시가 연결되어 있습니다.

for the third and the default option And the one familiar to us is using IP tables.
세번째 왜 기본 옵션 그리고 우리중 하나의 경우 IP 테이블을 사용합니다.

The proxy mode can be set using the proxy mode option while configuring the kube-proxy service.
프록시 노드는 프록시 모드 옵션을 사용 가능하도록 셋팅 할 수 있습니다.

If this is not set, it defaults to IP tables.
만약 이것들이 셋팅 되지 않는다면 IP Table 에 기본으로 설정 되어 있을 것입니다.

So we'll see how IP tables are configured by kube-proxy and how you can view them on the nodes.
그래서 우리는 어떻게 IP 테이블이 구성되어졌는지 볼 것입니다. 그리고 어떻게 노드에서 이들을 볼수 있는지 방법을 확인할 것입니다.

We have a pod named DB deployed on Node1.
우리는 DB 라는 pod 가 배포되어 있는 Node01 이 있습니다.

It has IP addresses 10.244.1.2
이 노드는 10.244.1.2 라는 IP 가 있습니다.

We create a service of type cluster IP to make this pod available within the cluster.
우리는 클러스터 IP 유형의 서비스를 생성 했습니다. 이것을 POD가 이용가능하도록 만들기 위해

When the service is created, kubernetes assigns an IP address to it.
서비스가 생성될때, 쿠버네티스는 IP 주소를 서비스에 무여 합니다.

It is set to 10.103.132.104 
10.103.132.104로 셋팅 했습니다.

this range is specified in the kube API servers option called service cluster IP range, which is by default 10.0.0.0/24
이런 레인 지정은 클러스터 IP Range 로 불리며, kube API Server 실행 옵션을 통해 지정할 수 있습니다. 기본값은 10.0.0.0/24

>> kube-api-server --service-cluster-ip-range- ipNet 

In my case, if I look at my kube API server option, I see it is set to 10.96.0.0/12
저의 경우 API 서버 옵션을 보면 이것이 10.96.0.0/12 로 설정 되어 있습니다.

>> ps aux | grep kube-api-server

That gives my services IP anywhere from 10.96.0.0 to 10.111.255.255
이걸로 나의 서비스 IP 는 어디에서나 10.96.0.0 to 10.111.255.255 사이가 주어집니다.

A relative point to mention here, when I set up my pod working, I provided a pod network idea?? range of 10.244.0.0./16, which gives my pod IP addresses from 10.244.0.0 to 10.244.255.255
지금 언급한것의 연관점은, 내가 나의 POD 가 작동하도록 설정할때. POD 네트워크의 IP 레인지를 제공합니다. 10.244.0.0 에서 10.244.255.255 로

The reason I brought this up here is because whatever range is specified for each of these networks,
이것을 가져온 이유는 이것이 각각의 네트워크에 대해 지정된 범위이기 때문입니다.

it shouldn't overlap, which it doesn't.
이것은 덮어 쓰면 안됩니다.

In this case.
이 경우에

Both of these should have its own dedicated range of IP to work with.
이것들 양쪽다 작업하기 위해 IP 대역을 지정 해야 합니다.

There shouldn't be a case where a pod and a service are assigned the same IP address.
저기는 POD과 서비스가 동일한 IP 가 할달될수 없는 케이스 입니다.

So getting back to services, that's how my service got an IP address of 10.103.132.104
그러니 다시 서비스로 돌아와서, 저것이 나의 서비스가 IP 주소 10.103.132.104를 받는 방법입니다.

You can see the rules created by kube-proxy in the IP tables and ipNet table output 
큐브프록시가 IP 테이블과 ipNet 테이블에 규칙을 생성하는 것을 볼수 있습니다.

search for the name of the service as all rules created by kube-proxy have a comment with the name of the service on it.
큐브 프록시는 서비스의 이름을 포함한 커멘트를 가지고 있으므로 만든 규칙에서 서비스 이름으로 검색 하십시오.

These rules mean any traffic going to the IP address 10.104.132.104 on port 3306, which is the IP of the service, should have its destination address changed to 10.244.1.2:3306 which is the IP of the pod.
이러한 규칙들은 모든 프래픽은 IP 10.104.132.104 : 3306 포트로 진행한다는 것을 의미합니다. 서비스 IP 는 목적지 주소가 10.244.1.2:3306 으로 변화된걸 알아야 합니다.

This is done by adding that -t nat rule to IP tables.
이런 마스커레이딩은 -t nat 옵션을 통해IP talbe 에 추가하여 실행 가능합니다.

>> iptables -L -t nat | grep db-service

Similarly, when you create a services of type node Port kube-proxy creates IP table rules to forward all traffic coming on a port, on all node to the respective back and pods.
비슷하게.. 노드포트 유형의 서비스를 생성할때. 큐브프록시는 해당 포트로 접근 하는 모든 트래픽에 IP table 규칙을 모든 트래픽에 제공합니다. 모든 

You can also see kube-proxy create these entries in the kube proxy logs itself.
또한 큐브 프록시가 큐브 프록시 로그에 스스로 엔트리를 생성하는 것 또한 볼 수 있습니다.

In the logs you will find what proxy users in this case its IP tables, and then adds an entry when it added a new service for the database.
로그 에는 찾을 수 있습니다. 프록시 유저. 이번 경우에 IP table 과 추가된 엔트리를.

Node that the location of this file might vary depending on your installation.
저기에 위치한 노드는 당신의 설치환경에 따라 다릅니다.


>> cat /var/log/kube-proxy.log

If you don't see these entries, you must also check the verbosity level of the process as well.
만약 이 엔트리를 보고 싶지 않으면, verbosity 레벨을 조정 하셔야 합니다.

Well, that said about service networking, I will see you in the next lecture.