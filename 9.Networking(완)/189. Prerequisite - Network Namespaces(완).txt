------------------------------------------------------------------------------------
[정리 - 네임스페이스 1:1 연결]
1. 네임스페이스 내부에서 네트워크 공간을 분리 시키기 위해 <네트워크 네임스페이스> 라는것을 생성함
>> ip netns add <namespace-name RED>
>> ip netns add <namespace-name BLUE>

2. 하지만 분리된 네트워크 네임 스페이스상에서도 연결이 필요한 경우가 있는데. 이를 위해
인터페이스 라는 걸 생성함. 이때 호스트에서는 모든 인터페이스가 다 조회되고 네임스페이스에서는 자기것만 조회됨.
>> ip link						<-- 호스트는 전체 조회
>> ip netns exec red ip link	<-- 네임스페이스 한정 조회
>> ip -n red link				<-- ip netns exec red 와 동일명령어

3. 가상이더넷이라는 엔드포인트간 연결정보를 관리 객체를 생성함.
>> ip link add veth-red type veth peer name veth-blue
>> ip link add veth-blue type veth peer name veth-red

4. 생성된 연결 정보를 RED 네임스페이스에 설정 함
>> ip link set veth-red netns red
>> ip link set veth-blue netns blue

5. 각 네임스페이스에 IP 를 지정 함.
>> ip -n red addr add 192.168.15.1 dev veth-red
>> ip -n blue addr add 192.168.15.2 dev veth-blue

[RED : 192.168.15.1]
[BLUE: 192.168.15.2]

6. 각 네임스페이스에서 ROUTING TABLE, ARP TABLE 을 확인하여 연결정보 생성을 확인함.
>> ip netns exec red arp
>> ip netns exec blue arp
>> ip netns exec red routing
>> ip netns exec red routing

[정리 - 네임스페이스 N:N연결]
1. 이전에 생성된 연결 정보를 제거 한다.
>> ip -n red link del veth-red
>> ip -n blue link del veth-blue

2. 엔드포인트간 연결정보 관리 객체를 생성한다. 이름 끝에 br 을 넣어 브릿지 가상 이더넷임을 표시한다.
>> ip link add veth-red type veth peer name veth-red-br
>> ip link add veth-blue type veth peer name veth-blue-br

3. 생성된 연결 정보를 네임스페이스에 설정 한다.
>> ip link set veth-red netns red
>> ip link set veth-blue netns blue

4. 엔드 포인트의 다른 종단인 v-net0 이더넷에 나머지를 연결 한다.
>> ip link set veth-red-br master v-net-0
>> ip link set veth-blue-br master v-net-0


[외부세계로의 연결]
1. 192.168.1.0 대역의 트래픽의 경우 192.168.15.5 를 통하도록 라우트를 추가 시킴.
>> ip netns exec blue ip route add 192.168.1.0/24 via 192.168.15.5
------------------------------------------------------------------------------------


Hello and welcome to this video 
안녕하세요.

in this video we get introduced to network names spaces in Linux
이번 비디오에서 우리는 리눅스의 네트워크 네임 스페이스 에 관해 알아 볼 것입니다.

networks namespaces are used by containers like Docker to implement network isolation.
네트워크 네임스페이스는 도커 같은 컨테이너가 네트워크 개별화 구현에 사용합니다.

We'll start with a simple host.
여기 간단한 호스트로 시작 해 봅시다.

As we know already, containers are separated from the underlying host using namespaces.
우리가 이미 아는 것 처럼. 컨테이너는 호스트가 사용하는 네임스페이스라는 공간에 의존 되어 분리되어 있습니다.

So what are namespaces?
그럼 네임스페이스란 무엇입니까?

If your host was your house, then namespaces are the rooms within the house that you assign to each of your children.
호스트를 집이라고 한다면, 네임스페이스는 집안의 방과 같습니다. 그방은 당신의 아이들을 할당 해 놓은.

The room helps in providing privacy to each child.
방은 각 아이들의 프라이버시를 제공하도록 돕습니다.

Each child can only see what's within his or her room.
각 아이들은 그들의 방에서 무엇이 있는지 그들만이 알수 있습니다.

They cannot see what happens outside their room.
그 방 밖에 있는 사람은 무슨 일이 있는지 알수 없습니다.

As far as they're concerned, they're the only person living in the house.
?????????????? 그들은 그 집에 사는 유일한 사람입니다.

However, as a parent, you have visibility into all the rooms in the house as well as other areas of the house.
하지만 부모의 경우, 부모는 집안의 모든 방을 볼 수 있습니다. 자기방 외에도 마찬가지로요.

If you wish, you can establish connectivity between two rooms in the house.
만약 당신이 원한다면 서로 다른 두개의 방을 연결 시켜 줄 수도 있습니다.

When you create a container, you want to make sure that it is isolated, that it does not see any other processes on the host or any other containers.
컨테이너를 생성 할때, 이것들이 각 분리되기를 원합니다. 분리됨으로써 호스트내 다른 컨테이너 나 호스트의 프로세스를 볼 수 없습니다.

So we create a special room for it on our host using a namespace.
그래서 네임스페이스라는걸 이용하여 우리의 호스트를 위한 특별한 방을 만들었습니다. 

As far as the container is concerned, it only sees the processes run by it and thinks that it is on its own host.
컨테이너에 관한 한, 네임스페이스는 프로세스가 돌아가는 것을 오직 볼 수만 있습니다. 그리고 자체 호스트에 속해 있는 것이라고 생각합니다.

(underlying:밑에 있는, 기저의)
The underlying host, however, has visibility into all of the processes, including those running inside the containers.
하지만, 호스트 기저에는 모든 프로세스를 볼 수 있는 능력이 있습니다. 컨테이너 내부에 돌고 있는 프로세스 까지도요.

This can be seen when you list the processes from within the container.
이 능력은 컨테이너 내의 프로세스를 나열할때도 볼수 있습니다.

---------------------------------------------------------------------------------------
[On the container]
>> ps aux
User	PID	%CPU	%MEM	VSZ	 RSS TTY	STAT	START	TIME	COMMAND
root	  1	0.0		0.0		4528 828 ?		Ss		03.06	0:00	nginx
---------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------
[On the Host]
>> ps aux
User	PID	%CPU	%MEM	VSZ	 RSS TTY	STAT	START	TIME	COMMAND
project	371	0.0		0.0		4528 828 ?		Ss		03.06	0:00	sshd: project@pts/0
project	372	0.0		0.0		4528 828 ?		Ss		03.06	0:00	sshd: project@pts/y
project	373	0.0		0.0		4528 828 ?		Ss		03.06	0:00	-bash
project	377	0.0		0.0		4528 828 ?		Ss		03.06	0:00	docker-containered-
root	382	0.0		0.0		4528 828 ?		Ss		03.06	0:00	nginx <-----
---------------------------------------------------------------------------------------

You see a single process with the process ID of one.
여기 싱글 프로세스를 보고 있습니다. 프로세스 ID 를 포함해서요.

When you list the same processes as a root user from the underlying host, you see all the other processes along with the process running inside the container, 
호스트 내부에서 루트 유저로 동일한 프로세스를 나열 했을때, 당신은 컨테이너 내부에서 동고 있는 프로세스 까지 포함하여 모든 프로세스를 볼 수 있습니다.

this time with a different process ID.
이번에는 다른 프로세스 ID 로요.

I think it's the same process running with different process ID inside and outside the container.
저는 생각합니다. 동일한 프로세스가 컨테이너 내부와 외부에서는 서로 다른 프로세스 ID 로 동작 하고 있다고요.

That's how namespace is work.
이것이 네임스페이스가 작동하는 방식입니다.


-------------------------------------------------------------------------------------
When it comes to networking, our host has its own interfaces that connect to the local area network.
이 네트워킹으로 건너오면, 우리의 호스트는 호스트 소유의 LAN 인터페이스를 가질 수 있습니다. 

Our host has its own routing and ARP Table with information about rest of the network.
우리의 호스트는 호스트 소유의 라우팅과 ARP 테이블을 가지고 있습니다. 유휴 네트워크 관한 정보와 함께요.

[Routing & ARP 테이블] <-> LAN

We want to seal all of those details from the container.
우리는 컨테이너에서 이런 모든 세부사항을 봉인하고 싶습니다.
??????????????????????????????????????????

When the container is created, we create a network namespace for it, that way it has no visibility to any network related information on the host 
컨테이너가 생성되었을때. 우리는 네트워크 네임스페이스를 컨테이너를 위해 생성 합니다. 네트워크 네임스페이스 생성은 호스트와 관련된 다른 네트워크에 대한 관찰 능력이 없습니다.

within its namespace.
네임스페이스 안에서.

The container can have its own virtual interfaces, routing and ARP tables.
컨테이너는 가상의 인터페이스 를 가질 수 있습니다. 라우팅과 ARP 테이블 이요.

The container has its own interface.
컨테이너는 컨테이너 소유의 인터페이스가 생겼습니다.

To create a new network namespace on a Linux host, run the IP netns add command, in this case, we create two network namespaces to list the network namespaces, run the ip netns command.
리눅스 호스트에 새로운 네트워크 네임스페이스를 만들기 위해서는 아래 명령을 실행합니다. 이 경우에 우리는 두개의 네트워크 네임스페이스를 생성합니다. 네트워크 네임스페이스를 나열하기 위해.

------------------------------------------------------------------------------------
>> ip netns add <namespace-name A>
>> ip netns add <namespace-name B>
>> ip netns 
A
B
------------------------------------------------------------------------------------
(LoopBack:원래 자리로 되돌아감)
To list the interfaces on my host, I run the IP link command, I see that my host has the Loopback interface and the eth0 interface.
호스트에 있는 인터페이스를 나열 하기 위해, ip link 명령을 실행합니다. 나의 호스트에는 루프백 인터페이스와 eth0 인터페이스가 보입니다.

# (호스트) 인터페이스 목록 조회
>> ip link

Now, how do we view the same within the network namespace that we created?
이제 우리가 생성한 네트워크 네임 스페이스 아래 동일한 내용을 어떻게 볼 까요?

How do we run the same command within the red or blue namespace?
레드 또는 블루 네임스페이스 안에서 어떻게 동일한 명령을 실행 할 수 있을까요?

Prefix the command with the command ip netns exec followed by the namespace name, which is red.
해당 명령을 접두어로 붙이세요. ip netns exec 에 네임 스페이스명을 붙여서.

# (네임스페이스) 인터페이스 목록 조회
>> ip netns exec red ip link

Now the IP link command will be executed inside the red namespace.
이제 ip link 명령어를 레드 네임스페이스 안에서 실행되게 됩니다.

Another way to do it is to add the -n option to the original IP link command.
또다른 방법으로  -n 옵션을 ip link 커맨드에 추가 하는 방법이 있습니다.

>> ip -n red link

Both of these are the same.
두 가지 방식 모두 동일합니다.

The second one is similar.
두번째 방법이 비슷합니다.????

(intend:의도하다)
But remember, this only works if you intend to run the IP command inside the namespace.
하지만 기억하세요. 이것들은 단순히 네임스페이스 내부에서 IP 커맨드를 실행하는 것을 의도했을때만 동작합니다.

As you can see, it only lets the loop back interface.
보시다 시피. 루프백 인터페이스만 허용하고 있습니다.

You cannot see the zero interface on the host.
호스트에서는 어떠한 인터페이스로 볼 수 없습니다.

So with namespaces, we have successfully prevented the container from seeing the host's interface.
그래서 네임스페이스에 관해서는. 컨테이너가 호스트의 인터페이스를 보는 것을 잘 예방 했습니다.

[컨테이너에서 호스트의 인터페이스를 보는걸 허용하지 않는다.]

(The same is true:마찬가지 입니다.)
The same is true with the ARP table.
ARP 테이블도 마찬 가지입니다.

If you run the ARP command on the host, you see a list of entries, but if you run it inside the container,
호스트에서 ARP 명령을 실행하게 되면, 엔트리 목록을 볼 수 있습니다. 하지만 컨테이너 내부에서 이를 실행하면

>> arp 
Address		HWType	HWaddress			Flags Mask		Iface
172.17.0.21	ether	02:43:ac:11:00:14	c				eth0
172.16.0.8	ether	33:43:ac:11:00:14	c				eth0
host01   	ether	22:43:EE:11:00:14	c				eth0

you see no entries.
아무런 엔트리도 보지 못합니다.

>> ip netns exec red arp 
Address		HWType	HWaddress			Flags Mask		Iface
...

And the same for routing table.
이것은 라우팅 테이블도 마찬가지입니다.

---------------------------------------------------------------------------------------
# 호스트에서 라우팅 테이블 조회
>> route
Kernel IP routing table
Destination	Gatewat		genmask	falgs	metric	ref	User	Iface
default		_gateway	0.0.0.0	UG		202		0		0	eth0
172.17.0.0	0.0.0.0		255.255.0.0		UG		202		0		0	eth0
172.17.0.0	0.0.0.0		255.255.255.0	202		0		0	eth0

# 네임스페이스에서 라우팅 테이블 조회
>> ip netns exec red route
Kernel IP routing table
Destination	Gatewat		genmask	falgs	metric	ref	User	Iface
...
---------------------------------------------------------------------------------------

Now, as of now, these network namespaces have no network connectivity, they have no interfaces of their own, and they cannot see the underlying host network.
지금과 같이, 네트워크 네임스페이스는 하나의 네트워크 연결도 가지고 있지 않습니다. 그들 소유의 인터페이스는 없습니다. 그리고 호스트 네트워크 내면도 볼 수 없습니다.


[red 에서 blue 라우팅 테이블을 조회하기 위한 연결 작업]
Let's first look at establishing connectivity between the name spaces themselves, 
네임스페이스들 간에 연결 구축을 먼저 봅시다.

just like how we would connect to physical machines together using a cable to an Internet interface on each machine,
각각의 물리적인 머신에 케이블로 인터넷 인터페이스를 서로 연결 하는 방법 처럼

you can connect to namespace spaces together using a virtual Ethernet pair or a virtual cable.
가장의 이더넷 쌍또는 가상의 케이블을 이용하여 네트워크 네임 스페이스를 연결 할 수 있습니다.

It's often referred to as a pipe, but I'd like to call it a virtual cable with two interfaces on either ends 
이것은 종종 파이프로 불려지기도 합니다. 하지만 저는 이것을 두개의 인터페이스간의 가상 케이블이라 부르는걸 좋아합니다.

to create the cable run the "ip link add" command with a type set to veth and specify the two ends with veth-red and veth-blue.
이 가상 케이블을 만들기 위해 ip link add 명령어를 실행합니다. 타입은 veth 그리고 두개의 엔드 포인트를 지정합니다. veth-red veth-blue

>> ip link add veth-red type veth peer name veth-blue

(appropriate:적절한)
The next step is to attach each interface to the appropriate namespace.
다음 단계는 각각의 인터페이스를 적절한 네임스페이스에 추가 하는 것입니다.

Use the command "ip link set with veth-red netns red" to do that.
해당 명령을 사용하여 처리합니다.

#가상의 이더넥을 red 에 설정
>>ip link set veth-red netns red

Similarly, attach the blue interface to the blue namespace.
동일하게 블루 인터페이스를 블루 네임스페이스에 추가 합니다.

>>ip link set veth-blue netns blue

We can then assign IP addresses to each of these namespaces.
그런 다음 우리는 각각의 네임 스페이스에 IP 주소를 할당 할 수 있습니다.

We will use the usual ip addr command to assign the IP address, but within each namespace 
우리는 각각의 네임스페이스에 IP 할당을 위해 보통의 ip addr 명령을 사용할것입니다.

we will assign the red namespace and IP 192.168.15.1 within assigned the blue namespace and IP 192.168.15.2
우리는 레드 네임스페이스에는 IP 192.168.15.1 을 블루 네임스페이스에는 192.168.15.2 의 IP 를 할당 합니다.

---------------------------------------------------------------------------------------
>> ip -n red addr add 192.168.15.1 dev veth-red
>> ip -n blue addr add 192.168.15.2 dev veth-blue

[RED : 192.168.15.1]
[BLUE: 192.168.15.2]
---------------------------------------------------------------------------------------
(respective:각각의)
We then bring up the interface using the "ip link set up" command for each device within the respective namespaces
각 네임스페이스별로 존재하는 가상 디바이스의 인터페이스 목록을 가져 오기 위해 ip link set up 명령을 사용합니다.

the links are up and the namespace can now reach each other.
링크가 올라가고. 네임 스페이스는 이제 서로 닿습니다.

try ping from the red namespace
레드 네임스페이스에 ping 을 날려 봅니다.

to reach the IP of the blue.
블루 네임스페이스의 IP 가 닿습니다.

If you look at the ARP table on the red namespace, you see it's identified.
레드 네임 스페이스의 ARP 테이블을 보신다면 이것이 제대로 정의된것을 볼 수 있습니다.
>> ip netns exec red arp

It's blue neighbor at 192.168.15.2 with a Mac address.
블루 이웃이 192.168.15.2 의 IP 맥어드레스와 함께.

Similarly, if you list the ARP table on the blue namespace, you see it's identified.
동일하게 블루 네임스페이스에서 ARP 테이블을 나열 합니다. 
>> ip netns exec blue arp

It's the red neighbor.
그럼 레드 이웃이 확인 됩니다.

If you compare this with the ARP table of the host, you see that the host arp table has no idea about this new namespace, as we have created and no idea about the interfaces we created in them.
당신이 호스트에서 이 두 네임스페이스의 ARP 테이블을 비교해 본다면, 이 새로운 네임스페이스에 대한 정보가 호스트의 ARP 테이블에는 없다는것을 알게 됩니다. 우리가 만든 인터페이스에 대해서 호스트는 전혀 모릅니다.
---------------------------------------------------------------------------------------
now that was we have just two namespaces.
이제 여기에는 두개의 네임 스페이스가 있습니다.

What do you do when you have more of them?
보다 많은 네임스페이스를 가지고 있다면 어떻게 할까요?

How do you enable all of them to communicate with each other?
어떻게 각 네임스페이스에 커뮤케이션을 허용할 수 있을까요?

Just like in the physical world, you create a virtual network inside your host, 
실제 세상에서는, 호스트에 가상 네트워크를 생성 합니다.

create a network you need a switch.
네트워크를 생성 할때 스위치가 필요합니다.

[라우터[스위치]] <-> [게이트웨이]

So to create a virtual network. You need a virtual switch.
그래서 가상 네트워크를 생성하기 위해서는 가상 스위치가 필요합니다.

So you create a virtual switch within our host and connect the namespace us to it.
그래서 우리의 호스트에 가상 스위치를 생성 합니다. 그리고 이것을 사용하여 네임스페이스를 연결 합니다.

Well, how do you create a virtual switch between our host?
좋습니다. 우리의 호스트와 가상의 스위치는 어떻게 생성 할까요?

There are multiple solutions available, such as the netty solution called as Linux Bridge and the Open vSwitch, etc..
거기에는 다양한 솔루션 적용이 가능 합니다. 가령, Netty 솔루션의 LINUX BRIDGE 라던가 OPEN vSWITCH 등등

In this example, we will use the Linux Bridge option to create an internal bridge network.
이 예제에서 우리는 리눅스 브릿지를 내부 브릿지 네트워크로 생성할 것입니다.

We add a new interface to the host using the ip link add command with the type set to bridge.
우리는 호스트에 새로운 인터페이스를 추가 할 것입니다. ip link add 명령어를 통해서요. 유형은 bridge 입니다.

# 브릿지 설정
>> ip link add v-net-0 type bridge

We will name it v-net-zero.

[eth-0 인터페이스의 등장]

As far as our host is concerned, it is just another interface, just like the eth-0 interface, 
우리 호스트에 관한한. 저 브릿지는 또다른 인터페이스 입니다. 

it appears in the output of the IP link command along with the other interfaces.
이것은 다른 인터페이스와의 ip link 명령 실행의 출력으로 나타납니다.

#인터페이스 목록 보기
>> ip link

It's currently down.
이 가상의 인터페이스는 현재 다운된 상태입니다.

So you need to turn it up, use the IP link, set up command to bring it up.
그러니 이것을 켜줄 필요가 있습니다. ip link set up 명령을 통해 활성화 시키십시오.

# 인터페이스 활성화
>> ip link set dev v-net-0 up

Now for the namespace.
이제 네임스페이스에 관해

This interface is like a switch that it can connect to.
이 인터페이스는 다른것과 연결 가능한 스위치와 같습니다.

So think of it as an interface for the host and a switch for the namespace.
그래서 호스트를 위한 인터페이스와 네임스페이스를 위한 스위치로 생각하십시오.

[호스트의 인터페이스]
- 다른 네트워크와의 연결을 담당.

[네임스페이스의 스위치]
- 내부 네트워크간의 통신을 중계함.

So the next step is to connect the namespaces to this new virtual network switch.
그래서 다음 단계는 네임스페이스를 이 가상의 네트워크 스위치에 연결하는 것입니다.

Earlier we created the cable or the each-pair with veth-red interface one and blue interface on the other 
이전에 우리가 만든 케이블 또는 veth-red 인터페이스쌍을 다른것으로 생성합니다.

because we wanted to connect the two namespaces directly.
우리는 이 두 네임스페이스를 직접 연결 하기를 원하기 때문입니다.

Now we will be connecting all name spaces to the bridge network, so we need new cables for that purpose.
이제 우리는 모든 네임스페이스를 브릿지 네트워크에 연결 할 것입니다. 그래서 우리는 목적에 맞는 새 케이블이 필요합니다.

This cable doesn't make sense anymore, so we will get rid of it.
이 케이블은 더이상 문제되지 않습니다. 그러니 이전 케이블을 제거 합니다.

Use the IP link, delete command to delete the cable.
ip link 명령을 사용하여 케이블을 제거 합니다.

** 이걸 케이블이라고 불렀나?
>> ip -n red link del veth-red
>> ip -n blue link del veth-blue

When you delete the link with one end, the other end gets deleted automatically Since they are pair.
그들은 쌍이기 때문에 한쪽의 엔드 포인트를 제거하면 나머지는 자동으로 삭제 됩니다.

that has now created new cables to connect the namespace to the bridge 
이제 네임스페이스와 브릿지를 연결 하기 위한 새 케이블을 생성합니다.

from the ip link add command and create a pair with veth-red one end like before, but this time the other end will be named. veth-red-br as it connects to the bridge network.
ip link add 명령을 통해 veth-red 와 브릿지를 연결 합니다. 하지만 이번의 경우 다른 점은 브릿지 네트워크와 연결 되므로 veth-red-br 이라는 이름으로 지어집니다.

>> ip link add veth-red type veth peer name veth-red-br

This naming convention will help us easily identify the interfaces that associate to the red namespace.
이 네이밍 컨밴션은 레드 네임스페이스에 연합된 인터페이스를 손쉽게 식별할수 있도록 도와 줍니다.

Similarly, create a cable to connect the blue namespace to the bridge network.
동일하게 블루 네임 스페이스에도 브릿지 네트워크를 생성 합니다.

Now that we have the cables ready, it's time to get them connected to the namespaces.
이제 우리에게 케이블이 준비되었습니다. 이제 각 네임스페이스를 연결 할 시간 입니다.

To attach one end of this of the interface to the red namespace run "ip link set veth-red netns red" Command 
인터페이스의 한 쪽 끝을 빨간색 네임스페이스에 연결 하려면, ip link ser veth-red netns red 명령을 실행합니다.

>> ip link set veth-red netns red

(attach:연결하다)
to attach the other end to the first network run the ip link set command on the veth-red-br and specify the master for it as the v-net-zero Network.
다른 한쪽끝을 처음 네트워크로 연결 하려면 아래와 같이 master 네트워크에 연결합니다,

>> ip link set veth-red-br master v-net-0

Followed the same procedure to attach the blue cable to the blue namespace and the bridge network.
동일한 절차를 따라해서 블루 케이블을 블루 네임스페이스에 그리고 브릿지 네트워크에 연결 합니다.

that is now said IP addresses for these links and turned them up.
이제 IP 주소를 이런 링크와 같이 설정 되었습니다.

We will use the same IP addresses that we used before, 192.168.15.1 and 192.168.15.2 and finally turn the devices up.
우리는 이전에 쓰던것과 같이 동일한 IP 주소를 사용할 수 있습니다. 192.168.15.1 과 192.168.15.2 그리고 최종적으로 디아비스에 설정 했습니다.

The containers can now reach each other over the network.
이제 컨테이너를 네트워크를 건너 다른 네트워크에 닿을 수 있습니다.

So we follow the same procedure to connect the remaining two namespaces to the same network.
그래서 우리는 동일한 절차를 따라 남은 두개의 네임스페이스에도 eth-0과 연결 합니다.

We now have all four namespaces connected to our internal virtual network, and they can all communicate with each other.
우리는 이제 내부 가상 네트워크에 4개의 네임스페이스가 연결되었습니다. 그리고 서로 모두 호출 가능 합니다.

They have all IP addresses, 192.168.15.1, two, three and four.
그들의 IP 주소는 192.168.15.1, 2, 3, 4 가 됩니다.

And remember, we assigned our host the IP 192.168.1.2 .
그리고 기억하세요. 우리는 우리의 호스트에 192.168.1.2 의 IP 를 할당 했다는 것을.

from my host What if I tried to reach one of these interfaces in this namespace 
나의 호스트에서 만약 네임스페이스에 있는 인터페이스 중 하나에 연결하려면 무엇을 해야 할까요?

what it work?
무엇을 해야 할까요?

No, my host is on one network and the name spaces are on another.
아닙니다. 호스트는 네트워크상에 있지만 네임스페이스는 다른 곳에 있습니다.

But what if I really want to establish connectivity between my host and this namespace?
하지만 호스트와 네임스페이스가 연결되기를 뭔한다고 하면 어떻게 될까요?

Remember we said that the bridge switch is actually a network interface for the host.
기억하세요. 우리가 말하는 브릿지 스위치는 사실 호스트와의 네트워크 인터페이스 입니다.

So we do have an interface on the 192.168.15 network on our host 
그래서 우리는 192.168.15 대역의 네트워크와 우리의 호스트가 인터페이스 되어 있습니다.

since is just another interface.
왜냐하면 또 다른 인터페이스 이기 때문입니다.

All we need to do is assign an IP address to it 
IP 주소를 할당 하기만 하면 됩니다.

so we can reach the namespace through it, 
그래서 우리는 네임 스페이스에 주소할당을 통해 접근 할 수 있습니다.

run the IP ADDR command to set the 192.168.15.5 to this interface.
ip addr 명령을 아래와 같이 실행합니다.
>> ip addr add 192.168.15.5/24 dec v-net-0

We can now bring the red namespace from our local host.
이제 우리는 로컬 호스트에서 RED 네임스페이스를 불러 올 수 있습니다.

Now remember, this entire network is still private and restricted within the host 
기억하세요. 이 전체 네트워크는 호스트 내부에서 여전히 개인적이고 제한적인 네트워크 입니다.

from within the namespace
네임스페이스 안으로부터는

(nor:누구도 없다) 
you can't reach the outside world, nor can anyone from the outside world reach the services or applications hosted inside.
당신은 외부 세상에 닿을 수도 없고, 외부에서 어느누구도 서비스 또는 어플리케이션으로의 접근이 불가능 합니다.

The only door to the outside world is the Internet port and the host.
외부 세상으로 가는 유일한 통호는 인터넷 포트와 호스트 뿐입니다.

So how do we configure this bridge to reach the LAN network through the Internet port?
그런 어떻게 브릿지 네트워크를 LAN 네트워크에 연결 할 수 있을까요?

So there is another host attached to our LAN network with the address 192.168.1.3.
여기에는 또 다른 호스트가 LAN 으로 연결됩니다. 192.168.1.3 이라는 IP 주소와 함께.

How can I reach this host from within my name spaces?
나의 네임스페이스에서 어떻게 이 호스트에 닿을 수 있을까요?

What happens if I try to ping this host from my namespace?
제가 만약 나의 네임스페이스에서 이 호스트로 ping 을 날리면 무슨 일이 벌어질까요?

>> ping netns exec blue ping 192.168.1.3

The blue namespace sees that I'm trying to reach a network at 192.168.1 which is different from my current network of 192.168.15
블루 네임스페이스는 현재 네트워크 내역인 192.168.15 와 다른 네트워크에 연결 한다는 것을 알 수 있습니다.

So it looks at its routing table to see how to find that network.
그래서 블루 네임스페이스는 네트워크를 찾을 방법을 알기 위해 라우팅 테이블을 확인 합니다.

>> ping netns exec blue route

The routing table has no information about other network, so it comes back saying that the network is unreachable.
하지만 라우팅 테이블 역시 이 다른 네트워크의 정보를 가지고 있지 않습니다. 그래서 다시금 네트워크 도달 불가 메세지를 돌려 줍니다.

So we need to add an entry into the routing table to provide a gateway or door to the outside world.
그래서 우리는 라우팅 테이블에 게이트웨이 또는 바깥세상으로의 도저 정보를 제공하여 엔트리를 추가 합니다.

So how do we find that gateway?
그럼 게이트 웨이는 어떻게 찾을까요?
------------------------------------------------------------------------------------
[게이트웨이]

A door or a gateway, as we discussed before, is a system on the local network that connects to the other network.
우리가 지난번에 다뤘던 문 또는 게이트웨이는 로컬 네트워크를 다른 네트워크에 연결 하기 위한 시스템입니다.

So what is a system that has one interface on the network local to the blue namespace, which is the 192.168.15 network and is also connected to the outside LAN network?
그럼 로컬에서 블루로 연결된 네트워크 인터페이스 를 가진 시스템은 무엇일까요? 시스템은 192.168.15 의 네트워크 이고 또한 바깥 세상의 LAN 와 연결 되어 있는 시스템.

Here's a logical view.
여기 로지컬 뷰가 있습니다.

It's the localhost that have all these namespaces on 
여기 모든 네임스페이스가 상주중인 로컬 호스트가 있습니다.

so you can bring the namespaces.
때문에 당신은 네임스페이스를 호출 할 수 있습니다.

Remember, our local host has an interface to attach to the private network so you can ping the namespaces.
기억하세요. 우리의 로컬 호스트는 개인 네트워크와 연결 할 수 있는 인터페이스가 있습니다. 그래서 네임스페이스로 ping 을 날릴수 있습니다.

So our local host is the gateway that connects the two networks together.
그래서 우리의 로컬 호스트는 두 네트워크를 연결 하는 게이트 웨이가 됩니다. 

---------------------------------------------------------------------------------------
[로컬 호스트(192.168.15.5)는 사실 게이트 웨이?]

We can now add a role entry in the blue namespace to say route traffic to the 192.168.1 network through the gateway at 192.168.15.5
이제 192.168.15.1의 게이트웨이를 통해 192.168.1 네트워크로 가는 트래픽을 라우팅 하도록 블루 네임스페이스에 역할 항목을 추가 할 수 있습니다.

# 블루 네임스페이스가 라우트 역할을 해줌 외부 인터넷 연결은 192.168.15.5 를 통하라고
>> ip netns exec blue ip route add 192.168.1.0/24 via 192.168.15.5

Now remember, our host has two IP addresses, one on the virtual network at 192.168.15.5 and another on the external network 192.168.1.2
기억하세요. 우리의 호스크는 IP주소가 두개인것을. 하나는 가상의 네트워크로 192.168.15.5 이고 또 다른 하나는 외부 네트워크인 192.168.1.2 라는걸.

Can you use any in the route?
라우터에 아무것이나 사용할 수 있나요?

No
안됩니다.

Because the blue namespace can only reach the gateway and its local network at 192.168.15.5
왜냐하면 블루 네임스페이스는 오직 게이트웨이와 로컬 네트워크(192.168.15.5)에 소통만을 할 수 있습니다.

The default gateway should be reachable from your namespace when you add it to your route.
기본 게이트웨이는 라우터를 추가할때 네임스페이스에 연결 할 수 있어야 합니다.

When you try to ping now you no longer get the network unreachable Message 
이제 Ping 명령을 시도 해보면 더이상 네트워크를 이용할 수 없다는 메세지가 나타나지 않을 것입니다.

# 블루 네임스페이스에서는 외부로 ping 이 발싸됨.
>> ping netns exec blue ping 192.168.1.3

what You still don't get any response back from the ping.
당신은 여전히 핑에대한 응답을 받지 못하고 있습니다.

What might be the problem?
무엇이 문제였던 걸까요?

We talked about a similar situation in one of our earlier lectures where from our home network we tried to reach the external Internet through our router.
우리는 이전 강의에서 유사한 사례를 이야기 나눴습니다. 우리가 라우터를 통해 외부 인터넷에 연결되기를 시도 하는 강의에서요.

Our home network has our internal private IP addresses that the Destination Network don't know about 
우리의 홈 네트워크는 목적지 네트워크가 모르는 내부의 IP 주소를 가지고 있습니다.

So they cannot reach back .
그래서 외부로 보낸 ping 은 응답을 받을 수가 없습니다.
-------------------------------------------------------------------------------------
[외부로 부터 돌아오는 메세지의 주인을 찾아 주는 시스템 만들기]

for this We need not enable on our host acting as the gateway here.
이문제의 해결을 위해 우리는 우리의 호스트가 게이트웨이 처럼 행동 하도록 활성해 주어야 할 필요가 있습니다.

so that it can send the messages to the LAN
이를 위해 LAN 으로 메세지를 보낼 수 있습니다.

in its own name with its own address.
소유자의 이름과 그 주소를 포함해서요.

So how do we add that functionality to our host?
그럼 어떻게 호스트에 기능을 추가 할 수 있을까요?

You should do that using IP tables. 
IP테이블을 사용해서 이를 처리할 수 있습니다.

add a new rule in the net IP table in the post routing chain to masquerade or replace the from address on all packets coming from the source network 192.168.15.0 with its own IP address.
원본 네트워크 192.168.15.0 에서 오는 모든 패킷의 발신주소를 자체 IP 주소로 가장하거나 대체하기 위해 IP 테이블, 호스트 라우팅 체인에서 새로운 룰을 추가합니다.

>> iptables -t nat -A POSTROUTING -s 192.168.15.0/24 -j MASQUERADE

That way, anyone receiving these packets outside the network will think that they're coming from the host and not from within The namespaces
이렇게 하면 네트워크 외부에서는. 패킷을 수신 하는 모든 대상들이 이 패킷은 네임스페이스 내부가 아니라 호스트에서 오는 것이라고 생각 할 것입니다. *요약) 192.168.15.1~4 가 발송 한게 아니라 192.168.15.5가 발송하는것으로 위조 됨.

when we try to be now we see that we are able to reach the outside world.
이제 시작 해보면 바깥세상에 연결되는것을 볼 수 있씁니다.

Finally said the LAN is connected to the Internet.
마지막으로 LAN 이 인터넷에 연결되어 있다고 말합니다.





We want the name spaces to reach the Internet, so we try to bring a server on the Internet at a 8.8.8.8 from the blue namespace, 
우리는 인터넷에 연결되는 네임스페이스를 원했습니다. 그래서 우리는 서버를 블루네임스페이스에서 8.8.8.8 인터넷에 올렸습니다.

>> ping netns exec blue ping 8.8.8.8

we receive a familiar message that the network is unreachable.
우리는 네트워크에 연결 할 수 없다는 친숙한 메세지를 만납니다.

But now we know why that is.
하지만 지금은 이게 무엇인지우리는 압니다.

We look at the routing table and see that we have routes to the network 192.168.1.0 but not to anything else.
우리는 라우팅 테이블을 확인하고 102.168.1.0 외에 다른 라우팅 정보가 없다는것을 확인합니다.

Since these names visitors can reach any network our hosts can reach.
이 이름의 방문객들은 호스트가 닿을 수 있는 모든 네트워크에 닿을 수 있습니다.

We can simply say that to reach any external network, talk to our host 
우리는 간단한 가정을 할 수 있씁니다. 외부 인터넷으로 연결하려면 호스트로 연락해라.

so we add a default gateway specifying our host.
그래서 우리는 기본 게이트 웨이를 호스트로 지정 했습니다.

We should now be able to reach the outside world from within this namespace.
이제 우리는 네임스페이스 안에서 바깥 세상으로 연결 할 수 있습니다.

Now, what about connectivity from the outside world to inside the namespaces
이제 바깥세상에서 네임스페이스 안으로의 연결은 어떻게 할까요?

simple example, the blue namespace hosts a Web application on for 80.
간단한 예로. 블루 네임 스페이스는 웹 어플리케이션을 80번 포트로 호스팅 중입니다.

As of now, the name spaces are on an internal private network and no one from the outside world knows about that.
지금까지 네임스페이스는 내부 개인 네트워크 였습니다. 그리고 바깥 세상 누구도 이를 알수가 없습니다.

We can only access these from the host itself.
우리는 오직 호스트 부터로만 엑세스 가능 했습니다.

If you try to ping the private IP of the namespace from another host on another network, 
만약 다른 네트워크의 호스트로부터 네임스페이스의 내부 IP 로 핑을 날려본다면

(obviously:확실히)
you will see that it's not reachable, obviously, because that host doesn't know about this private network 
접근할수 없다는 메세지를 볼 수 있을 것입니다. 확실히. 다른 네트워크에서는 이 내부 네트워크를 알수가 없습니다.

in order to make that communication possible.
이 네트워크간 커뮤니케이션이 가능 해 지기 위해서는

You have two options.
2가지 포인트가 있습니다.

The two options that we saw in the previous lecture on that.
이 두가지 옵션은 이전 강의에서 우리가 보았던 것입니다.

The first is to give away the identity of the private network to the second host.
첫번째는 내부 네트워크의 식별 정보를 다른 호스트에 알리는 것입니다.

So we basically add an IP wrote entry to the second host, telling the host that the network 192.168.15.0 can be reached through the host at 192.168.1.2
그래서 우리는 기본 적으로 엔트리 정보를 담은 IP 를 다른 호스트에 추가 하였습니다. 호스트를 알리는 것으로 다른 네트워크에 연결을 할 수 있습니다.

But we don't want to do that.
하지만 이건 우리가 원하는 것이 아닙니다.


[포트 포워딩]

The other option is to add a port forwarding rule using IP tables to say any traffic coming to Port 80 on the localhost is to be forwarded to Port 80 on the IP assigned to the blue namespace.
다른 하나는 IP 테이블을 이용하여 port 포워딩 규칙을 추가하는 것입니다. 80번 포트로 접근하는 모든 트래픽을 80번 포트에 할당 되어 있는 블루 네임스페이스에 전달 하기 위해서.

>> iptable -t nat PREROUTING --dport 80 --to-destination 192.168.15.2:80 -j DNAT

Well, that's it for this video.

Thank you for watching.