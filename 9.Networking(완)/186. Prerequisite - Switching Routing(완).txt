---------------------------------------------------------------------------------------
ip link 는 호스트의 인터페이스를 나열하고 수정 하는 명령입니다.
>> ip link

ip addr 명령은 인터페이스에 할당된 ip 주소를 보는 명령입니다.
>> ip addr

ip addr add 명령은 인터페이스에 IP 주소를 설정 할때 사용하는 명령입니다.
>> ip addr add 192.168.1.10/24 dev eth0

이 명령을 이용해 만들 어진 변경 사항은 재시작 전까지만 유효합니다.

만약 변경사항이 영구적으로 남길 원한다면 아래 파일을 변경 해야 합니다.
/etc/network/interfaces 파일

ip route / route 명령은 라우팅 테이블을 보기 위한 명령어 입니다.
>> ip route
>> route

그리고 ip route add 명령은 라우팅 테이블에 엔트리를 추가하기 위해 사용하는 명령어 입니다.
>> ip route add 192.168.1.0/24 via 192.168.2.1

기억하세요. 호스트에 IP 포워딩이 활성화 되어 있는지를 확인하십시오.
>> car /proc/sys/net/ipv4/ip_forward
1 <-- 1이 다른 네트워크간 데이터 전송 허용
---------------------------------------------------------------------------------------
In this series of lectures, we get our networking basics right.
이번 강의에서는 네트워킹의 기본에 대해 다루겠습니다.

We look at basic networking concepts like Switching, Routing, Gateways etc.
우리는 기본적인 네트워크 컨셉에 대해 보았습니다. 스위칭이라던가 라우팅, 게이트웨이 등등.

We then understand DNS, and then we get a basic introduction to core DNS.
그 다음 우리는 DNS 를 공부합니다. 그런 다음 Core DNS 에 대한 기본 개요를 배우게 됩니다.

We look at how to configure DNS settings on a Linux system within understand basics of network namespace in Linux.
우리는 리눅스 시스템에서 DNS 셋팅을 구성 하는 방법을 보게됩니다. 리눅스의 네트워크 네임스페이스의 기본 이해를 통해서요.

I am not going to bore you with theories on OSI models or network layers
OSI 모델이나 네트워크 레이어등으로 지루하게 하고 싶지 않습니다.

We're just brushing up enough networking to understand the rest of the section in this course.
우리는 단지 네트워크를 충분히 핥아보고 있습니다. 남은 섹션을 이해하기 위해서요.

Now we don't just go through the concepts we see how these are configured on our systems specifically from a Linux perspective.
이제 진입하기에 앞서, 콘셉을 통해 우리의 시스템을 리눅스 관점에서 어떻게 구성하면 좋을지에 대해 정의하는 방법을 볼 것입니다.

So there are going to be lots of commands.
거기에는 많은 명령이 있을 것입니다.

We look at this from a system admins and the application developers perspective and not necessarily from a network engineers 
우리는 이것을 시스템 관리자 관점으로 볼것입니다. 그리고 어플리케이션 개발자 관점 그리고 필수는 아니지만 네트워크 엔지니어 관점으로 볼 것입니다.

that way later on when we discuss these in the context of our course.
이렇게 3가지 관점으로 이해하는건 나중에 우리가 컨텍스트에 대해 논의할때, 우리가 무엇을 이야기 하고 있는지 알게 됩니다.

You know what we were talking about.
우리가 무엇에 대해 이야기하는지 알수 있게 됩니다.

where to look for information, where things are configured, how to troubleshoot etc. 
어디에서 정보를 찾고, 어디에 구성할 것이며, 어떻게 문제해결을 하는지 등등.

(as always:언제나, 항상)
And of course as always if these seem to be too basic for you 
그리고 당연하게. 이것이 항상 굉장히 기초적인것으로 보일수 있습니다.

if you're already good with networking in Linux.
당신이 이미 리눅스 네트워크 지식에 해박하다면

feel free to skip these lectures and go straight to the ones on Kubernetes.
이강의를 넘기셔도 됩니다.

So let's get started.
그럼 시작해 봅시다.



---------------------------------------------------------------------------------------
So what is a Network.
네트워크가 무엇일까요

We have two computers A & B – laptops, desktops, VMs on the cloud, wherever.
당신은 두대의 컴퓨터가 있습니다. A와 B. 렙탑과 데스크랍,  VM, 클라우드 뭐가 됐건

How does system A reach B?
어떻게 시스템 A 가 B에 닿을수 있을까요?


[A 스위치 B]


We connect them to a switch, and the switch creates a network containing the two systems. 
우리는 이걸 스위치로 연결 합니다. 그리고 스위치는 두 시스템을 담는 네트워크를 만듭니다.

(depending on the host:호스트에 따라)
To connect them to a switch we need an interface on each host Physical or virtual depending on the host.
이 둘을 스위치로 연결 하기 위해서는, 호스트에 따라 물리 또는 가상의 인터페이스가 필요합니다.

to see the interfaces for the host. We use the IP link command.
호스트를 위한 인터페이스를 확인하기 위해 우리는 ip link 명령을 사용합니다.

# 인터페이스 정보 리턴 됨.
>> ip link

In this case, we look at the interface named eth0 that we will be using to connect to the switch.
이번 경우에 우리는 스위치에 연결할때 사용하는 인터페이스 네임 eth0 을 보았습니다. 

Let's assume it's a network with the address. 192.168.1.0.
이 네트워크의 주소를 192.168.1.0 이라고 가장 합시다.

We then assign the systems with IP addresses on the same network.
그다음 우리는 이 시스템에 동일 네트워크의 IP 를 할당 합니다.

For this, we use the command ip addr. Once the links are up, and the IP addresses are assigned,
이 경우 우리는 ip addr 명령어를 사용할 수 있습니다. 한번 연결이 되면 IP 주소가 할당 되어 집니다.

# A서버
>> ip addr add 192.168.1.10/24 dev eth0

# B서버
>> ip addr add 192.168.1.11/24 dev eth0

The computers can now communicate with each other through the switch 
컴퓨터들은 이제 스위치를 통해 서로 통신이 가능 합니다.

the switch can only enable communication within and network which means it can receive packets from a host on the network and deliver it to other systems within the same network.
스위치는 오직 네트워크 상에서 통신만 가능 합니다. 이것의 의미는. 
스위치는 네트워크상의 호스트로 부터 패킷을 받을수 있고 동일 네트워크의 다른 시스템으로 옮기는 것을 할 수 있다는 의미입니다.

Say we have another network containing systems C & D at address 192.168.2
우리에게 또다른 시스템 IP 가 192.168.2 인 시스템 C와 D를 포함하고 있는 네트워크가 있다고 가정 해 봅시다.

(respectively:각각)
The Systems have IP address 192.168.2.10 and 2.11 respectively.
이 시스템은 IP 192.168.2.10 과 11 을 가지고 있습니다.

How does a system in one network reach a system in the other.
어떻게 하나의 네트워크에 속한 시스템이 다른 네트워크 시스템에 닿을 수 있을까요?

How does System B with the IP 192.168.1.11 reach system C with the IP 2.10 on the other network. 
어떻게 시스템 B (IP:192.168.1.11)은 다른 네트워크의 시스템 C(192.168.2.10) 에 닿을 수 있을까요?

That’s where a Router comes in. A Router helps connect two networks together. It is an intelligent device,
여기가 라우터가 등장 할 곳입니다. 라우터는 두 다른 네트워크를 함께 연결하는것을 도와줍니다. 이것은 지능령 기기입니다.

so think of it as another server with many network ports. 
따라서 또다른 서버 처럼 생각하십시오. 아주 많은 네트워크를 가진.

Since it connects to the two separate networks, it gets two IPs assigned. One on each network. 
라우터는 두 다른 네트워크를 연결 하기 때문에. 라우터는 두개의 IP를 할당 받습니다. 네트워크당 하나씩.

In the first network we assign it an IP address 192.168.1.1 and in the second we assign it an IP 192.168.2.1.
첫번째 네트워크에서 우리는 라우터의 IP를 192.168.1.1 로 그리고 두번째 시스템에서 우리는 라우터에게 192.168.2.1 의 IP를 할당합니다.

Now we have a router connected to the two networks that can enable communication between them.
이제 우리는 두 네트워크를 연결한 그리고 서로 커뮤니케이션을 할 수 있는 라우터가 생겼습니다.


[라우터 [스위치]]

Now, when system B tries to send a packet to system C, how does it know where the router is on the network to send the packet through 
이제, 시스템 B가 패킷을 시스템 C에 보내려고 할때, 패킷을 보내기 위해 네트워크상 라우터가 어디에 있는지 어떻게 알까요?

the router is just another device on the network.
라우터는 네트워크상의 다른 장비일 뿐입니다.

there could be many other such devices. 
이 역할을 다른 장비들로도 할 수 있습니다.

That’s where we configure the systems with a gateway or a route.
이 것이 우리가 게이트웨이 또는 라우터로 시스템을 구성하는 위치입니다.



------------------------------------------------------------------------------------
[게이트웨이] && [라우터]

If the network was a room, the gateway is a door to the outside world to other networks or to the Internet.
가령 네트워크가 방이라면, 게이트웨이는 바깥 세상으로 가는 문입니다. 바깥세상이라하면 다른 네트워크나 인터넷을 말합니다.

The systems need to know where that door is to go through that to see the existing routing configuration on a system run the route command. 
시스템은 알기를 원합니다. 시스템에 존재하는 라우팅 설정을 보기 위해 통과하는 문의 위치를 알아야 합니다.

---------------------------------------------------------------------------------------
>> route
>> Kernel IP routing table
>> Destination	Gateway		Genmask		Falgs 	Metric Ref		Use Iface
---------------------------------------------------------------------------------------



[라우트[스위치]] <-> [게이트웨이] <-> [다른세상]

It displays the kernels routing table 
라우트 명령은 라우팅 테이블 커널을 보여 줍니다.

(as of now:지금과같이)
and within that as you can see there are no routing configurations as of now.
그리고 이 정보안을 보면 여기에는 지금과 같이 라우팅 설정이 없다는것을 알 수 있습니다.

So in this condition your system B will not be able to reach system C 
그래서 당신 시스템의 상태를 보면 시스템 B 는 시스템 C에 연결할 수가 없습니다.

it can only reach other systems within the same network in the range 192.168.1.0. 
이 시스템들은 오직 동일 네트워크 상에 있는 다른 시스템에거만 닿을 수 있습니다. 레인지가 192.168.1.0대역의.

To configure a gateway on system B to reach the systems on network 192.168.2.0, run the ip route add command, and specify that you can reach the 192.168.2.0 network through the door or gateway at 192.168.1.11. 
192.168.2.번 IP 대역에 닿기 위해 시스템B에 게이트웨이를 구성 위해, ip route add 명령을 실행합니다.
그리고 도어 또는 게이트웨이 192.168.1.11 게이트 웨이를 통해 192.168.2.0 네트워크에 닿을 수 있도록 정보를 지정 합니다.

>> ip route add 192.168.2.0/24 via 192.168.1.1
>> desc) 2.0 대역의 네트워크는 1.1 게이트웨이를 이용한다.

Running the route command again 
>> route
명령을 다시 실행 해 봅니다.

shows that we have a route added to reach the 192.168.2.0 series network through the router.
우리에게 192.168.2.0 대역의 네트워크에 닿을 수 있는 라우트가 추가된 것이 보입니다.

Now remember this has to be configured on all the systems.
이제 기억 하세요. 이것은 전 시스템에 적용되는 설정입니다.

For example, if the system C is to send a packet to system B, then you need to add a route on system C’s routing table to access network 192.168.1.0 through the router configured with the IP address 192.168.2.1. 
예를 들어, 시스템 C가 시스템 B 에 패킷을 보내려 할때, 시스템 C 의 라우팅 테이블에 192.168.1.0 네트워크에 접근 가능 하도록 라우터(192.168.2.1)를 설정 해야 합니다.

[네트워크 A] <-> [라우터] <-> [네트워크 B]
             [라우팅테이블]
			 
(suppose:가정하다)
Now suppose these systems need access to the Internet. Say they need access to Google at 172.217.194.0 network on the internet. 
이제 이 시스템은 인터넷 연결이 필요하다고 가정해봅시다. 이 시스템은 google(172.217.194.0) 대역대의 네트워크에 연결이 필요하다고 가정합니다.

So you connect the router to the internet and then add a new road in your routing table to road all traffic to the network 172.217.194 through your router.
그래서 당신은 인터넷에 연결하기 위해 라우터에 연결합니다. 그런 다음 당신의 라우터를 통해 172.217.194 대력의 네트워크로 접근하는 모든 트래픽의 길을 라우팅 테이블에 새로운 길로 추가 합니다.

there are so many different sites on different networks on the Internet .
그곳은 인터넷에 다른 네트워크 상의 아주 다른 사이트 입니다.

instead of adding a routing table entry for these same routers IP address 
이 동일라우터 IP 주소를 라우팅 테이블 엔트리로 추가하는 대신에.

for each of those networks you can simply say for any network that you don't know a route to use this router as the default gateway.
각 네트워크에 대해 이 라우터를 기본 게이트웨이로 사용하는 경로를 모르는 네트워크에 간단히 말할 수 있습니다.

---------------------------------------------------------------------------------------
# 라우팅 테이블 작성 대신, 기본 라우터를 지정하기.
- 라우팅 테이블로 네트워크 A와 네트워크 B의 연결관계를 설정 할 수 있따.
- 

>> ip route add default via 192.168.2.1
---------------------------------------------------------------------------------------

This way any request to any network outside of your existing network goes to this particular router.
이방법은 당신의 네트워크에서 바깥의 모든 네트워크로 향하는 모든 요청을 특정 라우터로 향하게 합니다.

So in a simple setup like this, all you need is a single routing table entry with a default gateway set to the routers IP address.
따라서 이와같은 간단한 설정에서는 기본게이트웨이가 라우터 IP 주소로 설정된 단일 라우팅 테이블 항목만 있으면 됩니다.

Remember instead of the word default you could also say 0.0.0.0.
기억 하세요. 기본이라는 단어 대문에 0.0.0.0 이라고 말할 수 있습니다.

It means any IP destination.
이것은 모든 목적지를 말합니다.

Both of these lines mean the same thing.
이 두줄(default 와 0.0.0.0) 은 같은 것입니다.


a 0.0.0.0 Entry in the Gateway field indicates that you don't need a gateway 
게이트웨이 필드에 있는 0.0.0.0 엔트리는 게이트웨이가 필요없음을 가리킵니다.

for example in this case for system C to access any devices in the 192.168.2.0 network.
예를들어 이 경우에 시스템 C 가 192.168.2 번 대역의 네트워크의 모든 디바이스에 접근 하려 합니다.

It doesn't need a gateway because it is in its own network. But say you have multiple routers in your network one for the Internet another for the internal private network then you will need to have two separate entries for each network.
이때 게이트웨이가 필요가 없습니다. 왜냐하면 그 대역대는 시스템 C 가 포함된 네트워크 이기 때문입니다. 하지만 당신이 네트워크상에 다수의 라우터를 가지고 있다고 가정 하면, (하나는 인터넷 또 다른 하나는 내부망.) 당신은 각 네트워크에 2개로 분리된 엔트리가 필요할 수 있습니다.

One entry for the internal private network and another entry with the default gateway for all other networks including public networks.
하나는 내부망용, 또다른 하나는 공공네트워크를 포함하여 다른 네트워크를 위한 기본 게이트웨이.

So if you are having issues reaching internet from your systems, This routing table and the default gateway configuration is a good place to start 
때문에. 당신의 시스템에서 인터넷 연결에 문제를 가지고 있다면, 이 라우팅 테이블과 기본 게이트웨이 구성이 시작하기 좋은 곳 입니다.


---------------------------------------------------------------------------------------

let us know look at how we can set up a linux host as a router.
이제 리눅스 호스트를 라우터로 어떻게 설정 하는지 알아 봅시다.

Let's start with a simple setup.
간단한 설정으로 시작합시다.

I have 3 hosts A, B and C. 
3개의 호스트가 있습니다. A, B, C

A & B are connected to a network 192.168.1 
A와 B는 네트워크 .192.168.1 번 대에 연결되어 있ㅆ브니다.

and B & C to another on 192.168.2. 
그리고 B와 C는 또다른 192.168.2 번으로 연결되어 있습니다.

So host B is connected to both the networks using two interfaces eth0
그럼 호스트 B는 두개의 네트워크에 모두 연결되어 있습니다. 두개의 인터페이스를 사용하여 eth0 라는

A has IP 192.168.1.5, 
A는 192.168.1.5 의 IP 를 가지고 있고

C has 192.168.2.5 
C는 192.168.2.5 의  IP 를 가지고 있습니다.

and B has an IP on both the networks. 192.168.1.6 and 192.168.2.6.
그리고 B는 이 두 네트워크에 각 192.168.1.6 과 192.168.2.6 의 IP를 가지고 있습니다.
---------------------------------------------------------------------------------------
Host A : 192.168.1.5
Host B : 192.168.1.6
           192.168.2.6
Host C : 192.168.2.5
---------------------------------------------------------------------------------------
How do we get A to talk to C? 
어떻게 우리는 A 가 C랑 통신을 할 수 있을까요?

Basically, if I try to ping 192.168.2.5 from A, 
기본적으로 Host A에서 Host C로 ping 을 날려봅니다.

it would say Network is Unreachable. And by now we know why that is.
네트워크가 닿지 않는다고 응답 될 것이도. 그리고 지금 우리는 그 이유를 합니다.

Host A has no idea how to reach a network at 192.168.2.
호스트 A 는 호스트 C 에 닿을 방법을 알고 있지 않습니다.

We need to tell host A that the door or gateway to network 2 is through host B. 
우리는 호스트 A 에게 호스트B로 통하는 192.168.2 네트워크(문 또는 게이트웨이)를 알려 줄 필요가 있습니다. 

And we do that by adding a routing table entry. 
그리고 라우팅 테이블 엔트리에 추가를 통해 그것을 합니다.

(via:~을 통해)
We add a route to access network 192.168.2 via the gateway 192.168.1.6. 
우리는 192.168.1.6 게이트웨이를 통해 192.168.2 네트워크에 접근하는 경로를 추가했습니다.

>> ip route add 192.168.2.0/24 via 192.168.1.6
호스트 C로 향하는 패킷은 192.168.1.6 을 통해 접수 받음.

If the packets where to get through to Host C, Host C will have to send back responses to Host A. 
호스트 C로 패킷을 전달 하는 경우 호스트 C 는 호스트 A 에게 응답을 보내야만 합니다.

When Host C tries to reach Host A at 192.168.1 network, it would face the same issue. 
호스트 C 가 호스트 A 에 시도하는 경우에도 동일한 문제가 발생합니다.

#### 서로가 응답할 주소를 모른다.
---------------------------------------------------------------------------------------
(let:허락하다)
So we need to let Host C know that it can reach Host A through Host B which is acting as a router. 
때문에 이것은 호스트 B가 라우터와 같은 역할을 하여 호스트 A 에 닿을 수 있다는것을 호스트 C가 알도록 허락할 필요가 있습니다. 

So we add a similar entry into Host C’s routing table.
그래서 우리는 비슷한 엔트리를 호스트C의 라우팅 테이블에 추가합니다.

This time we say to reach network 192.168.1.0, talk to Host B at 192.168.2.6. 
이번 시간에는 우리는 
[연결할 네트워크: 192.168.1.0] <- 이 대역의 네트워크에
[연결할 호스트B: 192.168.2.6] <- 호스트 B를 통해 접속한다.
으로 가정하겠씁니다.

>> ip route add 192.168.1.0/24 via 192.168.2.6

When we try to ping now, we no longer get the Network Unreachable error message that means our routing entries are right but we still don't get any response back. 
지금 ping 을 날려보면 더이상 네트워크 미도달 에러 메세지는 발생하지만 않습니다. 이것의 의미는 라우팅 엔트리가 정확하다는 것을 의미합니다. 하지만 여전히 어떠한 응답 도 받지 못하고 있습니다.

By default in Linux packets are not forwarded from one interface to the next 
기본적으로 리눅스에서 패킷은 하나의 인터페이스에서 다음으로 전달 되지 않습니다.

for example packets received on eth0 on host B are not forwarded to elsewhere through eth 1 
예들어 호스트 B의 eth0 에서 수신된 패킷은 eth1 을 통해 다른 곳에 전달 되지 않습니다.

this is this way for security reasons.
이것은 보안적인 이유가 있는 방법니다.

(unless you explicitly allow that:명시적으로 허용하지 않는 한)
For example, if you had eth0 connected to your private network and eth1 to a public network, we don't want anyone from the public network to easily send messages to the private network unless you explicitly allow that.
예를 들어, 가령 당신의 개인 네트워크가 eth0 에 연결되어 있고, eth1 은 공공 네트워크에 연결되어 있다면, 명시적으로 허용하지 않는한, 공공 네트워크로 부터 개인 네트워크로 쉽게 메세지가 전달 되기를 원하는 사람은 아무도 없습니다.

But in this case since we know that both are private networks and it is safe to enable communication between them.
하지만 이번 케이스의 경우 우리는 양쪽 모두 개인 네트워크라는 것과 통신 보안이 가능 하다는 것을 알고 있습니다.

we can allow host B to forward packets from one network to the other 
우리는 호스트B가 하나의 네트워크 에서 다른 네트워크로 패킷을 전달하는 걸 승인할 수 있습니다.

(whether : 인지 아닌지, 둘중 하나)
whether a host can forward packets between interfaces is governed by a setting in this system at file /proc/sys/net/ipv4/ip_forward 
호스트가 인터페이스 사이에 패킷을 전달 할수 있는지 아닌지는, /proc/stsnet/ipv4/ip_forward 에 정의된 시스템 파일 설정에 의해 결정됩니다.

by default, the value in this file is set to 0 meaning no forward 
기본적으로 파일의 값은 0으로 설정 되어 있습니다. 의미는 전달이 불가능 함 입니다.
>> cat /proc/stsnet/ipv4/ip_forward
0

set this to 1 and you should see the pings go through.
이 값을 1로 설정 하면 ping 이 전달되는 것을 볼 수 있습니다.
>> echo 1 > /proc/stsnet/ipv4/ip_forward
1

Now remember simply setting this value does not persist changes across reboots 
기억하세요. 기 값의 설정은 재부팅시 영구적인 것이 아니게 됩니다.

for that you must modify the same value in the /etc/sysctl.conf file.
이 현상을 위해 동일 값을 아래 파일에도 수정 해야 합니다. /etc/sysctl.conf



So let's take away some key commands from this lecture.
이번 강의에서 다룬 몇몇 키 커맨드는 제거해 봅시다.

These will be handy in the upcoming lectures 
이것들은 다가오는 강의에서 다룰 것 입니다.

IP link is to list and modify interfaces on the host
ip link 는 호스트의 인터페이스를 나열하고 수정 하는 명령입니다.
>> ip link

ip addr command is to see the ip addresses assigned to those interfaces 
ip addr 명령은 인터페이스에 할당된 ip 주소를 보는 명령입니다.
>> ip addr

ip addr add command is used to set IP addresses on the interfaces.
ip addr add 명령은 인터페이스에 IP 주소를 설정 할때 사용하는 명령입니다.
>> ip addr add 192.168.1.10/24 dev eth0

Now remember 
기억하세요.

changed made using these commands are only valid till a restart. 
이 명령을 이용해 만들 어진 변경 사항은 재시작 전까지만 유효합니다.

If you want to persist these changes you must set them in the /etc/network/interfaces file. 
만약 변경사항이 영구적으로 남길 원한다면 아래 파일을 변경 해야 합니다.
/etc/network/interfaces 파일

ip route or simply the route command is used to view the routing table. 
ip route / route 명령은 라우팅 테이블을 보기 위한 명령어 입니다.
>> ip route
>> route

And ip route add command is used to add entries into the routing table.
그리고 ip route add 명령은 라우팅 테이블에 엔트리를 추가하기 위해 사용하는 명령어 입니다.
>> ip route add 192.168.1.0/24 via 192.168.2.1

And finally 
그리고 마지막으로 

remember the command to check if IP forwarding is enabled on a host.
기억하세요. 호스트에 IP 포워딩이 활성화 되어 있는지를 확인하십시오.
>> car /proc/sys/net/ipv4/ip_forward
1 <-- 1이 다른 네트워크간 데이터 전송 허용

If you're working with a house configured as a router 
만약 라우터 처럼 하우스 구성으로 일한다면

Well that's it for this lecture 
이 강의가 적합 할 것입니다.

in the next lecture. We'll discuss about DNS configurations.
다음 강의로 우리는 DNS 설정에 대해 다루어 보겟씁니다.