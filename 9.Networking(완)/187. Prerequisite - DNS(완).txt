------------------------------------------------------------------------------------
# hosts 에서 연결할 IP <-> DNS 엔트리 관리파일
>> cat >> /etc/hosts

# DNS 서버정보 등록
>> cat /etc/resolv.conf
nameserver		192.168.1.100

# 현재 호스트 네임을 리턴
>> hostname

# DNS 등록된 정보를 리턴 - 오직 DNS 서버만 확인 hosts 파일 확인 안함.
>> nslookup

# 도메인에 해당 하는 서버의 상세 정보를 리턴.
>> dig www.google.com
------------------------------------------------------------------------------------

In this video, we get introduced to DNS in Linux for the absolute beginners.
이번 비디오는 리눅스 시스템에서의 DNS 의 소개 입니다. 완전 초보를 위한.

We will discuss the basic concepts and view some commands that will help us explore DNS configuration on hosts, specifically Linux Hosted.
우리는 기본 적인 컨셉과 우리가 호스트애 DNS 설정을 탐험하는데 도움이 될 몇몇 명령어에 대해 다룰 것입니다. 특히 리눅스로 호스팅된.

at the end of this section, you will go through a practice test where you're given a set of challenges related to DNS and are asked to solve them on a life practical Hands-On lab environment right in your browser.
이 강의 후미에서 DNS와 관련된 일련의 문제가 주어지고 해결 해야 하는 연습 테스트를 거치게 됩니다. 당신의 브라우저에서 실행되는 핸즈온 랩 환경

My name is 몽샤드 마노벧흐 and this is Kode Kloude 

We have two computers, A and B, both part of the same network, and they've been assigned with IP addresses, 192.168.1.10 and 192.168.1.11, you're able to ping one computer from the other using the other computer's IP address.
우리에게 두대의 컴퓨터가 있습니다. A 와 B. 양쪽 모두 같은 네트워크 입니다. 그리고 이 두대의 컴퓨터에는 (192.168.1.10 와 192.168.1.11) IP 주소가 각 할당 되어 있습니다. 당신은 하나의 컴퓨터에서 다른 컴퓨터로 IP 주소를 이용한 Ping 을 날려볼 수 있습니다.
------------------------------------------------------------------------------------
[컴퓨터 A:192.168.1.10]
[컴퓨터 B:192.168.1.11]
------------------------------------------------------------------------------------

You know that System B has database services on them.
당신은 시스템 B가 데이터 베이스 시스템이 올라가 있다는 것을 압니다.

So instead of having to remember the IP address of the system B, you decide to give it a name DB.
그래서 시스템 B의 IP 주소를 기억 하는 대신에, 당신은 그것을 DB 라는 이름으로 결정 했습니다.

going forward, you would like to ping System B using the name DB instead of its IP address.
조금 더 진행해서, 당신은 시스템 B에 Ping 을 날려보고 싶습니다. IP주소대신 DB 라는 이름으로.

(unaware:알지못하는)
If you try to ping DB now, you would see that host A It is unaware of a host named DB.
만약 지금 ping DB 를 날린다면 호스트 A 에는 호스트 네임 DB 를 알수 없다는 메세지를 보게 될 겁니다.

So how do you fix that?
이걸 어떻게 고칠수 있을까요?
-------------------------------------------------------------------------
Basically you want to tell system A that System B at IP address 192.168.1.11 has a name DB
기본적으로 당신은 시스템 A 에게 말해주기를 원합니다. 시스템 B의 IP 192.168.1.11 가 DB 라는 이름이 있다는 것을.

we want to tell system A that when I say DB, I mean the IP 192.161.1.11
우리가 시스템 A 에서 이것을 말해주길 원합니다. 내가 말하는 DB 라는게 IP 192.168.1.11 이라는 것을

You can do that by adding an entry into the /etc/hosts host file on system.
이 DB 를 IP 로 연결시켜주는 작업을 /etc/hosts 파일에 엔트리를 추가 함으로써 수행 할수 있습니다.

>> cat >> /etc/hosts
192.168.1.11	 db

He mentioned the IP address and the name you want your host to see System B as 
그가 언급한 IP 주소와 그 이름은. 당신의 호스트가 시스템 B를 볼 수 있게 하는 것을 원합니다.

with all system A, that the IP at 192.168.1.11 is a host named DB 
A 의 모든 시스템에서 IP 192.168.1.11 은 호스트 네임 DB 입니다.

pings to DB now get sent to the correct IP null successful.
DB에 핑을 날리면, 올바른 IP 에 전송 성공이라고 뜹니다.

Now there is an important point to note here 
이제 여기에서 주목해야할 중요한 부붑ㄴ이 나옵니다.

with all system A that the IP at 192.1681.11 is a host named DB 
A시스템입장에서 192.168.1.11 의 호스트 네임은 DB 입니다.

Host A takes that for granted.
호스트 A 는 DB 에 접근 가능한 권한을 얻습니다.

Whatever we put in the /etc/hosts file is the source of truth for host A.
우리가 /etc/hosts 파일에 무엇을 넣건. 호스트 에게는 모두 진실이 됩니다.

But that may not be the truth.
하지만 이것이 진실이 아닐수도 있습니다.

(make sure:확실하게 하다. 확신을 만들어 내는 동작)
Host A does not check to make sure if system B actual name is DB, 
호스트 A 는 호스트 B 가 사실 DB 가 아닐 가능성을 체크하지 않습니다.

(reveals:폭로되다)
for instance, running a hostname command on System B reveals that it is named host 2
예를 들어, 시스템 B에서 hostname 명형을 실행하여, 이 호스트의 실제 이름이 host 2로 폭로되어도.

# 호스트의 이름을 리턴하는 함수
>> hostname

but host A doesn't care.
호스트 A 는 전혀 상관치 않습니다.

It goes by what's in the host file.
호스트는 그저 어떤것이 호스트 파일인지에만 관심이 있습니다.

You can even fool system A believing that System B is Google, 
심지어 시스템 A는 시스템 B 가 구글이라고 믿게 할 수도 있습니다.

just add an entry into the House file with an IP mapping to www.Google.com, 
그저 IP 매핑을 구글로 하여 호스트 파일에 엔트리를 추가하면 

then ping Google and you will get a response from System B,
구글에 Ping 을 날리고 실제 시스템 B로부터 응답을 받게 될 겁니다.

so we have two names pointing to the same system, one as DB and another as Google.
때문에 우리는 같은 시스템을 가리키는 두개의 네임이 있습니다. 하나는 DB 이고 또 다른 하나는 구글 입니다.

(either:어느하나)
And we can use either names to read System B.
그리고 우리는 이름중 하나를 사용하여 시스템 B를 읽을 수 있습니다.

You can have as many names as you want for as many servers as you want in the /etc/hosts file 
당신은 /et/hosts 파일안에 서버마다 당신이 원하는 아주 많은 이름을 가질 수 있습니다.

every time we reference another hosted by its name from host A through a ping command or a ssh Command or through any of the applications or tools within the system.
우리가 핑 또는 SSH 커맨드 또는 모든 종류의 어플리케이션 또는 시스템 도구들로 다른 호스트를 이름으로 참조할 때마다.

It looks into its /etc/hosts/ file to find out the IP address of that host.
/etc/hosts 파일에서 호스트의 IP 정보를 확인하게 됩니다.

Translating Hostname to IP address this way is known as named resolution.
이런 방식으로 호스트 이름을 IP 주소로 변환합니다. 그리고 이것을 네임드 레졸루션이라고 합니다.

Within a small network of few systems, you can easily get away with the entries in the /etc/hosts file
작은 시스템에 작은 네트워크의 경우, /etc/hosts 파일안에서 손 쉽게 엔트리를 제거할 수 있습니다.

on each system, I specify which are the other systems in the environment, and that's how it was done in the past.
각 시스템 마다, 어느쪽이 다른 시스템인지를 지정 합니다. 그리고 과거에 수행되던 방법이였습니다.

Until the environment grew and these files got filled with too many entries and managing these became too hard.
환경이 개선되고 대상 파일들은 많은 엔트리고 채워지고 관리가 어려워 지는 동안.

If one of the servers IP changed, you would need to modify the entries in all of these hosts.
만약 하나의 서버 IP 가 변경된다면, 모든 호스트의 엔트리 정보를 모두 변경해야 할 필요가 생깁니다.

And that's where we decided to move all these entries into a single server who will manage essentially
그리고 모든 엔트리를 관리자 효율적으로 이루어 지도록 하나의 서버에 옮기도록 결심하게 되는 지점 입니다.

we call that our DNS server and then we point all hosts to look up that server if they need to resolve the hostname to an IP address instead of its own /etc/hosts files.
우리는 그것을 DNS 서버라고 부르고, 우리는 모든 호스트가 /etc/hosts 파일 내신 IP 주소로 찾게 하고 DNS 서버를 찾도록 지시합니다.

So how do we do that?
그럼 이걸 어떻게 할까요??

How do we point our host to a DNS server?
어떻게 호스트 서버가 DNS 서버를 가리키도록 할 수 있을까요?

Our DNS server has the IP 192.168.1.100
우리의 DNS 서버는 192.168.1.100 의 IP 를 가지고 있습니다.


[☆★ DNS 서버 지정은 각 호스트별 /etc/resolv.conf 파일에 ★☆]

Every host has a DNS resolution configuration file at /etc/resolv.conf
모든 호스트는 DNS 레졸루션 설정파일을 가지고 있습니다. /etc/resolved.conf 파일에.

you add an entry into it specifying the address of the DNS server?
저 파일에 지정된 DNS 서버의 주소를 추가 합니다.

We say name server and point it to 192.168.1.100 and that should be it.
우리는 nameserver 라고 하고 IP 는 192.168.1.100 로 추가합니다.

>> cat /etc/resolv.conf
nameserver		192.168.1.100

Once this is configured on all of your host, every time a host comes up across a hostname that it does not know about, it looks it up from the DNS server.
당신의 모든 호스트가 DNS 서버가 한번 설정 되면, 호스트가 모르는 호스트 이름을 찾을 떄 마다, DNS 서버에 물어 보게 됩니다.

(resolve:풀다, 분해하다, 분석하다, 결심하다)
If the IP of any of the host was to change, simply update the DNS server and all host should resolve the new IP address going forward.
만약 어떤 호스트의 IP 가 변경되었다면, 간단하게 DNS 서버를 업데이트 합니다. 그리고 모든 호스트는 새IP로 전달되는지 확인해야 합니다.

You no longer need any entries in the /etc/hosts file in any of the hosts, but that does not mean you can't have entries in hosts file.
더이상 /etc/hosts 파일에 엔틀를 추가할 필요가 없습니다. 하지만 hosts 파일에 엔트리를 추가할 수없다는 의미는 아닙니다.

You still can, for example, say you were to provision a test server for your own needs.
여전히 hosts 파일에 엔트리를 추가 할 수 있습니다. 예를들면, 테스트 서버를 프로비져닝 했다고 가정 합시다.

You don't think others would need to resolve the server by its name, so it need not be added to the DNS server.
당신은 다른이들이 이름으로 서버를 확인할 필요가 없다고 생각합니다. 때문에 DNS 서버에 추가할 필요도 없습니다.

In that case, you can add an entry into your host /etc/hosts file to resolve the server.
이런 경우 당신은 서버문제를 해결하기 위해 /etc/hosts 파일에 엔트리를 추가 할 수 있습니다.

You can now resolve the server.
이제 서버 문제를 해결 할 수 있습니다.

However, no other system will be able to do that.
하지만 다른 시스템에서는 이렇게 할 수 없습니다.

So a system is able to use hostname to IP mapping from the /etc/host file locally as well as from a remote DNS server.
그래서 시스템은 호스트네임을 사용할 수 있게되었씁니다. hosts 파일에서 IP 매핑을 통해 지엽적으로. DNS 서버에 지겹적으로.

What if you have an entry in both places, one in your /etc/hosts file and another in DNS?
만약 두 장소 모두에 엔트리를 추가 한 경우에는? 하나는 hosts 파일 그리고 나머지 하나는 DNS 서버에.

I have an entry in my local files set to 192.168.1.115 and someone added an entry for the same h192.168.1.116 on the DNS server.
저는 저의 local 파일에 192.168.1.115 엔트리를 추가 했습니다. 그리고 또 누군가는 이 동일 엔트리를 DNS 서버에 추가했습니다.

In that case, the host first looks in the local /etc/host file and then looks at the name server.
이런 경우 호스트는 가장 먼저 로컬의 hosts 파일을 확인합니다. 그리고 난 다음 DNS 서버를 확인합니다.

So if it finds the entry in the local /etc/hosts file, it uses that.
때문에 찾고 있는 엔트리가 hosts 파일에 있으면, 이것을 사용합니다.

If not, it looks for that host in the DNS server.
그렇지 않다면 DNS 서버를 찾습니다.

But that order can be changed.
하지만 이 규칙은 바꿀 수 있습니다.

[/etc/nsswitch.conf]

The order is defined by an entry in the file /etc/nsswitch.conf
규칙은 다음 파일에서 정의됩니다. /etc/nsswitch.conf

the line with the hosts entry.
호스트 항목이 있는 줄.

As you can see, the order is first filed and then followed by DNS 
보시는바와 같이 규칙은 첫번째 파일, 그리고 다음으로 DNS 입니다.

files refers to the /etc/hosts file and DNS refers to the DNS server.
파일은 /etc/hosts 를 참조 합니다. DNS 는 DNS 서버를 참조 합니다.

So for every hostname, the host first looks into the /etc/hosts file and if it cannot find it there,
모든 호스트 네임에 대해, 호스트는 가장 먼저 /etc/host 파일을 찾아 봅니다. 그리고 이 파일에서 찾을 수 없으면

it then looks at the DNS server.
DNS 서버에서 찾습니다.

This order can be modified by editing this entry in the file.
이 규칙은 파일의 엔트리를 수정 함으로써 변경 할 수 있습니다.
---------------------------------------------------------------------------------------
[파일을 먼저 찾아볼지. DNS 를 먼저 검색할지는 /etc/nsswitch.conf 파일에 달려있다.]

>> cat >> /etc/hosts
192.168.1.115		test

(resolve:결정하다, 해석하다.)
As for this order, our host would resolve the test server to 192.168.1.115
이 규칙에 따르면, 우리의 호스트는 test 를 192.168.1.115 로 해석 합니다.

(bring:가져오다)
What if you try to bring a server that is not in either list?
만약에 당신이 서버 를 가져오려고 했는데. 그 서버가 더 리스트에 없다면?

For example, I try to ping www.facebook.com.
예를 들어, 페이스 북에 핑을 시도 합니다.

I don't have facebook.com in my /etc/hosts file and I don't have it in my DNS over either.
나의 호스트 파일에는 페이스북 도메인이 없습니다. 그리고 DNS 서버도 마찬가지로 도메인 정보가 없습니다.

So in that case it will fail.
이 경우에는 실패가 됩니다.

You can add another entry into your result or confirm to point to a name server that knows Facebook.
당신은 당신의 결과에 또다른 엔트리를 추가 할 수 있습니다. 또는 네임서버가 가리키는 것이 페이스북을 알고 있는지 확인 할 수 있습니다.

For example, 8.8.8.8 is a common well known public name server available on the Internet hosted by Google that knows about all the websites on the Internet.
예를 들어 8.8.8.8 은 구글에 의해 호스팅 되는 인터넷에서 이용가능한 공공 네임 서버 입니다.

>> cat >> /etc/resolv.conf
nameserver		192.168.1.100
nameserver		8.8.8.8			<-- 구글이 호스팅

You can have multiple name servers like this configured on your host, but then you have to configure that on all your hosts in your network.
당신의 호스트에서 설정된 것처럼 당신은 다수의 네임 서버를 가질 수 있습니다. 하지만 그럴려면 당신의 네트워크의 모든 호스트에 설정을 해야 합니다. 

You already have a name server within your network configuration all the hosts.
당신은 이미 네트워크내 모든 호스트에 설정된 네임 서버를 가지고 있습니다.

(forward:앞으로, 전송하다. 앞으로 전달하다)
So in that case, you can configure the server itself to forward any unknown host names to the public name server on the Internet.
때문에 이 경우 서버를 자체적으로 설정 할 수 있습니다. 어떤 알려지지 않은 호스트 이름을 인터넷에 연결된 공공 네임 서버로 전달 하는 것을요.

You should not be able to ping external sites such as Facebook.com.
페이스 북과 같은 외부 사이트에 핑을 날리는 것은 할수 없어야 합니다.

Until now, we've been just trying to reach systems with their names like Web, DB, inforce, etc.
지금 까지, 우리는 웹이나 EB 인포스 등등의 이름으로 접근하는 것을 시도했습니다.

But we just tried to ping Facebook at www.facebook.com.
하지만 방금 페이스북에 ping 을 시도했습니다.

What is this name with a www and .com at the end.
www 와 닷컴의 이름이 무엇일까요?

It's called a domain name and it is how IP translate to names that we can remember on the public internet, just like how we did for our hosts.
이것들은 도메인 네임이라고 부릅니다. 그리고 이것은 IP 를 우리가 공공 인터넷에서 기억 할 수 있는 이름으로 변환하는 방법입니다. 우리가 우리의 호스트에 했던 방법과 같이.

Now the reason they are in this format separated by dots is to group like things together.
이제. 이것들이 . 으로 분리된 형태의 포맷이 된 이유는 닮들 것들끼리 그룹을 짓기 위해서 입니다.


(portion:부분) (intent:의지)
The last portion of the domain name, the dot coms, the dot net start edu, dot org, etc. are the top level domains that represent the intent of the website dot com for commercial or general purpose,
도메인 네임의 마지막 부분 .com .net .edu .ord .etc 는 탑 레벨 도메인 입니다. 이것들은 의지를 표방 합니다. 닷컴은 상업 또는 일반 적인 목적을.

dot net for network, dot edu for educational organizations and dot org for non-profit organizations.
닷넷은 네트워크를 . 닷 에듀를 교육을, 오거나이제이션과 .org 는 비영리 기관을.

Let's look at one in particular, in Google's case, the dot is the root, that's where everything starts.
그것들중 하나를 봅시다. 구글의 경우 닷은 루트를 의미합니다. 루트는 모든것이 시작하는 곳입니다.

Dot com is a top level domain.
닷컴은 탑레벨 도메인 입니다.

Google is the domain name assigned to Google and www is a subdomain, the subdomains helping further grouping things together Under Google
구글은 도메인 네임을 구글에 할당 합니다. 그리고 www 는 서브 도메인 입니다. 구글 도메인 아래 서브도메인은 세부적인 그룹핑을 돕습니다. 

for example, Google's map service is available at maps.google.com.
예를 들어. 구글 맵 서비스는 maps.google.com 으로 이용가능 합니다.

So Maps is a subdomain.
그래서 맵은 서브 도메인 입니다.

Google storage service is available drive.google.com 
구글 스토리지 서비스는 drive.google.com 로 이용 가능합니다.

mobile apps are available at appstore.google.com.
모바일 앱은 appstore.google.com 으로 이용가능 합니다.

Google's email service are available at mail.google.com.
-- 생략

You can further divide each of these into as many subdomains based on your needs.
이 서브 도메인들은 당신의 필요에 따라 더 많은 서브 도메인으로 세분화 할 수 있습니다.

So you begin to see a tree structure forming.
그래서 트리 구조의 형태로 보기를 시작 합니다.

When you try to reach any of these domain names, say, apps.Google.com from within your organization,
가령 당신의 조직내에서 apps.google.com 같은 도메인 네임에 접근 하려고 하면

your request first hits your organization's internal DNS server.
당신의 요청은 가장 먼저 당신 조직의 내부 DNS 서버에 도착 하게 됩니다.

It doesn't know who apps or Google is.
내부 DNS 서버는 누가 apps 또는 구글 인지를 알 수 없습니다.

It forwards your request to the Internet 
이 전달된 요청은 인터넷으로 향합니다.

on the Internet, the IP address of the server serving Apps.Google.com, maybe resolve with the help of multiple DNS servers, 
인터넷에서는 apps.google.com 로 서비스 되고 있는 서버의 IP 를 많은 DNS 서버의 도움으로 연결할 수 있습니다.

a root dns server looks at your request and points you to a server serving .coms 
루트 DNS 서버는 당신의 요청을 확인 하고 .com 서빙을 하는 서버로 안내합니다.

.com dns server looks at your request and forwards you to Google and Google's dns server provides you the IP of the server serving the app's applications.
.com dns 서버는 당신의 요청을 보고서, google의 dns 서버는 apps 어플리케이션을 서빙 중인 서버의 IP에 당신을 안내 합니다. 

In order to speed up. all future results your organization's DNS server may choose to cache this IP for a period of time, typically a few seconds up to few minutes.
이 과정의 속도를 높이려면, 모든 미래의 결과
당신의 DNS 서버는 IP 를 일정 기간 동안 캐싱하는것을 선택 할 수도 있습니다.
That way it doesn't have to go through the whole process again each time. 일반적으로 몇 초에서 몇 분입니다.


So that was out in the public.
이것이 공개적으로 나온 것입니다.

What about your organization?
당신의 조직은 어떤가요?

Your organization can have a similar structure to, for example, your organization could be called as mycompany.com
당신의 조직은 비슷한 구조를 가질 수 있습니다. 예를 들어. 당신의 조직은 mycompany.com 으로 불릴수 있습니다.

and have multiple subdomains for each purpose 
그리고 각각의 목적에 따라 다수의 서브 도메인을 가질 수 있습니다.

www for external facing website.
외부 사이트용 www 이나

mail.mycompany.com for accessing your organization's mail.
이메일 접근을 위한 mail.mycompany.com 이나

drive for accessing storage
스토리지용 드라이브나.

pay.mycompany.com for accessing the payroll application,
결재용 어플리케이션이나

hr for accessing hr application etc..
HR 이나.

All of these are configured in your organization's internal DNS server.
이 모든것들은 내부 DNS 서버에서 설정 되어 집니다.


[resolve 에서는 서브 도메인을 지정 할 수 있는 걸로 보인다. 메일은 어디에, HR 은 어디에, 결재는 어디에]

The reason we discussed all of this is to understand another entry in the /etc/resolve.conf file, 
우리가 이 모든것들을 논한 이유는 /etc/resolve.conf 파일의 또다른 엔트리를 이해하기 위함 입니다.

remember, this is the file where we configure the DNS server to be used for our host.
기억하세요. 이것은 파일입니다. 우리가 DNS 서버를 우리의 호스트에 사용하기 위해 구성하는 파일이 있는 곳입니다.

With that, we were able to resolve servers in your organization with just their names like Web.
resolve.conf 를 설정 하는 것으로 우리는 조직에 속한 서버가 그들의 네임으로 향하도록 할 수 있습니다. 마치 웹 처럼

We have now introduced more standard domain names like web.mycompany.com or DB.mycompany.com, etc..
우리는 이제 조금 더 스탠다드 도메인 네임에 대해 소개 할 것입니다. web.mycompany.com 또는 db.mycompany.com 등등





Now when you ping web you can no longer get a response.
이제 웹에 핑을 날렸을때. 이제 더이상 응답을 받을 수 없습니다. (8.8.8.8 공공 DNS 를 날림)

Of course, this is because we are trying to ping web, but there is no record for by the name web on my DNS server.
당연하게도 응답이 없는 이유는 DNS 서버에 web 이란 이름으로 기록된 정보가 없기 때문입니다.

Instead it is web.mycompany.com.
대신에 web.mycompany.com

So you have to use web.mycompany.com.
저 도메인은 사용할 수 있습니다.

Now I can understand if someone outside of a company wants to access our web server, he would have to use web.mycompany.com.
이제 저는 이해할 수 있습니다. 만약 누군가 회사 밖에서 우리 웹 서버에 접근을 원한다면, 그는 web.mycompnay.com 을 써야만 합니다.

But within our company, your own company, you want to simply address the Web server by its first name web.
하지만 회사 내부에서는 이름의 첫부분 web으로된 간단 웹 서버 주소를 갖길 원합니다.

(Just like:~인 것처럼_
Just like how you address other members in your family simply by their first names, 
다른 가족 구성원을 대하는 것 처럼. 그들의 첫 이름을 따서 간단하게.

which is not the case when someone outside your family addresses them using their full names.
바깥의 누군가가 당신의 가족들의 풀 네임을 이용하여 대하는 것과 다른 경우 입니다.

So what do you do to configure web to resolve my web.mycompany.com?
그래서 웹 서버를 mycompany.com 으로 연결하기 위해 무엇을 할 것입니까?

You want to say when I say web, I mean web.mycompany.com for that you make an entry into your host, /etc/resolve.conf called search and specify the domain name you want to append.
당신은 말하기를 원합니다. 내가 web 이라고 할때 그 의가 web.mycompany.com 를 의미하기를.
 당신은 당신의 호스트의 /etc/resolv.conf 안에 search 라고 불리는 엔트리를 생성합니다. 그리고 당신이 추가하길 원하는 도메인 네임을 지정합니다.

------------------------------------------------------------------------------------
[/etc/resolv.conf]
nameserver		192.168.1.100		<-- DNS 를 검색하는 서버
search			mycompany.com		<-- 서브 도메인 만으로 검색할때 생략된 도메인 정보
------------------------------------------------------------------------------------

Next time you try to ping web, you will see it actually tries web.mycompany.com.
다음 시간에 web 에 ping 을 시도 하면, web 은 사실 web.mycompany.com 으로 수행되는걸 볼 수 있습니다.

Now your host is intelligent enough to exclude the search domain.
이제 당신의 호스트는 도메인을 검색 하는걸 제외하고도 충분히 지능적이게 되었습니다.

If you specified a domain in your query like this, you may also provide additional search domains like this.
만약 당신의 쿼리에 도메인을 지정하려고 한다면, 당신은 추가적인 도메인을 제공 할 수도 있습니다.

So it would mean when I say web, I mean web.mycompany.com or web.prod.mycompany.com.
그래서 이것은 web 이라고 말하면 web.mycompany.com 또는 web.prod.mycompany.com 을 가리킬 수 있습니다.

So your host would try searching all of these domain names when you look for a hostname.
그래서 당신의 호스트네임을 찾기 위해 모든 도메인을 검색 할 수 있습니다. 

Finally, a word about a record types.
마지막으로 저장 유형에 관한 것입니다.

So how are the records stored in the DNS Server?
그럼 어떻게 레코는 DNS 서버에 저장되는 것일까요?
-----------------------------------------------------------------------------
we know that it stores IP to host names that's known as A records.
우리는 압니다. 이것들은 A 레코드 라고 불리는 이름으로 IP to 호스트 네임 으로 저장되는 것을.

Storing IPv 6 to host names is known as quad A record.
IPv6 를 호스트 네임으로 저장하는것은 AAAA 레코드라고 알려져 있습니다.

Mapping one name to another name is called C Name Records, for example.
하나의 이름을 또 다른이름으로 매핑하는 것을 C Name 레코드라고 합니다. 예를 들어

You may have multiple aliases for the same application, like a food delivery service may also be reached at eat or hungry.
당신은 어플리케이션에 다수의 별칭을 가질 수도 있습니다. 푸드 딜리버시 서비스 처럼 eat 또는 헝그리가 될 수도 있습니다.

That's where a C name record is used.
이때 C 네임 레코드가 사용되는 곳입니다.

Name to name mapping.
이름과 이름의 매핑.

There are many more, but that's all we're going to look at for now.
여기에는 더 많은 정보들이 있습니다. 하지만 여기까지가 우리가 볼 부분입니다.

(resolution:의문 따위의 해결)
Now, Ping may not always be the right tool to test DNS resolution.
핑이 항상 DNS 서버를 확인하는데 올바른 도구가 아닐수도 있습니다.


---------------------------------------------------------------------------------------
[nslookup]
There are a few other tools as well, such as nslookup.
여기에는 몇 다른 도구 들도 있씁니다. 가령 nslookup

You can use an nslookup to query a hostname from a DNS server.
DNS 로부터 호스트 네임을 묻기 위해 nslookup 을 사용할 수 있습니다.

------------------------------------------------------------------------------------
>> nslookup
Server:		8.8.8.8
Address:	8.8.8.8#53

Non-authoritative answe:
Name:	www.google.com
Address: 172.217.0.132
------------------------------------------------------------------------------------

But remember, in this lookup does not consider the entries in the local /etc/hosts file.
하지만 기억하세요. nslookup 은 hosts 파일의 엔트리들은 고려하지 않는다는 것을.

So if you add an entry into the local /etc/hosts file for your web application and if you try to do an nslookup for that web application, 
만약 웹어플리케이션을 위해 엔트리를 추가하고 싶다면 그리고 웹 어플리케이션을 위해 nslookip 을 실행하고자 한다면.

it is not going to find it.
nslookup 은 호스트 엔트리를 찾을 수 없습니다.

The entry for your Web application has to be present in your DNS server nslookup only queries the DNS server.
웹 어플리케이션을 위한 엔트리는 DNS 서버에 기재되어야 합니다. nslookup 은 DNS 서버에만 질의합니다.

(same goes with:마찬가지)
The same goes with dig 
dig 도 마찬가지입니다.

dig is another useful tool to test DNS name resolution, 
dig 은 DNS 네임을 확인하기 위한 또다른 유용한 도구 입니다.

>> dig www.google.com

it returns more details in a similar form as is stored on the server 
dig 은 서버에 저장된 것과 유가하게 좀 더 많은 정보들을 리턴 합니다.

in the upcoming Practice Exercises section.
이것은 다가오는 연습 섹션에서 다루어 보겠습니다.

It will practice between configuring and troubleshooting DNS in a lab environment on actual systems

through some fun and challenging exercises.

Well, that's it for this lecture.

And in the next lecture, we look at how to set up an actual DNS server on a system where we will use core DNS as our DNS solution.

Well, thank you so much for watching.

And don't forget to subscribe to my channel for more videos like this.