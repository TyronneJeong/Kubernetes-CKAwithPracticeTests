Hello and welcome to this lecture. 
안녕하세요.

In this lecture we will discuss about DNS in the Kubernetes cluster.
이번 강의엥서 DNS 에 대해 다뤄보겠씁니다.

If you are knew to DNS make sure you go through the prerequisite section on DNS where we discuss what DNS is,
만약 DNS 를 확인했다면 pre-requiste 부분을 넘기셔도 됩니다.

what are the tools used for working with DNS such as host, NS Lookup and dig utility and the different types of DNS records like A, CNAME etc.
어떤 도구가 DNS와 호스트가 작업하는데 사용되었나요. nslookup, dig, 그리고 다른 유형의 dns records 예를 들어 A, CNAME 등등

And we also saw how to setup our own DNS server using CoreDNS.
그리고 우리는 CoreDNS 를 사용하여 DNS 서버를 셋팅 하는 방법에 대해서도 보았씁니다.

In this lecture we will see what names are assigned to what objects, what our service DNS records, PODDNS records,
이번 강의에서 우리는 어떤 이름을 어떤 오브젝트에 할당 하는지를 볼 것입니다.

What are the different ways you can reach one pod from another. 
한 POD 에서 다른 POD 에 도달가능한 다양한 방법은 무엇이 있습니까?

In the next lecture, we will see how Kubernetes implements DNS in the cluster. 
다음 강의에서 우리는 쿠버네티스가 DNS 를 구현하는 방법에 대해 알아 볼 것입니다.

So we have a 3 node kubernetes cluster with some PODs and services deployed on them.
그래서 우리는 몇 POD 와 서비스가 배포되어 있는 3개의 노드가 있습니다.

Each node has a nodename and IP address assigned to it.
각 노드는 노드네임과 IP 주소가 할당되어 있습니다.

The node names and IP addresses of the cluster are probably registered in a DNS server in your organization.
노드 네임과 IP 주소는 아마도 DNS 서버에 등록 되어 있을 것입니다.

Now how that is managed who accesses them are not of concern in this lecture. 
이제 어떻게 이것들을 관리할까요. 누가 여기에 엑세스 하는가는 관심 밖입니다.

In this lecture we discuss about DNS resolution within the cluster between the different components in the cluster such as PODs and services. 
이번 강의에서 우리는 클러스터와 다른 컴포넌트들 간의 DNS 해결에 관해 논의할 것입니다.

Kubernetes deploys a built-in DNS server by default when you setup a cluster. 
쿠버네티스는 클러스터를 셋팅 할때 기본적으로 빌트인 DNS 서버를 배포 했습니다.

If you setup kubernetes manually, then you do it by yourself.
만약 쿠버네티스를 수동으로 구성 한다면 이부분을 직접 해야 합니다.

We will see how that is done and how it is configured in the next lecture.
우리는 이것이 완성되고 어떻게 구성되는지를 다음 강의에서 볼 것입니다.

As far as this lecture is concerned we will see how it helps pods resolve other pods and services within the cluster. 
이강의에 관한 한 우리는 POD 가 클러스터 내의 다른 포드 및 서비스를 해결하는데 어떻게 도움이 되는지를 볼 것입니다.

So we don't really care about nodes. 
그래서 노드에 대해서는 신경 쓰지 않습니다.

We focus purely on PODs and services within the cluster. 
오직 POD 와 서비스에 대해서만 집중 할 것입니다.

As long as our cluster networking is set up correctly, following the best practices we learned so far in this section, and all pods and services can get their own IP address and can reach each other We should be good.
클러스터 네트워킹이 정확히 셋업 되는 시간 만큼, 이번 섹션에서 최고의 연습문제를 따라가서 배울 것입니다. 그리고 모든 POD 와 서비스는 IP 를 가지게 되고 서로 접근이 가능 해집니다.

Let’s start with just two PODs and a service.
이제 두개의 POD 와 서비스 부터 시작 합시다.

I have a test pod on the left with the IP set to 10.244.1.5. And I have a web pod on the right, with the IP set to 10.244.2.5. 
저에게는 테스트 POD 가 있습니다.
[왼쪽:10.244.1.5]
[오른쪽:10.244.2.5]

Looking at their IPs, you can guess that they are probably hosted on two different nodes. But that doesn’t matter, 
IP를 살펴보면, 그들이 서로 다른 노드에 호스팅 되어 있다고 짐작 할 수 있습니다. 하지만 상관 없습니다.

as far as DNS is concerned.
DNS에 관한한

We assume that all PODs and services can reach other using their IP addresses. 
우리는 가정 합니다. 모든 POD 와 서비스가 그들의 IP 주소를 사용하여 다른 컴포넌트에 접근 할 수 있다고 가정 합니다.

To make the web server accessible to the test pod, we create a service. 
웹 서버를 테스트 POD 접근 가능 하게 만들기 위해 우리는 서비스를 만들어야 합니다. 

We name it Web service.
웹 서비스라는 이름의 서비스를

The service gets an IP 10.107.37.188. Whenever a service is created, the kubernetes DNS service creates a record for the service. 
이 서비스는 IP 10.107.37.188을 갖습니다. 서비스가 생성될 때마다 쿠버네티스 DNS 서비스는 서비스를 위한 레코드를 생성 합니다.

It maps the service name to the IP address. 
서비스 이름을 IP 주소에 매핑 합니다.

So within the cluster any pod can now reach the service using its service name.
클러스터 내부에 모든 POD 는 이제 서비스 이름을 이요하여 닿을 수 있습니다.

Remember we talked about name spaces earlier. That everyone within the namespace address each other just with their first names and to address anyone in another namespace you use their full names ?
기억하세요. 우리는 네임스페이스를 이전에 이야기 했었습니다. 네임스페이스주소에 있는 각각은 그들의 첫번째 이름을 그리고 도착지 주소에 있는 다른 네임스페이스에 있는 모든 것들은 풀 네임을 쓴다는 것을.?

In this case since the test pod and the web pod and its associated service are all in the same namespace.
이번 경우에 test pod 와 web pod 그리고 이들을 엮은 서비스가 같은 네임스페이스에 있습니다.

The default namespace. You were able to simply reach the web-service from the test pod using just the service name web service.
기본 네임스페이스. 당신은 손쉽게 test pod 로부터 서비스 이름을 사용하여 웹 서비스에 닿을 수 있습니다.

Let's assume the web service was in a separate namespace named apps.
웹서비스가 분리된 네임스페이스 apps 에 있다고 가정 해 봅시다.

Then to refer to it from the default namespace.
그런 다음 기본 네임스페이스를 참고 해 봅시다.

you would have to say web-service.apps. The last name of the service is now the name of the namespace.
당신은 web-service-apps 라는것을 가졌습니다. 서비스에 남은 이름은 이제 네임스페이스의 이름 뿐입니다.

So here web service is the name of the service and apps is the name of the namespace. For each namespace The DNS server creates a subdomain.
그래서 여기 웹 서비스는 서비스의 이름입니다. 그리고 apps 는 네임스페이스의 이름입니다. 각 이름을 위해 DNS 서버는 서브 도메인을 생성합니다.


All the services are grouped together into another subdomain called SVC.
모든 서비스들은 SVC 라고 불리는 서브 도메인에 함께 그룹지어져 있습니다.

So what was that about?

Let's take a closer look.
자세히 살펴 보겠습니다.




web-service is the name of the service and apps is the name of the namespace. 
웹 서비스는 서비스 명입니다. 그리고 apps 은 네임스페이스 명입니다.

For each namespace the DNS server creates a subdomain with its name.
각 네임스페이스를 위해 DNS 서버는 이들 이름으로 서브 도메인을 생성 합니다.

All pods and services for a namespace are thus grouped together within a subdomain in the name of the namespace.
네임스페이스에 있는 모든 POD 와 서비스들은 네임스페이스의 이름을 서브도메인으로 하여 각 서로 그룹핑되어있습니다.

All the services are grouped together into another subdomain called svc.
모든 서비스들은 서로 SVC라는 이름의 서브 도메인으로 그룹지어져 있습니다.

So you can reach your application with the name web-service.apps.svc.
그래서 당신의 어플리케이션에 웹서비스.apps.svc 의 이름을 사용하여 접근할 수 있습니다.

Finally, all the services and PODs are grouped together into a root domain for the cluster, which is set to cluster.local by default. 
마지막으로 모든 서비스와 POD 는 함께 그룹지어져 있습니다. 루트 도메인으로. cluster.local 을 기본으로

So you can access the service using the URL web-service.apps.svc.cluster.local. And that’s the fully qualified domain name for the service.
그래서 web-service.apps.svc.cluster.local URL 을 사용하여 서비스에 접근 할 수 있습니다.
그리고 이것이 서비스를 위해 정의된 전체 도메인 네임 입니다.

So that's how services are resolved within the cluster.
이것이 서비스가 해결 한 방법입니다.

What about PODs? Records for PODs are not created by default. But we can enable that explicitly, We will see that in the next lecture. 
POD는 어떻습니다. POD 는 기본적으로 생성되지 않습니다. 하지만 명시적으로 활성화 할 수 있습니다. 이부분은 다음 강의에서 확인하겠습니다.

Once enabled, Records are created for pods as well.
한번 활성화 하면 레코드는 자동으로 POD를 위해 생성되어 집니다.

It does not use the POD name though. 
이것은 POD 네임을 사용하지도 않는데도 말이죠.

For each POD kubernetes generates a name by replacing the dots in the IP address with dashes.
각각의 POD 들은 이름을 생성 합니다. IP주소에서 .을 -로 바꾸어서.

The namespace remains the same and type is set to pod. The root domain is always cluster.local.
네임스페이스는 동일하게 유지되고 타입은 POD 로 설정 됩니다. ROOT 도메인은 항상 cluster.local. 입니다.

Similarly the test POD in the default namespace, gets a record in the DNS server, with its IP converted to a dashed hostname 10-244-1-5 and namespace set to default, type is POD and root is cluster.local.
기본 네임스페이스의 test pod 와 유사하게 DNS 에 레코드를 가집니다. IP 주소를 변환한 호스트 네임으로요.그리고 네임스페이스는 default 로 설정 됩니다. 타입은 POD 이고 root 는 cluster.local. 이 됩니다.

This resolve to the IP address of the POD.
이것이 POD 의 IP 주소 해결 입니다.
