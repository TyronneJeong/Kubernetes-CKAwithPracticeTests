---------------------------------------------------------------------------------------
[정리]
1. 도커는 컨테이너를 실행할때 네트워크 옵션을 지정 할 수 있다.
>> docker run --network none nginx
>> docker run --network host nginx
>> docker run nginx <-- 옵션이 없으면 bridge 로 생성

2. DOCKER 는 컨테이너를 실행할때 내부 네트워크 인터페이스로 자동으로 생성한다. 
BRIDGE의 경우 자동으로 브릿지 인터페이스가 생성된다.
>> docker network ls
>> ip link			<-- 호스트에서 조회시 자동으로 생성된 브릿지는 docker0 라는 이름으로 검색된다.
>> ip link add docker0 type bridge
>> ip link add docker0 type bridge

3. 그럼 도커가 컨테이너를 생성할때 마다 만들어 지는 네임스페이스를 어떻게 호스트와 연결 시킬까?
>> ip netns
b3165c10a92b
>> docker inspect b3165c10a92b
>> ip addr 						<-- 주소정보 확인 가능
---------------------------------------------------------------------------------------
[포트포워딩 #1]
>> iptables
>> 	-t nat
>> 	-A PREROUTING
>> 	-j DNAT
>> 	--dport 8080
>> 	--to-destination 80
---------------------------------------------------------------------------------------

Hello and welcome to this lecture. 
안녕하세요.

In this lecture we look at networking in Docker.
이번 강의에서 우리는 도커 에서의 네트워킹을 살펴 보겠습니다.

We will start with a basic networking options in Docker and then try and related to the concepts around networking name spaces.
우리는 도커의 네트워킹의 기본 옵션에 대해 배울 것이며 네트워킹 네임 스페이스와 관련된 것들을 수행해 볼 것입니다.

Let’s start with a single Docker Host. 
여기 단일 도커 호스트로부터 시작 합시다.

A server with Docker installed on it.
도커가 설치된 서버가 있습니다.

It has an ethernet interface at eth0 that connects to the local network with the IP address 192.168.1.10.
이 서버는 eth0 이라는 192.168.1.10 IP 로 연결된 이더넷 인터페이스가 있습니다.

When you run a container you have different networking options to choose from.
컨테이너를 실행 할때, 서로 다른 네트워킹 옵션을 선택 할 수 있습니다.

[None Network]
>> docker run --network none nginx

First, let’s see the none network. With the None network,
첫번째. 네트워크가 없는 설정을 봅시다.

the docker container is not attached to any network.
도커 컨테이너에 어떠한 네트워크로 연결 하지 않습니다.

The container cannot reach the outside world and no one from the outside world can reach the container.
컨테이너는 외부 세상으로 연결 할 수도 없고, 바깥세상에서 누구도 컨테이너로 접근 할 수 없습니다.

If you run multiple containers they are all created without being part of any network and cannot talk to each other or to the outside world.
만약 멀티플 컨테이너를 실행 중이라면 이들 모두 서로 소통도 안되고 바깥에서 접속 할수도 없는 컨테이너가 생성됩니다.

[Host Network]
>> docker run --network host nginx

Next is the Host network. With the host network,
다음으로는 호스트 네트워크 입니다.

the container is attached to the host’s network.
컨테이너는 호스트의 네트워크로 연결 됩니다.

There is no network isolation between the host and the container.
이 방법은 호스트와 컨테이너 같의 네트워크 분리가 없습니다.

If you deploy a web application listening on port 80 in the container then the web application is available on port 80 on the host without having to do any additional port mapping.
만약 당신이 80번 포트로 수신중인 웹 어플리케이션을 컨테이너 배포 한다면, 웹 어플리케이션은 호스트의 80번 포트로 접근이 가능 합니다. 다른 포트 매핑을 추가 할 수가 없습니다.

If you try to run another instance of the same container that listens on the same port 
만약 당신이 또다른 인스턴스를 동일 컨테이너에 실행 한다면 이 인스턴스 동일 포트로 수신받게 됩니다.

it won't work as they share hosts networking and two processes cannot listen on the same port at the same time.
이것들은 호스트 네트워킹을 공유하여 작업할수 없습니다. 그리고 두개의 프로세스가 동일 포트를 동일 시간에 리스닝 할 수는 없습니다.

[BRIDGE]
>> docker run nginx

The third networking option is the bridge. 
세번째 네트워킹 옵션은 브릿지 입니다.

In this case, an internal private network is created which the docker host and containers attach to. 
이 경우에 내부 개인 네트워크는 도커 호스트와 컨테이너를 연결하여 만들어 졌습니다.

The network has an address 172.17.0.0 by default and each device connecting to this network get their own internal private network address on this network.
네트워크는 172.17.0.0 의 주소를 기본으로 가지고 있습니다. 그리고 각 기기는 이 네트워크에 개인 네트워크 주소를 통해 연결되어 있습니다. 

This is the network that we are most interested in. So we will take a deeper look at how exactly docker creates and manages this network.
이 브릿지 네트워크가 우리가 조금더 흥미를 가지는 것입니다. 그래서 우리는 조금 더 깊게 들여 보겠습니다. 도커가 이 네트워크를 정확히 어떻게 생성하고 관리하는지.

When Docker is installed on the host it creates an internal private network called bridge by default.
도커가 호스트에 설치가 되면, 도커는 브릿지라 불리는 내부 개인 네트워크 를 기본적으로 생성합니다.

You can see this when you run the docker network ls command. Now, 
docker network ls 명령을 사용할때 이것들을 볼 수 있습니다.

------------------------------------------------------------------------------------
>> docker network ls
NETWORK ID		NAME		DRIVER		SCOPE
10d0120d01023	birdge		bridge		local
33llasd111233	host		bridge		local
a01088die883	none		bridge		local
------------------------------------------------------------------------------------

docker calls the network by the name “bridge”. But on the host the network is created by the name docker 0.
도커는 이 네트워크를 브릿지라고 부릅니다. 하지만 호스트 네트워크에서는 docker 0 라는 이름으로 생성됩니다.

# 호스트에서 도커 브릿지 네트워크 조회
>> ip link

You can see this in the output of the ip link command. Docker internally uses a technique similar to what we saw in the video on namespaces by running the IP link add command with the type set to bridge. 
당신은 또한 ip link명령을 통해 출력을 볼 수 있습니다. 도커는 내부적으로 유형이 브릿지로 설정된 ip link add 명령을 실행하여 네임스페이스와 관련된 비디오와 유사한 기술을 사용합니다.

# 유형이 bridge 인 도커0 링크를 추가
>> ip link add docker0 type bridge

So remember, the name bridge in the docker network ls output refers to the name docker 0 on the host.
기억하세요. 브리지라는 이름의 네트워크는 호스트의 docker networks ls 명령에서 docker0 라는 이름으로 나온다는 것을

# 네트워크 조회
>> docker network ls

They are one and the same thing.
저것들은 하나고 같은 것들이빈다.

(note :적어두다, 주목하다. 주목하다가 적절한듯)
Also note that the interface or network is currently down.
또한 인터페이스와 네트워크가 현재 다운되어 있다는것을 주목 합니다.

Now, remember we said that the bridge network is like an interface to the host, but a switch to the namespaces or containers within the host.
기억하세요 우리가 말하는 브릿지 네트워크는 호스트로 향하는 인터페이스 같다는 것을. 하지만 네임스페이스 또는 컨테이너로 스위치 한다는 걸 기억하세요.

So the interface docker0 on the host is assigned an IP 172.17.0.1.
그래서 호스트의 인터페이스 도커 0는 192.17.0.1 의 IP 를 할당 받습니다.

You can see this in the output of the ip addr command.
ip addr 명령을 통해 이 출력을 확인할 수 있습니다.

Whenever a container is created 
컨테이너가 생성될때마다.

Docker creates a network namespace for it just like how we created network namespaces in the previous video. 
도커는 새로운 네트워크 네임 스페이스를 생성 합니다. 이전 비디오에서 네트워크 네임 스페이스가 생성되는 방법에 따라.

Run the ip netns command to list the namespace.
네임스페이스를 나열 하기 위해 ip netns 명령을 실행합니다.

>> ip netns

Note that there is a minor hack to be done to get the ip netns command to list the namespaces created by Docker.
여기에 도커에 의해 생성된 네임스페이스를 나열하기 위해 ip netns 명령을 사용하는 것에 약간의 핵이 있다는 것을 주목 하세요.

Checkout the resources section of this lecture for information on that.
이것에 관한 정보를 위해 이 강의의 리소스 섹션을 살펴 보십시오.

The namespace has the name starting b3165.
네임스페이스는 b3165 라는 이름으로 시작 합니다.
---------------------------------------------------------------------------------------
>> ip netns
b3165c10a92b

>> docker inspect b3165c10a92b
"NetworkSettings":{
	"Bridge": "",
	"SandboxID": "b3165c10a92b50edce4c8aa5f3727e180907ded31",
	"SandboxKey": "/var/run/docker/netns/b3165c10a92b",
{
---------------------------------------------------------------------------------------
You can see the namespace associated with each container in the output of the docker inspect comment.
도커 검증 커맨트로 네임스페이스가 각각의 컨테이너와 연결되어 있는것을 볼 수 있습니다.

So how does docker attach the container or its network namespace to the bridge network? 
그럼 도커는 어떻게 컨테이너 또는 그 네트워크 네임스페이스를 브릿지 네트워크에 연결 할 수 있었을까요?

For the remainder of this lecture.
이강의의 나머지 부분을 위해

container and network namespace mean the same thing. 
컨테이너와 네트워크 네임 스페이스는 같은 의미 입니다.

When I say container
제가 컨테이너라고 말할때

I'm referring to the network namespace created by Docker for that container.
도커에 의해 생성된 컨테이너의 네트워크 네임스페이스를 가리키고 있습니다. 

So how does docker attach the container to the bridge? 
그럼 도커는 어떻게 컨테이너를 브릿지와 연결 시킬 까요?

As we did before it creates a cable, a VIRTUAL cable, with two interfaces on each end.
우리가 이전에 케이블을 생성 했던것과 같이. 두개의 인터페이스 각 종단을 연결하는 가상의 케이블을 생성합니다.

Let's find out what Docker has created here.
그럼 도커가 생성할것을 확인해 봅시다.

If you run the ip link command on the docker host 
you see one end of the interface which is attached to the local bridge Docker zero.
만약 당신이 도커에서 ip link 명령을 사용한 경우, docker0 라는 로컬 브릿지 에 연결된 인터페이스를 보게 됩니다.

If you run the same command again this time with the –n option with the namespace,
이번에 -n 옵션으로 네임스페이스를 추가하여 동일 커맨드를 실행 하면

then it lists the other end of the interface within the container namespace.
이땐 컨테이너 네임스페이스에 있는 인터페이스의 다른 종단을 나열 합니다.

The interface also gets an IP assigned within the network.
인터페이스 또한 네트워크에 IP 주소가 할당 되어 있습니다.

You can view this by running the ip addr command but within the container's namespace. 
ip addr 명령을 통해 이것들을 확인 할 수 있습니다. 하지만 컨테이너 네임스페이스 안에서는

>> ip addr

The container gets assigned 172.17.0.3.
컨테이너는 172.17.0.3의 주소를 가집니다.

You can also view this by attaching to the container and looking at the IP address assigned to it that way.
컨테이너에 연결에 의해 이것들을 볼 수 있습니다. 그리고 IP 주소를 확인 합니다.

The same procedure is followed every time a new container is created. 
새 컨테이너가 생성 될때마다 동일 절차를 따릅니다.

Docker creates a namespace. Creates a pair of interfaces. 
도커는 네임 스페이스를 생성하고, 한쌍의 인터페이스를 생성 합니다.

Attaches one end to the container and another end to the bridge network. 
한 종단을 컨테이너와 연결하세요. 그리고 다른 하나는 브릿지 네트워크에 연결 합니다.

The interface pairs can be identified using their numbers.
인터페이스 쌍은 그들의 숫자를 이용하여 이를 식별 할 수 있습니다.

Odd and even former pair 9 and 10 are one pair.
홀수 짝수 형태의 쌍입니다. 9와 10을 하나의 쌍입니다.

7 and 8 are another and 11 and 12 are one pair.
7과 8은 또다른 쌍. 그리고 11과 12는 한쌍입니다.

The containers are all part of the network now 
컨테이너들은 네트워크의 모든 부분입니다.

they can all communicate with each other.
컨테이너들은 서로 소통 할 수 있습니다.

Let us look at port mapping now. The container we created is nginx, so it’s a web application serving web page on port 80. 
포트 매핑을 봅시다. 우리가 생성한 컨테이너는 nginx 입니다. 그래서 이 웹 어플리케이션 서버는 80번 포트로 서빙 중입니다.

Since our container is within a private network inside the host.
우리의 컨테이너가 호스트의 개인 네트워크 속에 있기 때문에.

Only other containers in the same network or the host itself can access this Web page.
동일 네트워크의 다른 컨테이너 또는 호스트 자체만 이 웹 페이지에 접근 할 수 있습니다.

If you tried to access the web page using curl with the IP of the container from within Docker host on port 80 you will see the web page.
만약 당신이 웹 페이지를 curl 을 이용하여 접근 하려 시도 한다면, 80번 포트를 통해 해당 웹 페이지를 볼 수 있을 것입니다.

If you try to do the same thing outside the host, you cannot view the web page. 
만약 호스트 바깥에서 동일한 작업을 시도 한다면 당신은 해당 웹 페이지를 보지 못할 것입니다.

To allow external users to access the applications hosted on containers.
외부 유저가 컨테이너에 호스팅 중인 어플리케이션에 접근 하는 것에 관해


[포트 퍼블리싱 | 포트 매핑]
Docker provides a port publishing or port mapping option. 
도커는 포트 퍼블리싱 또는 포트 매핑 옵션을 제공 하고 있습니다.

When you run containers Tell Docker to map port 8080 on the Docker host to port 80 on the container.
당신이 컨테이너 실행할때 도커에게 포트 매핑을 8080으로 이야기 합니다.

With that done, you could access the web application using the IP of the docker host and port 8080.
이게 완료되면 IP 주소와 포트번호 8080을 이용하여 웹 어플리케이션을 접근 할 수 있게 됩니다.

Any traffic to port 8080 on the docker host will be forwarded to port 80 on the container.
도커 호스트에서 8080포트를 향한 모든 트래픽은 컨테이너의 80번 포트로 전달 되게 됩니다.

Now all of your external users and other applications or service can use this Url to access the application deployed on the host.
이제 모든 외부 사용자와 다른 어플리케이션 또는 서비스는 URL 을 이용하여 호스트에 배포된 어플리케이션에 접근 할 수 있습니다.

But how does docker do that?
하지만 도커는 이걸 어떻게 하였을까요?

How does it forward traffic from one port to another?
어떻게 트래픽을 하나의 포트에서 다른 포트로 돌릴수 있을까요?

What would you do?
무엇을 했나요?

Let's forget about Docker and everything else for a second.
도커와 다른것들은 잠시 잊어 봅시다.

The requirement is to forward traffic coming in on one port to another port on the server.
요청사항은 트래픽을 전달 하는 것입니다. 서버내 하나의 포트로 들어오는것을 다른 포트로..

We talked about it in one of our prerequisite lectures.
우리는 지금 선수 과목에 대해 이야기 하고 있습니다.


[PREROUTING]
We create a NAT rule for that. Using iptables we create an entry into the NAT table, to append a rule to the PREROUTING chain to change the destination port from 8080 to 80. 
우리는 포트포워딩을 위해 NAT 규칙을 생성 합니다. 목적지 포트를 8080에서 80 포트로 변경하기 위해 PREROUTING 규칙 추가를 위해 IPTABLE 을 이용하여 우리는 NAT 테이블에 엔트리를 추가 합니다.

Docker does it the same way. 
도커는 PREROUTING과 동일한 방법으로 작업을 처리했던것입니다.

Docker adds the rule to the docker chain and sets destination to include the containers IP as well 
도커는 도커체인 규칙을 추가 합니다. 그리고 컨테이너IP를 포함하여 목적지를 설정합니다.

you can see the rule docker creates when you list the rules in iptables.
IPTABLE 을 나열하면 도커가 생성한 규칙을 볼 수 있습니다.

--------------------------------------------------------------------------------------
[포트포워딩 #1]
>> iptables
>> 	-t nat
>> 	-A PREROUTING
>> 	-j DNAT
>> 	--dport 8080
>> 	--to-destination 80

[포트포워딩 #2]
>> iptables
>> 	-t nat
>> 	-A PREROUTING
>> 	-j DNAT
>> 	--dport 8080
>> 	--to-destination 172.17.0.3:80

[IPTABLE 규칙 조회]
>> iptables -nvl -t nat
Chain Docker ( 2 references)
target	prot	opt	source			destination
RETURN	all		--	anywhere		destination
...
--------------------------------------------------------------------------------------

Well that's it for this lecture in the next lecture.

We will talk about CNI and what container networking interface is.