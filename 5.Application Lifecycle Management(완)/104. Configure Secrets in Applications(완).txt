----------------------------------------------------------
>> kubectl create secret generic <name>
>>               --from-literal=<key>=<value>
>>               --from-literal=<key>=<value>
>>               --from-literal=<key>=<value>

POD
spec:
	containers:
		- envFrom:
			- secretRef:
				name: <secret-name>
				
				
>> kubectl get pod,svc 로 두개 조호가능;;;
----------------------------------------------------------

Hello and welcome to this lecture on secrets in Kubernetes. 
안녕하세요 secrets 의강의에 온것을 환영합니다.

Here we have a simple python web application that connects to a mysql database.
여기 간단한 웹 어플리케이션이 있습니다. mysql 데이터베이스에 연결된

On success

the application displays a successful message.
어플리케이션은 석세스 하는 메세지를 출력합니다.

If you look closely into the code, you will see the hostname username and password hardcoded.
자세히 보시면 호스트네임, 유저네임, 패스워드가 하드코딩된걸 보실 수 있습니다.

This is of course not a good idea.
이건 당연히 좋은 생각이 아닙니다.

As we learned in the previous lecture, one option would be to move these values into a configMap. 
이전 강의에서 배운것과 같이, configMap안에 하나의 옵션으로 이 값들을 옮길수 있습니다. 


The configMap stores configuration data in plain text format.
configMap은 설정 정보는 일반 텍스트 형식으로 저장하고 있습니다.

So while it would be okay to move the hostname and username into a configMap 
그래서 호스트 네임과 유저명을 설정맵으로 옮기는건 괜찮습니다.

it is definitely not the right place to store a password.
패스워드를 이곳에 옮기는건 좋지 않습니다.

This is where secrets coming.
여기에서 시크릿이 등장합니다.

secrets are used to store sensitive information like passwords or keys.
시크릿은 비밀번호나 키 같은 민감한 정보를 저장하기 위해 사용됩니다.

They're similar to configMap except that they're stored in an encoded or hashed format as with config maps.
시크릿은 엔코드 또는 해쉬포맷으로 저장되어진다는 점을 제외하고는 configMap 과 유사합니다.

There are two steps involved in working with secrets.
여기 시크릿을 사용하는 2단계가 엮여있습니다.

First create the secret and second injected into pod.
첫째는 시크릿을 생성하고 두번쨰는 POD 에 주입하는 것입니다.

There are two ways of creating a secret.
여기 시크릿을 생성하는 두가지 방법이 있습니다.

The imperative way - without using a Secret definition file and the Declarative way by using a Secret definition file with the imperative method.

명령적 방법과 선언적 방법입니다.

You can directly specify the key value pairs in the command line itself to create a secret of the given values.
당신은 커맨드 라인에 키-벨류 쌍을 직접 지정할 수 있습니다.
주어진 값으로 시크릿을 생성하기 위해.

run the kubectl create secret generic command.
>> kubectl create secret
일반 명령어를 실행합니다.

The command is followed by the secret name and the option –from-literal. 
명령어는 시크릿 이름과 그 옵션을 따라 붙습니다.
>> kubectl create scret <name> --from-literal<key>=<value>

The from literal option is used to specify the key value pairs in the command itself.
from-literal 옵션은 키-벨류 쌍을 지정하기 위해 쓰입니다.

In this example, we are creating a secret by the name app-secret, with a key value pair DB_Host=mysql.
해당 예제에서 우리는 app-secret 이라는 이름을 짓고, DB_Host=mysql 이라는 키-벨류 값을 지정하였습니다.

If you wish to add additional key value pairs, simply specify the from literal options multiple times
만약 추가적인 키-벨류 쌍을 더하고 싶다면 from-literal 을 지정하기만 하면 됩니다.

however this could get complicated when you have too many secrets.
하지만 많은 수의 secret 을 가지다보면 복잡해질수 있습니다

to pass in another way to input the secret data is through a file.
시크릿 데이터 입력값을 전달하기 위한 또 다른 방법은 파일을 통하는 것입니다.

Use the –from-file option to specify a path to the file that contains the required data.
파일의 경로를 지정하기 위하여 -from-file 옵션을 사용하세요. 필요한 데이터를 포함해서

The data from this file is read and stored under the name of the file 
데이터로 부터 나온 파일은 읽고 저장되어 집니다. 파일 이름 아래에.

let us now look at the declarative approach.
그럼 이제 선언적 접근법에 대해 살펴봅시다.

For this, we create a definition file, just like how we did for the ConfigMap.
선언적 접근법을 위해, 우리는 정의파일을 생성합니다. 마치 configMap 을 생성했던 방법 처럼.

The file has apiVersion, kind, metadata and data. The apiVersion is v1, kind is Secret. Under metadata specify the name of the secret.
이 파일에는 apiversion 도 있고 kind, metadata, data 가 있습니다. apiversion은 v1이고, kind 는  secret 그리고 메타데이터 아래에는 시크릿의 이름을 지정합니다.

We will call it app-secret. 
우리는 이녀석을 app-secret 이라고 부를겁니다.

Under data add the secret data in a key-value format.
data 아래에는 secret 데이터를 키-벨류 형태로 추가합니다.

However one thing we discussed about secrets was that there used to store sensitive data and are stored in an encoded format.
하지만 우리가 논의한 시크릿에 관한 것은 저장하기 예민한 데이터 그리고 엔코드된 포맷으로 사용된다는 점입니다.

Here we have specified the data in plain text which is not very safe.
여기는 플레인 텍스트로된 특정 데이터를 가지고 있습니다. 이것은 아주 위험합니다.

So while creating a secret with a declarative approach, you must specify the secret values in a hashed format.
선언적 접근법으로 시크릿을 생성하는 동안에 당신은 시크릿 벨류를 헤쉬드 포맷으로 가지고 있어야만 합니다.

So you must specify the data in an encoded form like this.
그래서 이처럼 인코딩할 데이터를 지정해야 합니다.

But how do you convert the data from plain text to an encoded format on a linux host from the command.
하지만 리눅스 호스트에서 명령으로 어떻게 플레인 텍스트를 엔코드 시킬 수 있을까요?

echo –n followed by the text you are trying to convert, which is mysql in this case and pipe that to the base64 utility. 

>> echo -n 'text' | base64

형식으로 입력한 텍스트는 엔코드 변환이 됩니다.그리고 |는 base64유틸리티 입니다. 
Q. ssh256도 되나?


To view secrets run the kubectl get secrets command. 
시크릿 목록을 모기 위해서는 
>> kubectl get screts 
명령어를 입력합니다.


This lists the newly created secret along with another secret previously created by kubernetes for its internal purposes 
이 명령어는 내부적 목적으로 이전에 생성된 또 다른 시크릿들과 함께 나열 됩니다.

to view more information on the newly created secret.
새롭게 생성된 시크릿의 좀 더 많은 정보를 보기 위해서는

run the kubectl describe secret command.
>> kubectl describe secret
명령을 실해합니다.

This shows the attributes in the secret but hides the value themselves to view the values as well.
이명령을 시크릿의 속성들을 보여줍니다만 값은 스스로 숨겨버립니다.

run the kubectl get secret command with the output displayed in a YAML format using the –o option.
>> kubectl get secret -o yaml
같이 실행하면

You can now see the hashed values as well.
이제는 hashed 벨류를 볼 수 있습니다.

Now how do you decode these hashed values.
그럼 이 값들은 어떻게 디코드 할까요.

Use the same base64 Command used earlier to encode it 
이전에 인코드하기 위해 사용했던 base64를 이번에도 동일하게 사용하세요.

but this time add a decode option to it.
하지만 이번에는 디코드 옵션을 추가 합니다.

Now that we have secret created.
이제 우린 시크릿을 생성했습니다.

let us proceed with step 2 
이제 2단계를 진행해 봅시다.

configuring it with a pod.
POD에 설정하기.

Here I have a simple pod definition file that runs my application.
여기 어플리케이션을 실행하기 위한 간단한 POD 정의파일이 있습니다.

To inject an environment variable, add a new property to the container called envFrom. 
환경변수를 주입하기 위해 envFrom 이라 불리는 새로운 속성을 컨테이너에 추가합니다.


The envFrom property is a list.
envFrom 은 리스트 입니다.

so we can pass as many environment variables as required 
그래서 우리가 필요한 만큼 많은 환경 변수를 전달할 수 있습니다.

each item in the list corresponds to a secret item.
각각의 아이탬은 시크릿 아이탬에 대응 됩니다.

Specify the name of the secret we created earlier.
이전에 우리가 만든 시크릿의 이름을 지정 합니다.

Creating the pod definition file now makes the data in the secret available as environment variables for the application.
POD정의파일을 만드는 것으로 시크릿 안에 어플리케이션을 위해 이용가능한 환경변수 데이터를 만듭니다.

What we just saw was injecting secrets as environment variables into the PODs.
우리가 방금 본것은 시크릿 환경 변수는 POD 에 주입하는 것입니다.

There are other ways to inject secret into PODs.
여기 POD 에 시크릿을 주입하는 다른 방법이 있습니다.

You can inject as single environment variables or inject the whole secret as files in a volume 
단일 환경 변수 또는 파일로 된 전체 시크릿을 볼륨에 주입할 수 있습니다.
------------------------------------------------------------
if you were to mount the secret as a volume in the pod.
만약 당신이 POD안에 볼륨 처럼 시크릿을 마운트 한다면

Each attribute in the secret is created as a file with the value of the secret as its content.
각각의 시크릿 속성이 해당 벨류와 함께 파일로 생성됩니다. 

In this case since we have three attributes in our secret three files are created 
이 경우 우리가 3개의 속성을 가지면서 부터 3개의 파일이 생성되어 집니다.

and if we look at the contents of the D.B. password file we see the password in it.
그리고 만약 D.B패스워드 파일의 내용을 보게되면 그 안에서 패스워드를 볼 수 있습니다.

That's it for this lecture.

Head over to the coding exercises and practice working with secrets.