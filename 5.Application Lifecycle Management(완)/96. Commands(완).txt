Hello and welcome to this lecture.

My name is Mumshad Mannambath.

In this section we will talk about Command and Arguments in a Pod Definition file.
안녕하세요. 이번 강의에서는 커맨드와 아규먼트에 대해 알아볼까 합니다. POD 정의파일 내에서요.

(overlooked:간과하다)
This is not listed as a required topic in the certification curriculum but I think it's important to explain as it is a topic that is usually overlooked.
이번 강의는 시험 커리큘럼에 포함된 목록은 아니지만. 제 생각에 이부분은 종종 간과되는 주제이시 때문에 설명하는 것이 중요하다고 생각합니다.

Let us first refresh our memory on commands in containers and docker.
먼저 컨테이너와 도커에 올라간 메모리를 명령을 통해 리프레쉬 합시다.

We will then translate this into pods in the next lecture.
그렇게 하고 나면 이것을 POD 속으로 변환할 것입니다. 다음 강의에서.

In this lecture we will look at commands arguments and entry points in Docker.
이번 강의에서는 명령어와 아규먼트 그리고 도커의 엔트리 포인트에 대해 학습할 것입니다.

Let's start with a simple scenario.
여기 간단한 시나리오로부터 시작합시다.

Say you were to run a docker container from an Ubuntu image.
당신은 우분투 이미지로 도커 컨테이너를 실행 하고 있다고 가정 해 봅시다.

(exits:출구, 퇴거하다, 퇴장하다)
When you run the “docker run ubuntu” command, it runs an instance of Ubuntu image and exits immediately.
docker run ubunt 명령을 실행할때, 도커는 우분투 이미지를 실행합니다. 그리고 즉시 종료합니다.

If you were to list the running containers you wouldn't see the container running.
만약 실행중인 컨테이너를 나열 한다면, 동작중인 컨테이너를 볼 수 없습니다.

>> docker ps

If you list all containers including those that are stopped 
만약 당신이 멈춘 컨테이너를 포함하여 모든 컨테이너를 나열 한다면

>> docker ps -a

you will see that the new container you ran is in an exited state.
당신은 실행했었던 종료된 상태의 새 컨테이너를 볼 수 있을 것입니다.

Now why is that 
왜 이럴까요

(unlike virtual machines:가상머신과 달리) (mean:평균, 품고있다, 의미하다)
unlike virtual machines. Containers are not meant to host an operating system.
컨테이너는 OS를 호스팅 하는 용도가 아닙니다.

Containers are meant to run a specific task or process such as to host an instance of a web server or application server or a database or simply to carry out some kind of computation or analysis once the task is complete.
컨테이너는 특정 작업이나 프로세스 예를 들면 웹서버를 호스팅 한다거나 또는 어플리케이션 서버 또는 데이터 베이스 또는 등등을 위한 것입니다.

The container exits 
컨테이너는 종료했습니다.

a container only lives as long as the process inside it is alive.
컨테이너는 그안의 프로세스가 살아 있을때까지만 살아 있습니다.

If the web service inside the container is stopped or crashes the container exits.
만약 컨테이너 내부의 웹 서버가 멈추거나 충돌이 일어난다면 컨테이너는 종료됩니다.

So who defines what process is run within the container.
그럼 컨테이너 안에서 실행되는 프로세스 같은것은 누가 정의할까요.

If you look at the docker file for popular Docker images like NGINX you will see an instruction called CMD which stands for command that defines the program that will be run within the container when it starts. 
만약 당신이 nginx 같은 일반적인 도커이미지의 도커 파일을 보았다면. CMD 라고 부르는 명령을 볼 수 있을것입니다. CMD 명령은 컨테이너가 시작할때 컨테이너 안해서 동작하는 프로그램을 정의할 수 있는 명령입니다.

>> CMD ["mysqlid"]


For the NGINX image, it is the nginx command.
nginx 이미지를 띄우려면 nginx 커맨드가 됩니다.

for the mysql image, it is the mysqld command.
mysql 이미지를 띄우려면 mysqlid 를 입력하면 됩니다.

What we tried to do earlier was to run a container with a plain Ubuntu Operating System
플레인 우분투 시스템에서 컨테이너를 실행하기 위해 우리는 이전에 무엇을 했어야 할까요?

Let us look at the docker file for this image 
이 이미지를 위해 도커 파일을 살펴봅시다.

you will see that it uses bash as the default command.
당신은 볼수 있습니다. 이파일은 bash 를 기본 커맨드로 사용했다는 걸.

Now bash is not really a process like a web server or database server.
bash 는 웹서버나 데이터 베이스 서버 같은 실제 프로세스가 아닙니다.

It is a shell that listens for inputs from a terminal 
이것은 쉘입니다. 터미널을 통해 명령업을 입력 받는 셀 입니다.

if it cannot find a terminal it exits.
만약에 터미널이 쉘을 찾지 못한다면 터미널은 종료됩니다.

When we ran the Ubuntu container earlier Docker created a container from the Ubuntu image 
우리가 우분투 컨테이너를 일전에 실행했었을때 도커는 우분투 이미지 에서 컨테이너를 생성 했습니다.

and launched the bash program 
그리고 bash 프로그램을 실행했습니다.

by default Docker does not attach a terminal to a container when it is run.
기본적으로 도커는 실행될때 컨테이너에 터미널을 포함하고 있지 않습니다.

And so the bash program does not find the terminal and so it exits since the process that was started
그래서 bash 쉘을을 터미널에서 찾을수가 없고, 이로인해 우리가 시작했었을때 바로 종료되었씁니다.

when the container was created finished the container exits as well.
컨테이너가 생성이 완료 되자마자 컨테이너는 종료됩니다.

So how do you specify a different command to start the container.
그럼 컨테이너를 시작 하기 위해 어떻게 다르게 명령을 지정하면 될까요

One option is to append a command to the docker run command and that way it overrides the default command specified within the image.
하나의 옵션은 "docker run"명령을 추가하는 것 입니다. 그리고 이 방법은 이미지내 기본 명령 지정을 덮어 쓰게 됩니다.

In this case I run the "docker run ubuntu" command with the “sleep 5” command as the added option.
이 케이스의 경우, 저는 sleep5 명령을 옵션으로 추가하여 docker run ubuntu 명령을 실행했습니다.

This way when the container starts it runs the sleep program, waits for 5 seconds and then exits.
이 방법은 컨테이너가 시작했을때, 슬립프로그램을 5초간 동작 시킨 다음 종료하게 돕니다.

(permanent:영구적인)
But how do you make that change permanent.
하지만 어떻게 변화를 영구적으로 만들수 있을까요?

Say you want the image to always run the sleep command when it starts.
가령 도커가 실행했을때 sleep 커맨드가 항당 동작하길 원한다고 가정해봅시다.

You would then create your own image from the base Ubuntu image and specify a new command.
그러면 당신은 당신의 이미지를 우분투 이미지 안에 생성할 것입니다. 그리고 새명령을 지정합니다.

There are different ways of specifying the command
저기 커맨드를 지정하는 다른 방법이 있습니다.

either the command simply as is in a shell form
셀 형식 그대로의 명령어도 있고

Or in a JSON array format like this.
JSON 배열 형태의 포맷도 있습니다.

But remember, when you specify in a JSON array format, the first element in the array should be the executable.
하지만 기억하세요. 당신이 JSON 배열 포맷을 지정 하면, 배열의 첫번째 항목은 실행 가능 해야만 합니다.

>> CMD["sleep", "5"] OK
>> CMD["sleep 5"] FAIL

In this case the sleep program do not specify the command and parameters together like this the command
이 케이스의 경우 sleep 프로그램은 명령어를 지정하지 않습니다. 그리고 파라미터를 같이 포함합니다. 이 명령어 처럼.

and its parameters should be separate elements in the list.
그리고 이 파라미터들은 목록에서 분리된 항목들이여야 합니다.

So I now build by new image using the docker build command, and name it as ubuntu-sleeper.
그럼 이제 도커 빌드 명령어를 이용하여 새 이미지를 구축해 보겠습니다. 그리고 ubuntu-sleeper 라고 이름 짓겠습니다.

>> docker build -t ubuntu-sleeper
>> docker run ubuntu-sleeper

I could now simply run the docker Ubuntu sleeper command and get the same results.
지금 docker run ubuntu-sleeper 라는 명령어를 통해 간단히 실행 할 수 있었습니다. 그리고 동일한 결과를 얻었습니다.

It always sleeps for five seconds and exits.
이 명령어는 항상 시작과 함께 5초 대기하고 종료됩니다.

But what if I wish to change the number of seconds it sleeps 
하지만 이것이 sleep 하고 있는 시간을 변경하고 싶다면? 

currently It is hard coded to five seconds as we learned before.
이전 우리가 배운 부분에서 현재 이것은 5초로 하드코딩 되어 있습니다.

One option is to run the docker run command with the new command appended to it.
docker run 명령어를 실행하는 하나의 옵션은 새로운 명령어를 거기에 덧 대는 것입니다.

In this case sleep 10 and so the command that will be run at startup will be sleep 10 but it doesn't look very good.
이 경우에는 sleep 10 을 덧 대는 것입니다. 그러면. 해당 명령어를 기동시 10초를 sleep 하게 할 것입니다. 하지만 이건 좋아 보이진 않습니다.

(implies:암시하다)
The name of the image Ubuntu sleeper in itself implies that the container will sleep.
우분투 슬리퍼라는 이름 자체가 컨테이너가 잠잘거라는것을 의미합니다.

So we shouldn't have to specify the sleep command again.
그래서 sleep 커맨드를 또 지정할 필요는 없습니다.

Instead we would like it to be something like this "Docker run Ubuntu sleeper 10"
"docker run ubuntu-sleeper 10" 과 같은걸로 대체할 수 있습니다.

(invoked:호출)
we only want to pass in the number of seconds the containers should sleep and sleep command should be invoked automatically
우리는 단지 컨테이너가 잠들기위해 초단위를 전달 하고 싶을 뿐입니다. 그리고 sleep 커맨드가 자동으로 호출 되기를 원할 뿐입니다.

and that is where the entry point instruction comes into play.
그리고 이것이 진입점 명령이 작동하는 곳입니다.

The entry point instruction is like the command instruction 
진입점 명령은 커맨드 명령과 비슷합니다.

as in you can specify the program that will be run when the container starts and whatever you specify on the command line.
프로그램을 지정 할 수 있는 것 처럼, 컨테이너가 시작될때 실행될 수 있습니다. 그리고 커맨드 라인에 지정하는 무엇이건 할 수 있습니다.

In this case 10 will get appended to the entry point 
이번 경우 10이라는 값은 진입점에 전달되어 추가 되었습니다.

so the command that will be run when the container starts is sleep 10.
그래서 컨테이너가 시작할때 10초 가량의 sleep 이 실행될 것 입니다.

So that's the difference between the two.

(entirely:전적으로)
In case of the CMD instruction the command line parameters passed will get replaced entirely, 
CMD명령의 경우 전달된 커맨드 라인 파라미터들은 해당 위치에 교체될 것입니다.

whereas in case of entry point the command line parameters will get appended.
진입점의 경우 커맨드 라인 파라미터가 더 추가 될 것 입니다.

Now, in the second case what if I run the ubuntu-sleeper without appending the number of seconds 
나우, 두번째 케이스로 만약 ubuntu-sleeper 가 추가되는 숫자 없이 실행된다면?

then the command at startup will be just sleep and you get the error that the operant is missing.
그럼 sleep 이라는 명령어만 실행되고 오퍼레이션 미싱이라는 오류가 발생될 것입니다.

So how do you configure a default value for the command.
그럼 해당 커맨드에 기본 값은 어떻게 설정 하는가?

If one was not specified in the command line that's where you would use both entry point as well as the command instruction.
만약 커맨드라인이 지정되지 않은 경우, 양쪽 진입점 모두를 사용합니다. 커맨드 명령 처럼.

######################################
FROM Ubuntu
ENTRYPOINT ["sleep"]
CMD["5"]
######################################

In this case the command instruction will be appended to the entry point instruction so at startup the command would be sleep 5.
이 케이스의 경우 커맨드 명령은 엔트리 포인트 명령이 추가되고 스타텁 커맨드로 5가 추가됩니다.

If you didn't specify any parameters in the command line if you did then that will override the command instruction.
만약 당신이 커맨드라인에 특정 파라미터를 지정하지 않는 경우 위와 같이 하고 커맨드 명령을 덮어 쓸 수 있습니다.

And remember for this to happen you should always specify the entry point and command instructions in a JSON format.
그리고 기억 하세요. 이 방법들들은 당신이 항상 엔트리 포인트를 지정해야만 발생한다는 것을. 그리고 커맨드 명령을 JSON 포맷으로 해야만.

Finally, What if you really really want to modify the entry point during runtime 
마지막으로 당신이 정말 동작인에 엔트리 포인트를 수정하길 원한다면

say from sleep to an imaginary sleep 2.0 command.

Well in that case you can override it by using the entry point option in the docker run command.

The final command at startup would then be sleep 2.0 10.

Well that's it for this lecture and I will see you in the next.